
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c44  08000200  08000200  00010200  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e8  08010e48  08010e48  00020e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012430  08012430  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  08012430  08012430  00022430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012438  08012438  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012438  08012438  00022438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801243c  0801243c  0002243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08012440  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000931c  20000228  08012664  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009544  08012664  00039544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005f0a9  00000000  00000000  000302fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ee8a  00000000  00000000  0008f3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021c8  00000000  00000000  0009e230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e88  00000000  00000000  000a03f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028aa7  00000000  00000000  000a2280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027014  00000000  00000000  000cad27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea78c  00000000  00000000  000f1d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000798c  00000000  00000000  001dc4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00011f06  00000000  00000000  001e3e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <deregister_tm_clones>:
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <deregister_tm_clones+0x10>)
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <deregister_tm_clones+0x14>)
 8000204:	4283      	cmp	r3, r0
 8000206:	d002      	beq.n	800020e <deregister_tm_clones+0xe>
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <deregister_tm_clones+0x18>)
 800020a:	b103      	cbz	r3, 800020e <deregister_tm_clones+0xe>
 800020c:	4718      	bx	r3
 800020e:	4770      	bx	lr
 8000210:	20000224 	.word	0x20000224
 8000214:	20000224 	.word	0x20000224
 8000218:	00000000 	.word	0x00000000

0800021c <register_tm_clones>:
 800021c:	4805      	ldr	r0, [pc, #20]	; (8000234 <register_tm_clones+0x18>)
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <register_tm_clones+0x1c>)
 8000220:	1a0b      	subs	r3, r1, r0
 8000222:	0fd9      	lsrs	r1, r3, #31
 8000224:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000228:	1049      	asrs	r1, r1, #1
 800022a:	d002      	beq.n	8000232 <register_tm_clones+0x16>
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <register_tm_clones+0x20>)
 800022e:	b103      	cbz	r3, 8000232 <register_tm_clones+0x16>
 8000230:	4718      	bx	r3
 8000232:	4770      	bx	lr
 8000234:	20000224 	.word	0x20000224
 8000238:	20000224 	.word	0x20000224
 800023c:	00000000 	.word	0x00000000

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c06      	ldr	r4, [pc, #24]	; (800025c <__do_global_dtors_aux+0x1c>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b943      	cbnz	r3, 800025a <__do_global_dtors_aux+0x1a>
 8000248:	f7ff ffda 	bl	8000200 <deregister_tm_clones>
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	b113      	cbz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <__do_global_dtors_aux+0x24>)
 8000252:	f3af 8000 	nop.w
 8000256:	2301      	movs	r3, #1
 8000258:	7023      	strb	r3, [r4, #0]
 800025a:	bd10      	pop	{r4, pc}
 800025c:	20000228 	.word	0x20000228
 8000260:	00000000 	.word	0x00000000
 8000264:	08010e2c 	.word	0x08010e2c

08000268 <frame_dummy>:
 8000268:	b508      	push	{r3, lr}
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <frame_dummy+0x14>)
 800026c:	b11b      	cbz	r3, 8000276 <frame_dummy+0xe>
 800026e:	4904      	ldr	r1, [pc, #16]	; (8000280 <frame_dummy+0x18>)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <frame_dummy+0x1c>)
 8000272:	f3af 8000 	nop.w
 8000276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800027a:	e7cf      	b.n	800021c <register_tm_clones>
 800027c:	00000000 	.word	0x00000000
 8000280:	2000022c 	.word	0x2000022c
 8000284:	08010e2c 	.word	0x08010e2c

08000288 <round>:
 8000288:	ec53 2b10 	vmov	r2, r3, d0
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8000292:	f2a5 31ff 	subw	r1, r5, #1023	; 0x3ff
 8000296:	2913      	cmp	r1, #19
 8000298:	4618      	mov	r0, r3
 800029a:	ee10 4a10 	vmov	r4, s0
 800029e:	dc21      	bgt.n	80002e4 <round+0x5c>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	db08      	blt.n	80002b6 <round+0x2e>
 80002a4:	4d1f      	ldr	r5, [pc, #124]	; (8000324 <round+0x9c>)
 80002a6:	410d      	asrs	r5, r1
 80002a8:	ea05 0603 	and.w	r6, r5, r3
 80002ac:	4334      	orrs	r4, r6
 80002ae:	d110      	bne.n	80002d2 <round+0x4a>
 80002b0:	ec43 2b10 	vmov	d0, r2, r3
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 80002ba:	3101      	adds	r1, #1
 80002bc:	bf04      	itt	eq
 80002be:	f040 507f 	orreq.w	r0, r0, #1069547520	; 0x3fc00000
 80002c2:	f440 1040 	orreq.w	r0, r0, #3145728	; 0x300000
 80002c6:	2400      	movs	r4, #0
 80002c8:	4603      	mov	r3, r0
 80002ca:	4622      	mov	r2, r4
 80002cc:	ec43 2b10 	vmov	d0, r2, r3
 80002d0:	bd70      	pop	{r4, r5, r6, pc}
 80002d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002d6:	fa43 f101 	asr.w	r1, r3, r1
 80002da:	4408      	add	r0, r1
 80002dc:	ea20 0005 	bic.w	r0, r0, r5
 80002e0:	2400      	movs	r4, #0
 80002e2:	e7f1      	b.n	80002c8 <round+0x40>
 80002e4:	2933      	cmp	r1, #51	; 0x33
 80002e6:	dd0a      	ble.n	80002fe <round+0x76>
 80002e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80002ec:	d1e0      	bne.n	80002b0 <round+0x28>
 80002ee:	ee10 0a10 	vmov	r0, s0
 80002f2:	4619      	mov	r1, r3
 80002f4:	f006 f868 	bl	80063c8 <__adddf3>
 80002f8:	ec41 0b10 	vmov	d0, r0, r1
 80002fc:	bd70      	pop	{r4, r5, r6, pc}
 80002fe:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8000302:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000306:	fa26 f505 	lsr.w	r5, r6, r5
 800030a:	422a      	tst	r2, r5
 800030c:	d0d0      	beq.n	80002b0 <round+0x28>
 800030e:	2301      	movs	r3, #1
 8000310:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 8000314:	fa03 f101 	lsl.w	r1, r3, r1
 8000318:	1864      	adds	r4, r4, r1
 800031a:	bf28      	it	cs
 800031c:	18c0      	addcs	r0, r0, r3
 800031e:	ea24 0405 	bic.w	r4, r4, r5
 8000322:	e7d1      	b.n	80002c8 <round+0x40>
 8000324:	000fffff 	.word	0x000fffff

08000328 <fmaxf>:
 8000328:	b508      	push	{r3, lr}
 800032a:	ed2d 8b02 	vpush	{d8}
 800032e:	eeb0 8a60 	vmov.f32	s16, s1
 8000332:	eef0 8a40 	vmov.f32	s17, s0
 8000336:	f000 f833 	bl	80003a0 <__fpclassifyf>
 800033a:	b920      	cbnz	r0, 8000346 <fmaxf+0x1e>
 800033c:	eeb0 0a48 	vmov.f32	s0, s16
 8000340:	ecbd 8b02 	vpop	{d8}
 8000344:	bd08      	pop	{r3, pc}
 8000346:	eeb0 0a48 	vmov.f32	s0, s16
 800034a:	f000 f829 	bl	80003a0 <__fpclassifyf>
 800034e:	b120      	cbz	r0, 800035a <fmaxf+0x32>
 8000350:	eef4 8ac8 	vcmpe.f32	s17, s16
 8000354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000358:	ddf0      	ble.n	800033c <fmaxf+0x14>
 800035a:	eeb0 0a68 	vmov.f32	s0, s17
 800035e:	ecbd 8b02 	vpop	{d8}
 8000362:	bd08      	pop	{r3, pc}

08000364 <fminf>:
 8000364:	b508      	push	{r3, lr}
 8000366:	ed2d 8b02 	vpush	{d8}
 800036a:	eeb0 8a60 	vmov.f32	s16, s1
 800036e:	eef0 8a40 	vmov.f32	s17, s0
 8000372:	f000 f815 	bl	80003a0 <__fpclassifyf>
 8000376:	b920      	cbnz	r0, 8000382 <fminf+0x1e>
 8000378:	eeb0 0a48 	vmov.f32	s0, s16
 800037c:	ecbd 8b02 	vpop	{d8}
 8000380:	bd08      	pop	{r3, pc}
 8000382:	eeb0 0a48 	vmov.f32	s0, s16
 8000386:	f000 f80b 	bl	80003a0 <__fpclassifyf>
 800038a:	b120      	cbz	r0, 8000396 <fminf+0x32>
 800038c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8000390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000394:	d5f0      	bpl.n	8000378 <fminf+0x14>
 8000396:	eeb0 0a68 	vmov.f32	s0, s17
 800039a:	ecbd 8b02 	vpop	{d8}
 800039e:	bd08      	pop	{r3, pc}

080003a0 <__fpclassifyf>:
 80003a0:	ee10 3a10 	vmov	r3, s0
 80003a4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80003a8:	d00e      	beq.n	80003c8 <__fpclassifyf+0x28>
 80003aa:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80003ae:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80003b2:	d30d      	bcc.n	80003d0 <__fpclassifyf+0x30>
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <__fpclassifyf+0x34>)
 80003b6:	1e42      	subs	r2, r0, #1
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d907      	bls.n	80003cc <__fpclassifyf+0x2c>
 80003bc:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 80003c0:	fab0 f080 	clz	r0, r0
 80003c4:	0940      	lsrs	r0, r0, #5
 80003c6:	4770      	bx	lr
 80003c8:	2002      	movs	r0, #2
 80003ca:	4770      	bx	lr
 80003cc:	2003      	movs	r0, #3
 80003ce:	4770      	bx	lr
 80003d0:	2004      	movs	r0, #4
 80003d2:	4770      	bx	lr
 80003d4:	007ffffe 	.word	0x007ffffe

080003d8 <exp>:
 80003d8:	b508      	push	{r3, lr}
 80003da:	ed2d 8b04 	vpush	{d8-d9}
 80003de:	eeb0 8a40 	vmov.f32	s16, s0
 80003e2:	eef0 8a60 	vmov.f32	s17, s1
 80003e6:	f000 f8a3 	bl	8000530 <__ieee754_exp>
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <exp+0xa0>)
 80003ec:	eeb0 9a40 	vmov.f32	s18, s0
 80003f0:	eef0 9a60 	vmov.f32	s19, s1
 80003f4:	f993 3000 	ldrsb.w	r3, [r3]
 80003f8:	3301      	adds	r3, #1
 80003fa:	d016      	beq.n	800042a <exp+0x52>
 80003fc:	eeb0 0a48 	vmov.f32	s0, s16
 8000400:	eef0 0a68 	vmov.f32	s1, s17
 8000404:	f000 faf2 	bl	80009ec <finite>
 8000408:	b178      	cbz	r0, 800042a <exp+0x52>
 800040a:	a313      	add	r3, pc, #76	; (adr r3, 8000458 <exp+0x80>)
 800040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000410:	ec51 0b18 	vmov	r0, r1, d8
 8000414:	f006 fc1e 	bl	8006c54 <__aeabi_dcmpgt>
 8000418:	b9a8      	cbnz	r0, 8000446 <exp+0x6e>
 800041a:	a311      	add	r3, pc, #68	; (adr r3, 8000460 <exp+0x88>)
 800041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000420:	ec51 0b18 	vmov	r0, r1, d8
 8000424:	f006 fbf8 	bl	8006c18 <__aeabi_dcmplt>
 8000428:	b930      	cbnz	r0, 8000438 <exp+0x60>
 800042a:	eeb0 0a49 	vmov.f32	s0, s18
 800042e:	eef0 0a69 	vmov.f32	s1, s19
 8000432:	ecbd 8b04 	vpop	{d8-d9}
 8000436:	bd08      	pop	{r3, pc}
 8000438:	f000 faec 	bl	8000a14 <__errno>
 800043c:	2322      	movs	r3, #34	; 0x22
 800043e:	ed9f 9b0a 	vldr	d9, [pc, #40]	; 8000468 <exp+0x90>
 8000442:	6003      	str	r3, [r0, #0]
 8000444:	e7f1      	b.n	800042a <exp+0x52>
 8000446:	f000 fae5 	bl	8000a14 <__errno>
 800044a:	2322      	movs	r3, #34	; 0x22
 800044c:	6003      	str	r3, [r0, #0]
 800044e:	ed9f 9b08 	vldr	d9, [pc, #32]	; 8000470 <exp+0x98>
 8000452:	e7ea      	b.n	800042a <exp+0x52>
 8000454:	f3af 8000 	nop.w
 8000458:	fefa39ef 	.word	0xfefa39ef
 800045c:	40862e42 	.word	0x40862e42
 8000460:	d52d3051 	.word	0xd52d3051
 8000464:	c0874910 	.word	0xc0874910
	...
 8000474:	7ff00000 	.word	0x7ff00000
 8000478:	20000000 	.word	0x20000000

0800047c <fmodf>:
 800047c:	b508      	push	{r3, lr}
 800047e:	ed2d 8b02 	vpush	{d8}
 8000482:	eef0 8a40 	vmov.f32	s17, s0
 8000486:	eeb0 8a60 	vmov.f32	s16, s1
 800048a:	f000 fa17 	bl	80008bc <__ieee754_fmodf>
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <fmodf+0x58>)
 8000490:	f993 3000 	ldrsb.w	r3, [r3]
 8000494:	3301      	adds	r3, #1
 8000496:	d010      	beq.n	80004ba <fmodf+0x3e>
 8000498:	eeb4 8a48 	vcmp.f32	s16, s16
 800049c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a0:	d60b      	bvs.n	80004ba <fmodf+0x3e>
 80004a2:	eef4 8a68 	vcmp.f32	s17, s17
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	d606      	bvs.n	80004ba <fmodf+0x3e>
 80004ac:	eddf 8a0a 	vldr	s17, [pc, #40]	; 80004d8 <fmodf+0x5c>
 80004b0:	eeb4 8a68 	vcmp.f32	s16, s17
 80004b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b8:	d002      	beq.n	80004c0 <fmodf+0x44>
 80004ba:	ecbd 8b02 	vpop	{d8}
 80004be:	bd08      	pop	{r3, pc}
 80004c0:	f000 faa8 	bl	8000a14 <__errno>
 80004c4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80004c8:	ecbd 8b02 	vpop	{d8}
 80004cc:	2321      	movs	r3, #33	; 0x21
 80004ce:	6003      	str	r3, [r0, #0]
 80004d0:	bd08      	pop	{r3, pc}
 80004d2:	bf00      	nop
 80004d4:	20000000 	.word	0x20000000
 80004d8:	00000000 	.word	0x00000000

080004dc <sqrtf>:
 80004dc:	b508      	push	{r3, lr}
 80004de:	ed2d 8b02 	vpush	{d8}
 80004e2:	eeb0 8a40 	vmov.f32	s16, s0
 80004e6:	f000 fa7d 	bl	80009e4 <__ieee754_sqrtf>
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <sqrtf+0x48>)
 80004ec:	f993 3000 	ldrsb.w	r3, [r3]
 80004f0:	3301      	adds	r3, #1
 80004f2:	d00b      	beq.n	800050c <sqrtf+0x30>
 80004f4:	eeb4 8a48 	vcmp.f32	s16, s16
 80004f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004fc:	d606      	bvs.n	800050c <sqrtf+0x30>
 80004fe:	eddf 8a0a 	vldr	s17, [pc, #40]	; 8000528 <sqrtf+0x4c>
 8000502:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8000506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800050a:	d402      	bmi.n	8000512 <sqrtf+0x36>
 800050c:	ecbd 8b02 	vpop	{d8}
 8000510:	bd08      	pop	{r3, pc}
 8000512:	f000 fa7f 	bl	8000a14 <__errno>
 8000516:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800051a:	ecbd 8b02 	vpop	{d8}
 800051e:	2321      	movs	r3, #33	; 0x21
 8000520:	6003      	str	r3, [r0, #0]
 8000522:	bd08      	pop	{r3, pc}
 8000524:	20000000 	.word	0x20000000
	...

08000530 <__ieee754_exp>:
 8000530:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8000534:	ec5b ab10 	vmov	sl, fp, d0
 8000538:	49d9      	ldr	r1, [pc, #868]	; (80008a0 <__ieee754_exp+0x370>)
 800053a:	f02b 4200 	bic.w	r2, fp, #2147483648	; 0x80000000
 800053e:	465b      	mov	r3, fp
 8000540:	428a      	cmp	r2, r1
 8000542:	b084      	sub	sp, #16
 8000544:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8000548:	d912      	bls.n	8000570 <__ieee754_exp+0x40>
 800054a:	49d6      	ldr	r1, [pc, #856]	; (80008a4 <__ieee754_exp+0x374>)
 800054c:	428a      	cmp	r2, r1
 800054e:	d92e      	bls.n	80005ae <__ieee754_exp+0x7e>
 8000550:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8000554:	ea53 030a 	orrs.w	r3, r3, sl
 8000558:	ee10 2a10 	vmov	r2, s0
 800055c:	f040 814d 	bne.w	80007fa <__ieee754_exp+0x2ca>
 8000560:	2c00      	cmp	r4, #0
 8000562:	f000 80ea 	beq.w	800073a <__ieee754_exp+0x20a>
 8000566:	ed9f 0bb6 	vldr	d0, [pc, #728]	; 8000840 <__ieee754_exp+0x310>
 800056a:	b004      	add	sp, #16
 800056c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000570:	4bcd      	ldr	r3, [pc, #820]	; (80008a8 <__ieee754_exp+0x378>)
 8000572:	429a      	cmp	r2, r3
 8000574:	d85b      	bhi.n	800062e <__ieee754_exp+0xfe>
 8000576:	4bcd      	ldr	r3, [pc, #820]	; (80008ac <__ieee754_exp+0x37c>)
 8000578:	429a      	cmp	r2, r3
 800057a:	f200 80e1 	bhi.w	8000740 <__ieee754_exp+0x210>
 800057e:	a3b2      	add	r3, pc, #712	; (adr r3, 8000848 <__ieee754_exp+0x318>)
 8000580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000584:	ee10 0a10 	vmov	r0, s0
 8000588:	4659      	mov	r1, fp
 800058a:	f005 ff1d 	bl	80063c8 <__adddf3>
 800058e:	2200      	movs	r2, #0
 8000590:	4bc7      	ldr	r3, [pc, #796]	; (80008b0 <__ieee754_exp+0x380>)
 8000592:	f006 fb5f 	bl	8006c54 <__aeabi_dcmpgt>
 8000596:	2800      	cmp	r0, #0
 8000598:	f000 80d2 	beq.w	8000740 <__ieee754_exp+0x210>
 800059c:	4650      	mov	r0, sl
 800059e:	4659      	mov	r1, fp
 80005a0:	2200      	movs	r2, #0
 80005a2:	4bc3      	ldr	r3, [pc, #780]	; (80008b0 <__ieee754_exp+0x380>)
 80005a4:	f005 ff10 	bl	80063c8 <__adddf3>
 80005a8:	ec41 0b10 	vmov	d0, r0, r1
 80005ac:	e0c5      	b.n	800073a <__ieee754_exp+0x20a>
 80005ae:	a3a8      	add	r3, pc, #672	; (adr r3, 8000850 <__ieee754_exp+0x320>)
 80005b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005b4:	ee10 0a10 	vmov	r0, s0
 80005b8:	4659      	mov	r1, fp
 80005ba:	f006 fb4b 	bl	8006c54 <__aeabi_dcmpgt>
 80005be:	2800      	cmp	r0, #0
 80005c0:	f040 8126 	bne.w	8000810 <__ieee754_exp+0x2e0>
 80005c4:	a3a4      	add	r3, pc, #656	; (adr r3, 8000858 <__ieee754_exp+0x328>)
 80005c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ca:	4650      	mov	r0, sl
 80005cc:	4659      	mov	r1, fp
 80005ce:	f006 fb23 	bl	8006c18 <__aeabi_dcmplt>
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d1c7      	bne.n	8000566 <__ieee754_exp+0x36>
 80005d6:	49b7      	ldr	r1, [pc, #732]	; (80008b4 <__ieee754_exp+0x384>)
 80005d8:	a3a1      	add	r3, pc, #644	; (adr r3, 8000860 <__ieee754_exp+0x330>)
 80005da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005de:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80005e2:	4650      	mov	r0, sl
 80005e4:	4659      	mov	r1, fp
 80005e6:	f006 f8a5 	bl	8006734 <__aeabi_dmul>
 80005ea:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80005ee:	f005 feeb 	bl	80063c8 <__adddf3>
 80005f2:	f006 fb4f 	bl	8006c94 <__aeabi_d2iz>
 80005f6:	4680      	mov	r8, r0
 80005f8:	f006 f832 	bl	8006660 <__aeabi_i2d>
 80005fc:	a39a      	add	r3, pc, #616	; (adr r3, 8000868 <__ieee754_exp+0x338>)
 80005fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000602:	4604      	mov	r4, r0
 8000604:	460d      	mov	r5, r1
 8000606:	f006 f895 	bl	8006734 <__aeabi_dmul>
 800060a:	4602      	mov	r2, r0
 800060c:	460b      	mov	r3, r1
 800060e:	4650      	mov	r0, sl
 8000610:	4659      	mov	r1, fp
 8000612:	f005 fed7 	bl	80063c4 <__aeabi_dsub>
 8000616:	a396      	add	r3, pc, #600	; (adr r3, 8000870 <__ieee754_exp+0x340>)
 8000618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061c:	4606      	mov	r6, r0
 800061e:	460f      	mov	r7, r1
 8000620:	4620      	mov	r0, r4
 8000622:	4629      	mov	r1, r5
 8000624:	f006 f886 	bl	8006734 <__aeabi_dmul>
 8000628:	e9cd 0100 	strd	r0, r1, [sp]
 800062c:	e016      	b.n	800065c <__ieee754_exp+0x12c>
 800062e:	4ba2      	ldr	r3, [pc, #648]	; (80008b8 <__ieee754_exp+0x388>)
 8000630:	429a      	cmp	r2, r3
 8000632:	d8d0      	bhi.n	80005d6 <__ieee754_exp+0xa6>
 8000634:	4d9f      	ldr	r5, [pc, #636]	; (80008b4 <__ieee754_exp+0x384>)
 8000636:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800063a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800063e:	ee10 0a10 	vmov	r0, s0
 8000642:	4659      	mov	r1, fp
 8000644:	f005 febe 	bl	80063c4 <__aeabi_dsub>
 8000648:	ed95 7b04 	vldr	d7, [r5, #16]
 800064c:	ed8d 7b00 	vstr	d7, [sp]
 8000650:	f1c4 0301 	rsb	r3, r4, #1
 8000654:	4606      	mov	r6, r0
 8000656:	460f      	mov	r7, r1
 8000658:	eba3 0804 	sub.w	r8, r3, r4
 800065c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000660:	4630      	mov	r0, r6
 8000662:	4639      	mov	r1, r7
 8000664:	f005 feae 	bl	80063c4 <__aeabi_dsub>
 8000668:	4602      	mov	r2, r0
 800066a:	460b      	mov	r3, r1
 800066c:	4682      	mov	sl, r0
 800066e:	468b      	mov	fp, r1
 8000670:	f006 f860 	bl	8006734 <__aeabi_dmul>
 8000674:	a380      	add	r3, pc, #512	; (adr r3, 8000878 <__ieee754_exp+0x348>)
 8000676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800067a:	4604      	mov	r4, r0
 800067c:	460d      	mov	r5, r1
 800067e:	f006 f859 	bl	8006734 <__aeabi_dmul>
 8000682:	a37f      	add	r3, pc, #508	; (adr r3, 8000880 <__ieee754_exp+0x350>)
 8000684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000688:	f005 fe9c 	bl	80063c4 <__aeabi_dsub>
 800068c:	4622      	mov	r2, r4
 800068e:	462b      	mov	r3, r5
 8000690:	f006 f850 	bl	8006734 <__aeabi_dmul>
 8000694:	a37c      	add	r3, pc, #496	; (adr r3, 8000888 <__ieee754_exp+0x358>)
 8000696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800069a:	f005 fe95 	bl	80063c8 <__adddf3>
 800069e:	4622      	mov	r2, r4
 80006a0:	462b      	mov	r3, r5
 80006a2:	f006 f847 	bl	8006734 <__aeabi_dmul>
 80006a6:	a37a      	add	r3, pc, #488	; (adr r3, 8000890 <__ieee754_exp+0x360>)
 80006a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ac:	f005 fe8a 	bl	80063c4 <__aeabi_dsub>
 80006b0:	4622      	mov	r2, r4
 80006b2:	462b      	mov	r3, r5
 80006b4:	f006 f83e 	bl	8006734 <__aeabi_dmul>
 80006b8:	a377      	add	r3, pc, #476	; (adr r3, 8000898 <__ieee754_exp+0x368>)
 80006ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006be:	f005 fe83 	bl	80063c8 <__adddf3>
 80006c2:	4622      	mov	r2, r4
 80006c4:	462b      	mov	r3, r5
 80006c6:	f006 f835 	bl	8006734 <__aeabi_dmul>
 80006ca:	4602      	mov	r2, r0
 80006cc:	460b      	mov	r3, r1
 80006ce:	4650      	mov	r0, sl
 80006d0:	4659      	mov	r1, fp
 80006d2:	f005 fe77 	bl	80063c4 <__aeabi_dsub>
 80006d6:	4604      	mov	r4, r0
 80006d8:	460d      	mov	r5, r1
 80006da:	4622      	mov	r2, r4
 80006dc:	462b      	mov	r3, r5
 80006de:	4650      	mov	r0, sl
 80006e0:	4659      	mov	r1, fp
 80006e2:	f006 f827 	bl	8006734 <__aeabi_dmul>
 80006e6:	4622      	mov	r2, r4
 80006e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80006ec:	462b      	mov	r3, r5
 80006ee:	f1b8 0f00 	cmp.w	r8, #0
 80006f2:	d05e      	beq.n	80007b2 <__ieee754_exp+0x282>
 80006f4:	2000      	movs	r0, #0
 80006f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80006fa:	f005 fe63 	bl	80063c4 <__aeabi_dsub>
 80006fe:	4602      	mov	r2, r0
 8000700:	460b      	mov	r3, r1
 8000702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000706:	f006 f93f 	bl	8006988 <__aeabi_ddiv>
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000712:	f005 fe57 	bl	80063c4 <__aeabi_dsub>
 8000716:	4632      	mov	r2, r6
 8000718:	463b      	mov	r3, r7
 800071a:	f005 fe53 	bl	80063c4 <__aeabi_dsub>
 800071e:	460b      	mov	r3, r1
 8000720:	4602      	mov	r2, r0
 8000722:	4963      	ldr	r1, [pc, #396]	; (80008b0 <__ieee754_exp+0x380>)
 8000724:	2000      	movs	r0, #0
 8000726:	f005 fe4d 	bl	80063c4 <__aeabi_dsub>
 800072a:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 800072e:	4598      	cmp	r8, r3
 8000730:	db78      	blt.n	8000824 <__ieee754_exp+0x2f4>
 8000732:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 8000736:	ec41 0b10 	vmov	d0, r0, r1
 800073a:	b004      	add	sp, #16
 800073c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000740:	4652      	mov	r2, sl
 8000742:	465b      	mov	r3, fp
 8000744:	4650      	mov	r0, sl
 8000746:	4659      	mov	r1, fp
 8000748:	f005 fff4 	bl	8006734 <__aeabi_dmul>
 800074c:	a34a      	add	r3, pc, #296	; (adr r3, 8000878 <__ieee754_exp+0x348>)
 800074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000752:	4604      	mov	r4, r0
 8000754:	460d      	mov	r5, r1
 8000756:	f005 ffed 	bl	8006734 <__aeabi_dmul>
 800075a:	a349      	add	r3, pc, #292	; (adr r3, 8000880 <__ieee754_exp+0x350>)
 800075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000760:	f005 fe30 	bl	80063c4 <__aeabi_dsub>
 8000764:	4622      	mov	r2, r4
 8000766:	462b      	mov	r3, r5
 8000768:	f005 ffe4 	bl	8006734 <__aeabi_dmul>
 800076c:	a346      	add	r3, pc, #280	; (adr r3, 8000888 <__ieee754_exp+0x358>)
 800076e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000772:	f005 fe29 	bl	80063c8 <__adddf3>
 8000776:	4622      	mov	r2, r4
 8000778:	462b      	mov	r3, r5
 800077a:	f005 ffdb 	bl	8006734 <__aeabi_dmul>
 800077e:	a344      	add	r3, pc, #272	; (adr r3, 8000890 <__ieee754_exp+0x360>)
 8000780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000784:	f005 fe1e 	bl	80063c4 <__aeabi_dsub>
 8000788:	4622      	mov	r2, r4
 800078a:	462b      	mov	r3, r5
 800078c:	f005 ffd2 	bl	8006734 <__aeabi_dmul>
 8000790:	a341      	add	r3, pc, #260	; (adr r3, 8000898 <__ieee754_exp+0x368>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	f005 fe17 	bl	80063c8 <__adddf3>
 800079a:	4622      	mov	r2, r4
 800079c:	462b      	mov	r3, r5
 800079e:	f005 ffc9 	bl	8006734 <__aeabi_dmul>
 80007a2:	4602      	mov	r2, r0
 80007a4:	460b      	mov	r3, r1
 80007a6:	4650      	mov	r0, sl
 80007a8:	4659      	mov	r1, fp
 80007aa:	f005 fe0b 	bl	80063c4 <__aeabi_dsub>
 80007ae:	4602      	mov	r2, r0
 80007b0:	460b      	mov	r3, r1
 80007b2:	4650      	mov	r0, sl
 80007b4:	4659      	mov	r1, fp
 80007b6:	4616      	mov	r6, r2
 80007b8:	461f      	mov	r7, r3
 80007ba:	f005 ffbb 	bl	8006734 <__aeabi_dmul>
 80007be:	2200      	movs	r2, #0
 80007c0:	4604      	mov	r4, r0
 80007c2:	460d      	mov	r5, r1
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c8:	4630      	mov	r0, r6
 80007ca:	4639      	mov	r1, r7
 80007cc:	f005 fdfa 	bl	80063c4 <__aeabi_dsub>
 80007d0:	4602      	mov	r2, r0
 80007d2:	460b      	mov	r3, r1
 80007d4:	4620      	mov	r0, r4
 80007d6:	4629      	mov	r1, r5
 80007d8:	f006 f8d6 	bl	8006988 <__aeabi_ddiv>
 80007dc:	4652      	mov	r2, sl
 80007de:	465b      	mov	r3, fp
 80007e0:	f005 fdf0 	bl	80063c4 <__aeabi_dsub>
 80007e4:	4602      	mov	r2, r0
 80007e6:	460b      	mov	r3, r1
 80007e8:	2000      	movs	r0, #0
 80007ea:	4931      	ldr	r1, [pc, #196]	; (80008b0 <__ieee754_exp+0x380>)
 80007ec:	f005 fdea 	bl	80063c4 <__aeabi_dsub>
 80007f0:	ec41 0b10 	vmov	d0, r0, r1
 80007f4:	b004      	add	sp, #16
 80007f6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80007fa:	465b      	mov	r3, fp
 80007fc:	ee10 0a10 	vmov	r0, s0
 8000800:	4659      	mov	r1, fp
 8000802:	f005 fde1 	bl	80063c8 <__adddf3>
 8000806:	ec41 0b10 	vmov	d0, r0, r1
 800080a:	b004      	add	sp, #16
 800080c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000810:	a30d      	add	r3, pc, #52	; (adr r3, 8000848 <__ieee754_exp+0x318>)
 8000812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000816:	4610      	mov	r0, r2
 8000818:	4619      	mov	r1, r3
 800081a:	f005 ff8b 	bl	8006734 <__aeabi_dmul>
 800081e:	ec41 0b10 	vmov	d0, r0, r1
 8000822:	e78a      	b.n	800073a <__ieee754_exp+0x20a>
 8000824:	f508 737a 	add.w	r3, r8, #1000	; 0x3e8
 8000828:	eb01 5103 	add.w	r1, r1, r3, lsl #20
 800082c:	2200      	movs	r2, #0
 800082e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8000832:	f005 ff7f 	bl	8006734 <__aeabi_dmul>
 8000836:	ec41 0b10 	vmov	d0, r0, r1
 800083a:	b004      	add	sp, #16
 800083c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	...
 8000848:	8800759c 	.word	0x8800759c
 800084c:	7e37e43c 	.word	0x7e37e43c
 8000850:	fefa39ef 	.word	0xfefa39ef
 8000854:	40862e42 	.word	0x40862e42
 8000858:	d52d3051 	.word	0xd52d3051
 800085c:	c0874910 	.word	0xc0874910
 8000860:	652b82fe 	.word	0x652b82fe
 8000864:	3ff71547 	.word	0x3ff71547
 8000868:	fee00000 	.word	0xfee00000
 800086c:	3fe62e42 	.word	0x3fe62e42
 8000870:	35793c76 	.word	0x35793c76
 8000874:	3dea39ef 	.word	0x3dea39ef
 8000878:	72bea4d0 	.word	0x72bea4d0
 800087c:	3e663769 	.word	0x3e663769
 8000880:	c5d26bf1 	.word	0xc5d26bf1
 8000884:	3ebbbd41 	.word	0x3ebbbd41
 8000888:	af25de2c 	.word	0xaf25de2c
 800088c:	3f11566a 	.word	0x3f11566a
 8000890:	16bebd93 	.word	0x16bebd93
 8000894:	3f66c16c 	.word	0x3f66c16c
 8000898:	5555553e 	.word	0x5555553e
 800089c:	3fc55555 	.word	0x3fc55555
 80008a0:	40862e41 	.word	0x40862e41
 80008a4:	7fefffff 	.word	0x7fefffff
 80008a8:	3fd62e42 	.word	0x3fd62e42
 80008ac:	3e2fffff 	.word	0x3e2fffff
 80008b0:	3ff00000 	.word	0x3ff00000
 80008b4:	08011660 	.word	0x08011660
 80008b8:	3ff0a2b1 	.word	0x3ff0a2b1

080008bc <__ieee754_fmodf>:
 80008bc:	b4f0      	push	{r4, r5, r6, r7}
 80008be:	b082      	sub	sp, #8
 80008c0:	edcd 0a01 	vstr	s1, [sp, #4]
 80008c4:	9801      	ldr	r0, [sp, #4]
 80008c6:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008ca:	d040      	beq.n	800094e <__ieee754_fmodf+0x92>
 80008cc:	ee10 5a10 	vmov	r5, s0
 80008d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80008d4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80008d8:	da39      	bge.n	800094e <__ieee754_fmodf+0x92>
 80008da:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 80008de:	dc36      	bgt.n	800094e <__ieee754_fmodf+0x92>
 80008e0:	4566      	cmp	r6, ip
 80008e2:	db3a      	blt.n	800095a <__ieee754_fmodf+0x9e>
 80008e4:	f005 4700 	and.w	r7, r5, #2147483648	; 0x80000000
 80008e8:	d03a      	beq.n	8000960 <__ieee754_fmodf+0xa4>
 80008ea:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80008ee:	d15a      	bne.n	80009a6 <__ieee754_fmodf+0xea>
 80008f0:	0231      	lsls	r1, r6, #8
 80008f2:	2900      	cmp	r1, #0
 80008f4:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80008f8:	dd04      	ble.n	8000904 <__ieee754_fmodf+0x48>
 80008fa:	0049      	lsls	r1, r1, #1
 80008fc:	2900      	cmp	r1, #0
 80008fe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8000902:	dcfa      	bgt.n	80008fa <__ieee754_fmodf+0x3e>
 8000904:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8000908:	d15c      	bne.n	80009c4 <__ieee754_fmodf+0x108>
 800090a:	ea5f 210c 	movs.w	r1, ip, lsl #8
 800090e:	f06f 047d 	mvn.w	r4, #125	; 0x7d
 8000912:	d403      	bmi.n	800091c <__ieee754_fmodf+0x60>
 8000914:	0049      	lsls	r1, r1, #1
 8000916:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800091a:	d5fb      	bpl.n	8000914 <__ieee754_fmodf+0x58>
 800091c:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8000920:	db4a      	blt.n	80009b8 <__ieee754_fmodf+0xfc>
 8000922:	f3c5 0316 	ubfx	r3, r5, #0, #23
 8000926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800092a:	f114 0f7e 	cmn.w	r4, #126	; 0x7e
 800092e:	db3d      	blt.n	80009ac <__ieee754_fmodf+0xf0>
 8000930:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000938:	1b12      	subs	r2, r2, r4
 800093a:	e002      	b.n	8000942 <__ieee754_fmodf+0x86>
 800093c:	d010      	beq.n	8000960 <__ieee754_fmodf+0xa4>
 800093e:	004b      	lsls	r3, r1, #1
 8000940:	3a01      	subs	r2, #1
 8000942:	1a19      	subs	r1, r3, r0
 8000944:	b1aa      	cbz	r2, 8000972 <__ieee754_fmodf+0xb6>
 8000946:	2900      	cmp	r1, #0
 8000948:	daf8      	bge.n	800093c <__ieee754_fmodf+0x80>
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	e7f8      	b.n	8000940 <__ieee754_fmodf+0x84>
 800094e:	eddd 7a01 	vldr	s15, [sp, #4]
 8000952:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000956:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800095a:	b002      	add	sp, #8
 800095c:	bcf0      	pop	{r4, r5, r6, r7}
 800095e:	4770      	bx	lr
 8000960:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <__ieee754_fmodf+0x120>)
 8000962:	0ffb      	lsrs	r3, r7, #31
 8000964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000968:	ed93 0a00 	vldr	s0, [r3]
 800096c:	b002      	add	sp, #8
 800096e:	bcf0      	pop	{r4, r5, r6, r7}
 8000970:	4770      	bx	lr
 8000972:	ea13 0321 	ands.w	r3, r3, r1, asr #32
 8000976:	bf38      	it	cc
 8000978:	460b      	movcc	r3, r1
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f0      	beq.n	8000960 <__ieee754_fmodf+0xa4>
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <__ieee754_fmodf+0x124>)
 8000980:	4293      	cmp	r3, r2
 8000982:	dc04      	bgt.n	800098e <__ieee754_fmodf+0xd2>
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4293      	cmp	r3, r2
 8000988:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800098c:	ddfa      	ble.n	8000984 <__ieee754_fmodf+0xc8>
 800098e:	f114 0f7e 	cmn.w	r4, #126	; 0x7e
 8000992:	db1b      	blt.n	80009cc <__ieee754_fmodf+0x110>
 8000994:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000998:	433b      	orrs	r3, r7
 800099a:	347f      	adds	r4, #127	; 0x7f
 800099c:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 80009a0:	ee00 3a10 	vmov	s0, r3
 80009a4:	e7d9      	b.n	800095a <__ieee754_fmodf+0x9e>
 80009a6:	15f2      	asrs	r2, r6, #23
 80009a8:	3a7f      	subs	r2, #127	; 0x7f
 80009aa:	e7ab      	b.n	8000904 <__ieee754_fmodf+0x48>
 80009ac:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80009b0:	1b09      	subs	r1, r1, r4
 80009b2:	fa0c f001 	lsl.w	r0, ip, r1
 80009b6:	e7bf      	b.n	8000938 <__ieee754_fmodf+0x7c>
 80009b8:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	fa06 f303 	lsl.w	r3, r6, r3
 80009c2:	e7b2      	b.n	800092a <__ieee754_fmodf+0x6e>
 80009c4:	ea4f 54ec 	mov.w	r4, ip, asr #23
 80009c8:	3c7f      	subs	r4, #127	; 0x7f
 80009ca:	e7a7      	b.n	800091c <__ieee754_fmodf+0x60>
 80009cc:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80009d0:	1b14      	subs	r4, r2, r4
 80009d2:	4123      	asrs	r3, r4
 80009d4:	433b      	orrs	r3, r7
 80009d6:	ee00 3a10 	vmov	s0, r3
 80009da:	e7be      	b.n	800095a <__ieee754_fmodf+0x9e>
 80009dc:	08011690 	.word	0x08011690
 80009e0:	007fffff 	.word	0x007fffff

080009e4 <__ieee754_sqrtf>:
 80009e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <finite>:
 80009ec:	ee10 3a90 	vmov	r3, s1
 80009f0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80009f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80009f8:	0fc0      	lsrs	r0, r0, #31
 80009fa:	4770      	bx	lr

080009fc <atof>:
 80009fc:	2100      	movs	r1, #0
 80009fe:	f001 bf59 	b.w	80028b4 <strtod>
 8000a02:	bf00      	nop

08000a04 <atoi>:
 8000a04:	220a      	movs	r2, #10
 8000a06:	2100      	movs	r1, #0
 8000a08:	f002 b8c0 	b.w	8002b8c <strtol>

08000a0c <_atoi_r>:
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f002 b8ae 	b.w	8002b70 <_strtol_r>

08000a14 <__errno>:
 8000a14:	4b01      	ldr	r3, [pc, #4]	; (8000a1c <__errno+0x8>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000004 	.word	0x20000004

08000a20 <__libc_init_array>:
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	4e0d      	ldr	r6, [pc, #52]	; (8000a58 <__libc_init_array+0x38>)
 8000a24:	4d0d      	ldr	r5, [pc, #52]	; (8000a5c <__libc_init_array+0x3c>)
 8000a26:	1b76      	subs	r6, r6, r5
 8000a28:	10b6      	asrs	r6, r6, #2
 8000a2a:	d006      	beq.n	8000a3a <__libc_init_array+0x1a>
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	3401      	adds	r4, #1
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	42a6      	cmp	r6, r4
 8000a38:	d1f9      	bne.n	8000a2e <__libc_init_array+0xe>
 8000a3a:	4e09      	ldr	r6, [pc, #36]	; (8000a60 <__libc_init_array+0x40>)
 8000a3c:	4d09      	ldr	r5, [pc, #36]	; (8000a64 <__libc_init_array+0x44>)
 8000a3e:	1b76      	subs	r6, r6, r5
 8000a40:	f010 f9f4 	bl	8010e2c <_init>
 8000a44:	10b6      	asrs	r6, r6, #2
 8000a46:	d006      	beq.n	8000a56 <__libc_init_array+0x36>
 8000a48:	2400      	movs	r4, #0
 8000a4a:	3401      	adds	r4, #1
 8000a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a50:	4798      	blx	r3
 8000a52:	42a6      	cmp	r6, r4
 8000a54:	d1f9      	bne.n	8000a4a <__libc_init_array+0x2a>
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	08012438 	.word	0x08012438
 8000a5c:	08012438 	.word	0x08012438
 8000a60:	0801243c 	.word	0x0801243c
 8000a64:	08012438 	.word	0x08012438

08000a68 <memcpy>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	ea41 0300 	orr.w	r3, r1, r0
 8000a6e:	f013 0303 	ands.w	r3, r3, #3
 8000a72:	d16d      	bne.n	8000b50 <memcpy+0xe8>
 8000a74:	3a40      	subs	r2, #64	; 0x40
 8000a76:	d341      	bcc.n	8000afc <memcpy+0x94>
 8000a78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000a7c:	f840 3b04 	str.w	r3, [r0], #4
 8000a80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000a84:	f840 3b04 	str.w	r3, [r0], #4
 8000a88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000a8c:	f840 3b04 	str.w	r3, [r0], #4
 8000a90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000a94:	f840 3b04 	str.w	r3, [r0], #4
 8000a98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000a9c:	f840 3b04 	str.w	r3, [r0], #4
 8000aa0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000aa4:	f840 3b04 	str.w	r3, [r0], #4
 8000aa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000aac:	f840 3b04 	str.w	r3, [r0], #4
 8000ab0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ab4:	f840 3b04 	str.w	r3, [r0], #4
 8000ab8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000abc:	f840 3b04 	str.w	r3, [r0], #4
 8000ac0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ac4:	f840 3b04 	str.w	r3, [r0], #4
 8000ac8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000acc:	f840 3b04 	str.w	r3, [r0], #4
 8000ad0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ad4:	f840 3b04 	str.w	r3, [r0], #4
 8000ad8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000adc:	f840 3b04 	str.w	r3, [r0], #4
 8000ae0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ae4:	f840 3b04 	str.w	r3, [r0], #4
 8000ae8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000aec:	f840 3b04 	str.w	r3, [r0], #4
 8000af0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000af4:	f840 3b04 	str.w	r3, [r0], #4
 8000af8:	3a40      	subs	r2, #64	; 0x40
 8000afa:	d2bd      	bcs.n	8000a78 <memcpy+0x10>
 8000afc:	3230      	adds	r2, #48	; 0x30
 8000afe:	d311      	bcc.n	8000b24 <memcpy+0xbc>
 8000b00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b04:	f840 3b04 	str.w	r3, [r0], #4
 8000b08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b0c:	f840 3b04 	str.w	r3, [r0], #4
 8000b10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b14:	f840 3b04 	str.w	r3, [r0], #4
 8000b18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b1c:	f840 3b04 	str.w	r3, [r0], #4
 8000b20:	3a10      	subs	r2, #16
 8000b22:	d2ed      	bcs.n	8000b00 <memcpy+0x98>
 8000b24:	320c      	adds	r2, #12
 8000b26:	d305      	bcc.n	8000b34 <memcpy+0xcc>
 8000b28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b2c:	f840 3b04 	str.w	r3, [r0], #4
 8000b30:	3a04      	subs	r2, #4
 8000b32:	d2f9      	bcs.n	8000b28 <memcpy+0xc0>
 8000b34:	3204      	adds	r2, #4
 8000b36:	d008      	beq.n	8000b4a <memcpy+0xe2>
 8000b38:	07d2      	lsls	r2, r2, #31
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b40:	f800 3b01 	strbne.w	r3, [r0], #1
 8000b44:	d301      	bcc.n	8000b4a <memcpy+0xe2>
 8000b46:	880b      	ldrh	r3, [r1, #0]
 8000b48:	8003      	strh	r3, [r0, #0]
 8000b4a:	4660      	mov	r0, ip
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2a08      	cmp	r2, #8
 8000b52:	d313      	bcc.n	8000b7c <memcpy+0x114>
 8000b54:	078b      	lsls	r3, r1, #30
 8000b56:	d08d      	beq.n	8000a74 <memcpy+0xc>
 8000b58:	f010 0303 	ands.w	r3, r0, #3
 8000b5c:	d08a      	beq.n	8000a74 <memcpy+0xc>
 8000b5e:	f1c3 0304 	rsb	r3, r3, #4
 8000b62:	1ad2      	subs	r2, r2, r3
 8000b64:	07db      	lsls	r3, r3, #31
 8000b66:	bf1c      	itt	ne
 8000b68:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b6c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000b70:	d380      	bcc.n	8000a74 <memcpy+0xc>
 8000b72:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000b76:	f820 3b02 	strh.w	r3, [r0], #2
 8000b7a:	e77b      	b.n	8000a74 <memcpy+0xc>
 8000b7c:	3a04      	subs	r2, #4
 8000b7e:	d3d9      	bcc.n	8000b34 <memcpy+0xcc>
 8000b80:	3a01      	subs	r2, #1
 8000b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b86:	f800 3b01 	strb.w	r3, [r0], #1
 8000b8a:	d2f9      	bcs.n	8000b80 <memcpy+0x118>
 8000b8c:	780b      	ldrb	r3, [r1, #0]
 8000b8e:	7003      	strb	r3, [r0, #0]
 8000b90:	784b      	ldrb	r3, [r1, #1]
 8000b92:	7043      	strb	r3, [r0, #1]
 8000b94:	788b      	ldrb	r3, [r1, #2]
 8000b96:	7083      	strb	r3, [r0, #2]
 8000b98:	4660      	mov	r0, ip
 8000b9a:	4770      	bx	lr

08000b9c <memset>:
 8000b9c:	b4f0      	push	{r4, r5, r6, r7}
 8000b9e:	0786      	lsls	r6, r0, #30
 8000ba0:	d046      	beq.n	8000c30 <memset+0x94>
 8000ba2:	1e54      	subs	r4, r2, #1
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	d03c      	beq.n	8000c22 <memset+0x86>
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	4603      	mov	r3, r0
 8000bac:	e002      	b.n	8000bb4 <memset+0x18>
 8000bae:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8000bb2:	d336      	bcc.n	8000c22 <memset+0x86>
 8000bb4:	f803 2b01 	strb.w	r2, [r3], #1
 8000bb8:	079d      	lsls	r5, r3, #30
 8000bba:	d1f8      	bne.n	8000bae <memset+0x12>
 8000bbc:	2c03      	cmp	r4, #3
 8000bbe:	d929      	bls.n	8000c14 <memset+0x78>
 8000bc0:	b2cd      	uxtb	r5, r1
 8000bc2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000bc6:	2c0f      	cmp	r4, #15
 8000bc8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000bcc:	d933      	bls.n	8000c36 <memset+0x9a>
 8000bce:	f1a4 0610 	sub.w	r6, r4, #16
 8000bd2:	0936      	lsrs	r6, r6, #4
 8000bd4:	f103 0720 	add.w	r7, r3, #32
 8000bd8:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000bdc:	f103 0210 	add.w	r2, r3, #16
 8000be0:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000be4:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000be8:	3210      	adds	r2, #16
 8000bea:	42ba      	cmp	r2, r7
 8000bec:	d1f8      	bne.n	8000be0 <memset+0x44>
 8000bee:	1c72      	adds	r2, r6, #1
 8000bf0:	f014 0f0c 	tst.w	r4, #12
 8000bf4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000bf8:	f004 060f 	and.w	r6, r4, #15
 8000bfc:	d013      	beq.n	8000c26 <memset+0x8a>
 8000bfe:	1f33      	subs	r3, r6, #4
 8000c00:	f023 0303 	bic.w	r3, r3, #3
 8000c04:	3304      	adds	r3, #4
 8000c06:	4413      	add	r3, r2
 8000c08:	f842 5b04 	str.w	r5, [r2], #4
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d1fb      	bne.n	8000c08 <memset+0x6c>
 8000c10:	f006 0403 	and.w	r4, r6, #3
 8000c14:	b12c      	cbz	r4, 8000c22 <memset+0x86>
 8000c16:	b2c9      	uxtb	r1, r1
 8000c18:	441c      	add	r4, r3
 8000c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c1e:	429c      	cmp	r4, r3
 8000c20:	d1fb      	bne.n	8000c1a <memset+0x7e>
 8000c22:	bcf0      	pop	{r4, r5, r6, r7}
 8000c24:	4770      	bx	lr
 8000c26:	4634      	mov	r4, r6
 8000c28:	4613      	mov	r3, r2
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d1f3      	bne.n	8000c16 <memset+0x7a>
 8000c2e:	e7f8      	b.n	8000c22 <memset+0x86>
 8000c30:	4614      	mov	r4, r2
 8000c32:	4603      	mov	r3, r0
 8000c34:	e7c2      	b.n	8000bbc <memset+0x20>
 8000c36:	461a      	mov	r2, r3
 8000c38:	4626      	mov	r6, r4
 8000c3a:	e7e0      	b.n	8000bfe <memset+0x62>

08000c3c <__cvt>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	ec57 6b10 	vmov	r6, r7, d0
 8000c44:	b084      	sub	sp, #16
 8000c46:	2f00      	cmp	r7, #0
 8000c48:	4689      	mov	r9, r1
 8000c4a:	4692      	mov	sl, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8000c52:	db5e      	blt.n	8000d12 <__cvt+0xd6>
 8000c54:	2300      	movs	r3, #0
 8000c56:	2d66      	cmp	r5, #102	; 0x66
 8000c58:	700b      	strb	r3, [r1, #0]
 8000c5a:	d018      	beq.n	8000c8e <__cvt+0x52>
 8000c5c:	2d46      	cmp	r5, #70	; 0x46
 8000c5e:	d016      	beq.n	8000c8e <__cvt+0x52>
 8000c60:	f025 0320 	bic.w	r3, r5, #32
 8000c64:	2b45      	cmp	r3, #69	; 0x45
 8000c66:	d036      	beq.n	8000cd6 <__cvt+0x9a>
 8000c68:	aa03      	add	r2, sp, #12
 8000c6a:	ab02      	add	r3, sp, #8
 8000c6c:	e9cd 3200 	strd	r3, r2, [sp]
 8000c70:	2102      	movs	r1, #2
 8000c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000c74:	464a      	mov	r2, r9
 8000c76:	ec47 6b10 	vmov	d0, r6, r7
 8000c7a:	f002 f907 	bl	8002e8c <_dtoa_r>
 8000c7e:	2d67      	cmp	r5, #103	; 0x67
 8000c80:	4680      	mov	r8, r0
 8000c82:	d136      	bne.n	8000cf2 <__cvt+0xb6>
 8000c84:	f01a 0f01 	tst.w	sl, #1
 8000c88:	d135      	bne.n	8000cf6 <__cvt+0xba>
 8000c8a:	9b03      	ldr	r3, [sp, #12]
 8000c8c:	e01c      	b.n	8000cc8 <__cvt+0x8c>
 8000c8e:	aa03      	add	r2, sp, #12
 8000c90:	ab02      	add	r3, sp, #8
 8000c92:	e9cd 3200 	strd	r3, r2, [sp]
 8000c96:	2103      	movs	r1, #3
 8000c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000c9a:	464a      	mov	r2, r9
 8000c9c:	ec47 6b10 	vmov	d0, r6, r7
 8000ca0:	f002 f8f4 	bl	8002e8c <_dtoa_r>
 8000ca4:	4680      	mov	r8, r0
 8000ca6:	eb00 0509 	add.w	r5, r0, r9
 8000caa:	f898 3000 	ldrb.w	r3, [r8]
 8000cae:	2b30      	cmp	r3, #48	; 0x30
 8000cb0:	d034      	beq.n	8000d1c <__cvt+0xe0>
 8000cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	441d      	add	r5, r3
 8000cb8:	4630      	mov	r0, r6
 8000cba:	4639      	mov	r1, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f005 ffa0 	bl	8006c04 <__aeabi_dcmpeq>
 8000cc4:	b1d0      	cbz	r0, 8000cfc <__cvt+0xc0>
 8000cc6:	462b      	mov	r3, r5
 8000cc8:	eba3 0308 	sub.w	r3, r3, r8
 8000ccc:	4640      	mov	r0, r8
 8000cce:	6023      	str	r3, [r4, #0]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	a903      	add	r1, sp, #12
 8000cd8:	ab02      	add	r3, sp, #8
 8000cda:	f109 0901 	add.w	r9, r9, #1
 8000cde:	e9cd 3100 	strd	r3, r1, [sp]
 8000ce2:	464a      	mov	r2, r9
 8000ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	ec47 6b10 	vmov	d0, r6, r7
 8000cec:	f002 f8ce 	bl	8002e8c <_dtoa_r>
 8000cf0:	4680      	mov	r8, r0
 8000cf2:	2d47      	cmp	r5, #71	; 0x47
 8000cf4:	d0c6      	beq.n	8000c84 <__cvt+0x48>
 8000cf6:	eb08 0509 	add.w	r5, r8, r9
 8000cfa:	e7dd      	b.n	8000cb8 <__cvt+0x7c>
 8000cfc:	9b03      	ldr	r3, [sp, #12]
 8000cfe:	429d      	cmp	r5, r3
 8000d00:	d9e2      	bls.n	8000cc8 <__cvt+0x8c>
 8000d02:	2130      	movs	r1, #48	; 0x30
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	9203      	str	r2, [sp, #12]
 8000d08:	7019      	strb	r1, [r3, #0]
 8000d0a:	9b03      	ldr	r3, [sp, #12]
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d3f9      	bcc.n	8000d04 <__cvt+0xc8>
 8000d10:	e7da      	b.n	8000cc8 <__cvt+0x8c>
 8000d12:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8000d16:	461f      	mov	r7, r3
 8000d18:	232d      	movs	r3, #45	; 0x2d
 8000d1a:	e79c      	b.n	8000c56 <__cvt+0x1a>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2300      	movs	r3, #0
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f005 ff6e 	bl	8006c04 <__aeabi_dcmpeq>
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	d1c2      	bne.n	8000cb2 <__cvt+0x76>
 8000d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000d2e:	f1c9 0301 	rsb	r3, r9, #1
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e7bf      	b.n	8000cb6 <__cvt+0x7a>
 8000d36:	bf00      	nop

08000d38 <__exponent>:
 8000d38:	b4f0      	push	{r4, r5, r6, r7}
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	bfba      	itte	lt
 8000d40:	4249      	neglt	r1, r1
 8000d42:	232d      	movlt	r3, #45	; 0x2d
 8000d44:	232b      	movge	r3, #43	; 0x2b
 8000d46:	2909      	cmp	r1, #9
 8000d48:	f804 2b02 	strb.w	r2, [r4], #2
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	7043      	strb	r3, [r0, #1]
 8000d50:	dd2d      	ble.n	8000dae <__exponent+0x76>
 8000d52:	f10d 0607 	add.w	r6, sp, #7
 8000d56:	4635      	mov	r5, r6
 8000d58:	4f19      	ldr	r7, [pc, #100]	; (8000dc0 <__exponent+0x88>)
 8000d5a:	e001      	b.n	8000d60 <__exponent+0x28>
 8000d5c:	4615      	mov	r5, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	fb87 3201 	smull	r3, r2, r7, r1
 8000d64:	17cb      	asrs	r3, r1, #31
 8000d66:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8000d6a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000d6e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8000d72:	3230      	adds	r2, #48	; 0x30
 8000d74:	2963      	cmp	r1, #99	; 0x63
 8000d76:	f805 2c01 	strb.w	r2, [r5, #-1]
 8000d7a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8000d7e:	dced      	bgt.n	8000d5c <__exponent+0x24>
 8000d80:	3330      	adds	r3, #48	; 0x30
 8000d82:	1ea9      	subs	r1, r5, #2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	428e      	cmp	r6, r1
 8000d88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8000d8c:	d90b      	bls.n	8000da6 <__exponent+0x6e>
 8000d8e:	4621      	mov	r1, r4
 8000d90:	e001      	b.n	8000d96 <__exponent+0x5e>
 8000d92:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000d96:	f801 3b01 	strb.w	r3, [r1], #1
 8000d9a:	42b2      	cmp	r2, r6
 8000d9c:	d1f9      	bne.n	8000d92 <__exponent+0x5a>
 8000d9e:	f10d 0309 	add.w	r3, sp, #9
 8000da2:	1b5d      	subs	r5, r3, r5
 8000da4:	442c      	add	r4, r5
 8000da6:	1a20      	subs	r0, r4, r0
 8000da8:	b002      	add	sp, #8
 8000daa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dac:	4770      	bx	lr
 8000dae:	3130      	adds	r1, #48	; 0x30
 8000db0:	2330      	movs	r3, #48	; 0x30
 8000db2:	1d04      	adds	r4, r0, #4
 8000db4:	70c1      	strb	r1, [r0, #3]
 8000db6:	7083      	strb	r3, [r0, #2]
 8000db8:	1a20      	subs	r0, r4, r0
 8000dba:	b002      	add	sp, #8
 8000dbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	66666667 	.word	0x66666667

08000dc4 <_printf_float>:
 8000dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc8:	b08d      	sub	sp, #52	; 0x34
 8000dca:	460c      	mov	r4, r1
 8000dcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8000dd0:	4616      	mov	r6, r2
 8000dd2:	461f      	mov	r7, r3
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	f003 fddd 	bl	8004994 <_localeconv_r>
 8000dda:	6803      	ldr	r3, [r0, #0]
 8000ddc:	9306      	str	r3, [sp, #24]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fd2e 	bl	8001840 <strlen>
 8000de4:	2300      	movs	r3, #0
 8000de6:	930a      	str	r3, [sp, #40]	; 0x28
 8000de8:	f8d8 3000 	ldr.w	r3, [r8]
 8000dec:	9007      	str	r0, [sp, #28]
 8000dee:	3307      	adds	r3, #7
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	ed93 7b00 	vldr	d7, [r3]
 8000df8:	3308      	adds	r3, #8
 8000dfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000dfe:	f8d4 b000 	ldr.w	fp, [r4]
 8000e02:	f894 a018 	ldrb.w	sl, [r4, #24]
 8000e06:	f8c8 3000 	str.w	r3, [r8]
 8000e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000e0e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8000e12:	4690      	mov	r8, r2
 8000e14:	4610      	mov	r0, r2
 8000e16:	ed84 7b12 	vstr	d7, [r4, #72]	; 0x48
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e20:	4baf      	ldr	r3, [pc, #700]	; (80010e0 <_printf_float+0x31c>)
 8000e22:	f005 ff21 	bl	8006c68 <__aeabi_dcmpun>
 8000e26:	b940      	cbnz	r0, 8000e3a <_printf_float+0x76>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e30:	4bab      	ldr	r3, [pc, #684]	; (80010e0 <_printf_float+0x31c>)
 8000e32:	f005 fefb 	bl	8006c2c <__aeabi_dcmple>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d07b      	beq.n	8000f32 <_printf_float+0x16e>
 8000e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	f005 ff11 	bl	8006c68 <__aeabi_dcmpun>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	f040 8235 	bne.w	80012b6 <_printf_float+0x4f2>
 8000e4c:	6861      	ldr	r1, [r4, #4]
 8000e4e:	1c48      	adds	r0, r1, #1
 8000e50:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8000e54:	d02c      	beq.n	8000eb0 <_printf_float+0xec>
 8000e56:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8000e5a:	d064      	beq.n	8000f26 <_printf_float+0x162>
 8000e5c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8000e60:	d061      	beq.n	8000f26 <_printf_float+0x162>
 8000e62:	2300      	movs	r3, #0
 8000e64:	6022      	str	r2, [r4, #0]
 8000e66:	a80a      	add	r0, sp, #40	; 0x28
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	ab09      	add	r3, sp, #36	; 0x24
 8000e6c:	9002      	str	r0, [sp, #8]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	f8cd a004 	str.w	sl, [sp, #4]
 8000e74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8000e78:	ed9d 0b04 	vldr	d0, [sp, #16]
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f7ff fedd 	bl	8000c3c <__cvt>
 8000e82:	4680      	mov	r8, r0
 8000e84:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8000e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e8a:	d833      	bhi.n	8000ef4 <_printf_float+0x130>
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4652      	mov	r2, sl
 8000e92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000e96:	9309      	str	r3, [sp, #36]	; 0x24
 8000e98:	f7ff ff4e 	bl	8000d38 <__exponent>
 8000e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e9e:	1813      	adds	r3, r2, r0
 8000ea0:	2a01      	cmp	r2, #1
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	6123      	str	r3, [r4, #16]
 8000ea6:	f340 817e 	ble.w	80011a6 <_printf_float+0x3e2>
 8000eaa:	3301      	adds	r3, #1
 8000eac:	6123      	str	r3, [r4, #16]
 8000eae:	e033      	b.n	8000f18 <_printf_float+0x154>
 8000eb0:	2106      	movs	r1, #6
 8000eb2:	6061      	str	r1, [r4, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	6022      	str	r2, [r4, #0]
 8000eb8:	a80a      	add	r0, sp, #40	; 0x28
 8000eba:	9303      	str	r3, [sp, #12]
 8000ebc:	ab09      	add	r3, sp, #36	; 0x24
 8000ebe:	9002      	str	r0, [sp, #8]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	f8cd a004 	str.w	sl, [sp, #4]
 8000ec6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8000eca:	ed9d 0b04 	vldr	d0, [sp, #16]
 8000ece:	4628      	mov	r0, r5
 8000ed0:	f7ff feb4 	bl	8000c3c <__cvt>
 8000ed4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8000ed8:	2b47      	cmp	r3, #71	; 0x47
 8000eda:	4680      	mov	r8, r0
 8000edc:	d1d2      	bne.n	8000e84 <_printf_float+0xc0>
 8000ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ee0:	1cd9      	adds	r1, r3, #3
 8000ee2:	f280 80e2 	bge.w	80010aa <_printf_float+0x2e6>
 8000ee6:	f1aa 0a02 	sub.w	sl, sl, #2
 8000eea:	fa5f fa8a 	uxtb.w	sl, sl
 8000eee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8000ef2:	d9cb      	bls.n	8000e8c <_printf_float+0xc8>
 8000ef4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8000ef8:	f000 80de 	beq.w	80010b8 <_printf_float+0x2f4>
 8000efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000efe:	429a      	cmp	r2, r3
 8000f00:	f340 80e5 	ble.w	80010ce <_printf_float+0x30a>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bfd4      	ite	le
 8000f08:	f1c3 0102 	rsble	r1, r3, #2
 8000f0c:	2101      	movgt	r1, #1
 8000f0e:	440a      	add	r2, r1
 8000f10:	6122      	str	r2, [r4, #16]
 8000f12:	65a3      	str	r3, [r4, #88]	; 0x58
 8000f14:	f04f 0900 	mov.w	r9, #0
 8000f18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8000f1c:	b30b      	cbz	r3, 8000f62 <_printf_float+0x19e>
 8000f1e:	232d      	movs	r3, #45	; 0x2d
 8000f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f24:	e01d      	b.n	8000f62 <_printf_float+0x19e>
 8000f26:	2900      	cmp	r1, #0
 8000f28:	f040 8113 	bne.w	8001152 <_printf_float+0x38e>
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	6061      	str	r1, [r4, #4]
 8000f30:	e7c0      	b.n	8000eb4 <_printf_float+0xf0>
 8000f32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000f36:	2200      	movs	r2, #0
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f005 fe6d 	bl	8006c18 <__aeabi_dcmplt>
 8000f3e:	b110      	cbz	r0, 8000f46 <_printf_float+0x182>
 8000f40:	232d      	movs	r3, #45	; 0x2d
 8000f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f46:	4867      	ldr	r0, [pc, #412]	; (80010e4 <_printf_float+0x320>)
 8000f48:	4967      	ldr	r1, [pc, #412]	; (80010e8 <_printf_float+0x324>)
 8000f4a:	f02b 0204 	bic.w	r2, fp, #4
 8000f4e:	2303      	movs	r3, #3
 8000f50:	6022      	str	r2, [r4, #0]
 8000f52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8000f56:	bf94      	ite	ls
 8000f58:	4680      	movls	r8, r0
 8000f5a:	4688      	movhi	r8, r1
 8000f5c:	6123      	str	r3, [r4, #16]
 8000f5e:	f04f 0900 	mov.w	r9, #0
 8000f62:	9700      	str	r7, [sp, #0]
 8000f64:	4633      	mov	r3, r6
 8000f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f000 f9c2 	bl	80012f4 <_printf_common>
 8000f70:	3001      	adds	r0, #1
 8000f72:	d024      	beq.n	8000fbe <_printf_float+0x1fa>
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	0558      	lsls	r0, r3, #21
 8000f78:	d42c      	bmi.n	8000fd4 <_printf_float+0x210>
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	4642      	mov	r2, r8
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4628      	mov	r0, r5
 8000f82:	47b8      	blx	r7
 8000f84:	3001      	adds	r0, #1
 8000f86:	d01a      	beq.n	8000fbe <_printf_float+0x1fa>
 8000f88:	6822      	ldr	r2, [r4, #0]
 8000f8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000f8c:	68e3      	ldr	r3, [r4, #12]
 8000f8e:	0792      	lsls	r2, r2, #30
 8000f90:	d51a      	bpl.n	8000fc8 <_printf_float+0x204>
 8000f92:	1a1a      	subs	r2, r3, r0
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	dd17      	ble.n	8000fc8 <_printf_float+0x204>
 8000f98:	f104 0919 	add.w	r9, r4, #25
 8000f9c:	f04f 0800 	mov.w	r8, #0
 8000fa0:	e004      	b.n	8000fac <_printf_float+0x1e8>
 8000fa2:	68e3      	ldr	r3, [r4, #12]
 8000fa4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000fa6:	1a1a      	subs	r2, r3, r0
 8000fa8:	4542      	cmp	r2, r8
 8000faa:	dd0d      	ble.n	8000fc8 <_printf_float+0x204>
 8000fac:	2301      	movs	r3, #1
 8000fae:	464a      	mov	r2, r9
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	47b8      	blx	r7
 8000fb6:	3001      	adds	r0, #1
 8000fb8:	f108 0801 	add.w	r8, r8, #1
 8000fbc:	d1f1      	bne.n	8000fa2 <_printf_float+0x1de>
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc2:	b00d      	add	sp, #52	; 0x34
 8000fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fc8:	4298      	cmp	r0, r3
 8000fca:	bfb8      	it	lt
 8000fcc:	4618      	movlt	r0, r3
 8000fce:	b00d      	add	sp, #52	; 0x34
 8000fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8000fd8:	d933      	bls.n	8001042 <_printf_float+0x27e>
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8000fe2:	f005 fe0f 	bl	8006c04 <__aeabi_dcmpeq>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	f000 8082 	beq.w	80010f0 <_printf_float+0x32c>
 8000fec:	2301      	movs	r3, #1
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <_printf_float+0x328>)
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	47b8      	blx	r7
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	d0e1      	beq.n	8000fbe <_printf_float+0x1fa>
 8000ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8000ffe:	429a      	cmp	r2, r3
 8001000:	db02      	blt.n	8001008 <_printf_float+0x244>
 8001002:	6822      	ldr	r2, [r4, #0]
 8001004:	07d1      	lsls	r1, r2, #31
 8001006:	d5c0      	bpl.n	8000f8a <_printf_float+0x1c6>
 8001008:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800100c:	4631      	mov	r1, r6
 800100e:	4628      	mov	r0, r5
 8001010:	47b8      	blx	r7
 8001012:	3001      	adds	r0, #1
 8001014:	d0d3      	beq.n	8000fbe <_printf_float+0x1fa>
 8001016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001018:	2b01      	cmp	r3, #1
 800101a:	ddb5      	ble.n	8000f88 <_printf_float+0x1c4>
 800101c:	f104 091a 	add.w	r9, r4, #26
 8001020:	f04f 0800 	mov.w	r8, #0
 8001024:	e003      	b.n	800102e <_printf_float+0x26a>
 8001026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001028:	3b01      	subs	r3, #1
 800102a:	4543      	cmp	r3, r8
 800102c:	ddac      	ble.n	8000f88 <_printf_float+0x1c4>
 800102e:	2301      	movs	r3, #1
 8001030:	464a      	mov	r2, r9
 8001032:	4631      	mov	r1, r6
 8001034:	4628      	mov	r0, r5
 8001036:	47b8      	blx	r7
 8001038:	3001      	adds	r0, #1
 800103a:	f108 0801 	add.w	r8, r8, #1
 800103e:	d1f2      	bne.n	8001026 <_printf_float+0x262>
 8001040:	e7bd      	b.n	8000fbe <_printf_float+0x1fa>
 8001042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001044:	2a01      	cmp	r2, #1
 8001046:	f340 809a 	ble.w	800117e <_printf_float+0x3ba>
 800104a:	2301      	movs	r3, #1
 800104c:	4642      	mov	r2, r8
 800104e:	4631      	mov	r1, r6
 8001050:	4628      	mov	r0, r5
 8001052:	47b8      	blx	r7
 8001054:	3001      	adds	r0, #1
 8001056:	d0b2      	beq.n	8000fbe <_printf_float+0x1fa>
 8001058:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800105c:	4631      	mov	r1, r6
 800105e:	4628      	mov	r0, r5
 8001060:	47b8      	blx	r7
 8001062:	3001      	adds	r0, #1
 8001064:	d0ab      	beq.n	8000fbe <_printf_float+0x1fa>
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800106e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001072:	f005 fdc7 	bl	8006c04 <__aeabi_dcmpeq>
 8001076:	2800      	cmp	r0, #0
 8001078:	f000 8090 	beq.w	800119c <_printf_float+0x3d8>
 800107c:	f1ba 0f01 	cmp.w	sl, #1
 8001080:	f340 8088 	ble.w	8001194 <_printf_float+0x3d0>
 8001084:	f104 0a1a 	add.w	sl, r4, #26
 8001088:	f04f 0800 	mov.w	r8, #0
 800108c:	e003      	b.n	8001096 <_printf_float+0x2d2>
 800108e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001090:	3b01      	subs	r3, #1
 8001092:	4543      	cmp	r3, r8
 8001094:	dd7e      	ble.n	8001194 <_printf_float+0x3d0>
 8001096:	2301      	movs	r3, #1
 8001098:	4652      	mov	r2, sl
 800109a:	4631      	mov	r1, r6
 800109c:	4628      	mov	r0, r5
 800109e:	47b8      	blx	r7
 80010a0:	3001      	adds	r0, #1
 80010a2:	f108 0801 	add.w	r8, r8, #1
 80010a6:	d1f2      	bne.n	800108e <_printf_float+0x2ca>
 80010a8:	e789      	b.n	8000fbe <_printf_float+0x1fa>
 80010aa:	6862      	ldr	r2, [r4, #4]
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f73f af1a 	bgt.w	8000ee6 <_printf_float+0x122>
 80010b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80010b6:	e721      	b.n	8000efc <_printf_float+0x138>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	6862      	ldr	r2, [r4, #4]
 80010bc:	dd78      	ble.n	80011b0 <_printf_float+0x3ec>
 80010be:	6123      	str	r3, [r4, #16]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	f000 80a6 	beq.w	8001212 <_printf_float+0x44e>
 80010c6:	3201      	adds	r2, #1
 80010c8:	441a      	add	r2, r3
 80010ca:	6122      	str	r2, [r4, #16]
 80010cc:	e721      	b.n	8000f12 <_printf_float+0x14e>
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	6123      	str	r3, [r4, #16]
 80010d2:	07d2      	lsls	r2, r2, #31
 80010d4:	f57f af1d 	bpl.w	8000f12 <_printf_float+0x14e>
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	6122      	str	r2, [r4, #16]
 80010dc:	e719      	b.n	8000f12 <_printf_float+0x14e>
 80010de:	bf00      	nop
 80010e0:	7fefffff 	.word	0x7fefffff
 80010e4:	080122a0 	.word	0x080122a0
 80010e8:	080122a4 	.word	0x080122a4
 80010ec:	080122b0 	.word	0x080122b0
 80010f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dd63      	ble.n	80011be <_printf_float+0x3fa>
 80010f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80010fc:	4553      	cmp	r3, sl
 80010fe:	bfa8      	it	ge
 8001100:	4653      	movge	r3, sl
 8001102:	2b00      	cmp	r3, #0
 8001104:	469b      	mov	fp, r3
 8001106:	dd08      	ble.n	800111a <_printf_float+0x356>
 8001108:	4642      	mov	r2, r8
 800110a:	4631      	mov	r1, r6
 800110c:	4628      	mov	r0, r5
 800110e:	47b8      	blx	r7
 8001110:	3001      	adds	r0, #1
 8001112:	f43f af54 	beq.w	8000fbe <_printf_float+0x1fa>
 8001116:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800111a:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
 800111e:	ebaa 030b 	sub.w	r3, sl, fp
 8001122:	2b00      	cmp	r3, #0
 8001124:	f340 8082 	ble.w	800122c <_printf_float+0x468>
 8001128:	f104 031a 	add.w	r3, r4, #26
 800112c:	f04f 0900 	mov.w	r9, #0
 8001130:	469a      	mov	sl, r3
 8001132:	e004      	b.n	800113e <_printf_float+0x37a>
 8001134:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001136:	eba3 020b 	sub.w	r2, r3, fp
 800113a:	454a      	cmp	r2, r9
 800113c:	dd75      	ble.n	800122a <_printf_float+0x466>
 800113e:	2301      	movs	r3, #1
 8001140:	4652      	mov	r2, sl
 8001142:	4631      	mov	r1, r6
 8001144:	4628      	mov	r0, r5
 8001146:	47b8      	blx	r7
 8001148:	3001      	adds	r0, #1
 800114a:	f109 0901 	add.w	r9, r9, #1
 800114e:	d1f1      	bne.n	8001134 <_printf_float+0x370>
 8001150:	e735      	b.n	8000fbe <_printf_float+0x1fa>
 8001152:	2300      	movs	r3, #0
 8001154:	6022      	str	r2, [r4, #0]
 8001156:	a80a      	add	r0, sp, #40	; 0x28
 8001158:	9303      	str	r3, [sp, #12]
 800115a:	ab09      	add	r3, sp, #36	; 0x24
 800115c:	9002      	str	r0, [sp, #8]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	f8cd a004 	str.w	sl, [sp, #4]
 8001164:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001168:	ed9d 0b04 	vldr	d0, [sp, #16]
 800116c:	4628      	mov	r0, r5
 800116e:	f7ff fd65 	bl	8000c3c <__cvt>
 8001172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001174:	1cd9      	adds	r1, r3, #3
 8001176:	4680      	mov	r8, r0
 8001178:	f6ff aeb5 	blt.w	8000ee6 <_printf_float+0x122>
 800117c:	e795      	b.n	80010aa <_printf_float+0x2e6>
 800117e:	07d9      	lsls	r1, r3, #31
 8001180:	f53f af63 	bmi.w	800104a <_printf_float+0x286>
 8001184:	4642      	mov	r2, r8
 8001186:	2301      	movs	r3, #1
 8001188:	4631      	mov	r1, r6
 800118a:	4628      	mov	r0, r5
 800118c:	47b8      	blx	r7
 800118e:	3001      	adds	r0, #1
 8001190:	f43f af15 	beq.w	8000fbe <_printf_float+0x1fa>
 8001194:	464b      	mov	r3, r9
 8001196:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800119a:	e6f0      	b.n	8000f7e <_printf_float+0x1ba>
 800119c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80011a0:	f108 0201 	add.w	r2, r8, #1
 80011a4:	e7f0      	b.n	8001188 <_printf_float+0x3c4>
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	07d2      	lsls	r2, r2, #31
 80011aa:	f57f aeb5 	bpl.w	8000f18 <_printf_float+0x154>
 80011ae:	e67c      	b.n	8000eaa <_printf_float+0xe6>
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	d133      	bne.n	800121c <_printf_float+0x458>
 80011b4:	6821      	ldr	r1, [r4, #0]
 80011b6:	07c9      	lsls	r1, r1, #31
 80011b8:	d430      	bmi.n	800121c <_printf_float+0x458>
 80011ba:	2201      	movs	r2, #1
 80011bc:	e6a8      	b.n	8000f10 <_printf_float+0x14c>
 80011be:	2301      	movs	r3, #1
 80011c0:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <_printf_float+0x524>)
 80011c2:	4631      	mov	r1, r6
 80011c4:	4628      	mov	r0, r5
 80011c6:	47b8      	blx	r7
 80011c8:	3001      	adds	r0, #1
 80011ca:	f43f aef8 	beq.w	8000fbe <_printf_float+0x1fa>
 80011ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80011d2:	4313      	orrs	r3, r2
 80011d4:	d024      	beq.n	8001220 <_printf_float+0x45c>
 80011d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80011da:	4631      	mov	r1, r6
 80011dc:	4628      	mov	r0, r5
 80011de:	47b8      	blx	r7
 80011e0:	3001      	adds	r0, #1
 80011e2:	f43f aeec 	beq.w	8000fbe <_printf_float+0x1fa>
 80011e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	da79      	bge.n	80012e0 <_printf_float+0x51c>
 80011ec:	f104 0a1a 	add.w	sl, r4, #26
 80011f0:	f04f 0900 	mov.w	r9, #0
 80011f4:	e003      	b.n	80011fe <_printf_float+0x43a>
 80011f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011f8:	425b      	negs	r3, r3
 80011fa:	454b      	cmp	r3, r9
 80011fc:	dd70      	ble.n	80012e0 <_printf_float+0x51c>
 80011fe:	2301      	movs	r3, #1
 8001200:	4652      	mov	r2, sl
 8001202:	4631      	mov	r1, r6
 8001204:	4628      	mov	r0, r5
 8001206:	47b8      	blx	r7
 8001208:	3001      	adds	r0, #1
 800120a:	f109 0901 	add.w	r9, r9, #1
 800120e:	d1f2      	bne.n	80011f6 <_printf_float+0x432>
 8001210:	e6d5      	b.n	8000fbe <_printf_float+0x1fa>
 8001212:	6821      	ldr	r1, [r4, #0]
 8001214:	07c8      	lsls	r0, r1, #31
 8001216:	f57f ae7c 	bpl.w	8000f12 <_printf_float+0x14e>
 800121a:	e754      	b.n	80010c6 <_printf_float+0x302>
 800121c:	3202      	adds	r2, #2
 800121e:	e677      	b.n	8000f10 <_printf_float+0x14c>
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	07d3      	lsls	r3, r2, #31
 8001224:	f57f aeb1 	bpl.w	8000f8a <_printf_float+0x1c6>
 8001228:	e7d5      	b.n	80011d6 <_printf_float+0x412>
 800122a:	469a      	mov	sl, r3
 800122c:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 8001230:	428a      	cmp	r2, r1
 8001232:	db02      	blt.n	800123a <_printf_float+0x476>
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	07d8      	lsls	r0, r3, #31
 8001238:	d509      	bpl.n	800124e <_printf_float+0x48a>
 800123a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800123e:	4631      	mov	r1, r6
 8001240:	4628      	mov	r0, r5
 8001242:	47b8      	blx	r7
 8001244:	3001      	adds	r0, #1
 8001246:	f43f aeba 	beq.w	8000fbe <_printf_float+0x1fa>
 800124a:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 800124e:	4552      	cmp	r2, sl
 8001250:	eba1 0302 	sub.w	r3, r1, r2
 8001254:	bfd4      	ite	le
 8001256:	eba1 090a 	suble.w	r9, r1, sl
 800125a:	4699      	movgt	r9, r3
 800125c:	f1b9 0f00 	cmp.w	r9, #0
 8001260:	dd0b      	ble.n	800127a <_printf_float+0x4b6>
 8001262:	eb08 020a 	add.w	r2, r8, sl
 8001266:	464b      	mov	r3, r9
 8001268:	4631      	mov	r1, r6
 800126a:	4628      	mov	r0, r5
 800126c:	47b8      	blx	r7
 800126e:	3001      	adds	r0, #1
 8001270:	f43f aea5 	beq.w	8000fbe <_printf_float+0x1fa>
 8001274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800127e:	eba3 0309 	sub.w	r3, r3, r9
 8001282:	2b00      	cmp	r3, #0
 8001284:	f77f ae80 	ble.w	8000f88 <_printf_float+0x1c4>
 8001288:	f104 0a1a 	add.w	sl, r4, #26
 800128c:	f04f 0800 	mov.w	r8, #0
 8001290:	e007      	b.n	80012a2 <_printf_float+0x4de>
 8001292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	eba3 0309 	sub.w	r3, r3, r9
 800129c:	4543      	cmp	r3, r8
 800129e:	f77f ae73 	ble.w	8000f88 <_printf_float+0x1c4>
 80012a2:	2301      	movs	r3, #1
 80012a4:	4652      	mov	r2, sl
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	47b8      	blx	r7
 80012ac:	3001      	adds	r0, #1
 80012ae:	f108 0801 	add.w	r8, r8, #1
 80012b2:	d1ee      	bne.n	8001292 <_printf_float+0x4ce>
 80012b4:	e683      	b.n	8000fbe <_printf_float+0x1fa>
 80012b6:	9b05      	ldr	r3, [sp, #20]
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <_printf_float+0x528>)
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <_printf_float+0x52c>)
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bfbc      	itt	lt
 80012c0:	232d      	movlt	r3, #45	; 0x2d
 80012c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80012c6:	f02b 0304 	bic.w	r3, fp, #4
 80012ca:	6023      	str	r3, [r4, #0]
 80012cc:	2303      	movs	r3, #3
 80012ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80012d2:	bf94      	ite	ls
 80012d4:	4688      	movls	r8, r1
 80012d6:	4690      	movhi	r8, r2
 80012d8:	6123      	str	r3, [r4, #16]
 80012da:	f04f 0900 	mov.w	r9, #0
 80012de:	e640      	b.n	8000f62 <_printf_float+0x19e>
 80012e0:	4642      	mov	r2, r8
 80012e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012e4:	e64b      	b.n	8000f7e <_printf_float+0x1ba>
 80012e6:	bf00      	nop
 80012e8:	080122b0 	.word	0x080122b0
 80012ec:	080122a8 	.word	0x080122a8
 80012f0:	080122ac 	.word	0x080122ac

080012f4 <_printf_common>:
 80012f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f8:	460c      	mov	r4, r1
 80012fa:	4691      	mov	r9, r2
 80012fc:	690a      	ldr	r2, [r1, #16]
 80012fe:	6889      	ldr	r1, [r1, #8]
 8001300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001304:	428a      	cmp	r2, r1
 8001306:	bfb8      	it	lt
 8001308:	460a      	movlt	r2, r1
 800130a:	f8c9 2000 	str.w	r2, [r9]
 800130e:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8001312:	4606      	mov	r6, r0
 8001314:	461f      	mov	r7, r3
 8001316:	b111      	cbz	r1, 800131e <_printf_common+0x2a>
 8001318:	3201      	adds	r2, #1
 800131a:	f8c9 2000 	str.w	r2, [r9]
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	0699      	lsls	r1, r3, #26
 8001322:	d55c      	bpl.n	80013de <_printf_common+0xea>
 8001324:	f8d9 2000 	ldr.w	r2, [r9]
 8001328:	3202      	adds	r2, #2
 800132a:	f8c9 2000 	str.w	r2, [r9]
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	f013 0f06 	tst.w	r3, #6
 8001334:	4619      	mov	r1, r3
 8001336:	d11d      	bne.n	8001374 <_printf_common+0x80>
 8001338:	68e1      	ldr	r1, [r4, #12]
 800133a:	1a8a      	subs	r2, r1, r2
 800133c:	2a00      	cmp	r2, #0
 800133e:	bfd8      	it	le
 8001340:	4619      	movle	r1, r3
 8001342:	dd17      	ble.n	8001374 <_printf_common+0x80>
 8001344:	f104 0a19 	add.w	sl, r4, #25
 8001348:	2500      	movs	r5, #0
 800134a:	e005      	b.n	8001358 <_printf_common+0x64>
 800134c:	68e3      	ldr	r3, [r4, #12]
 800134e:	f8d9 2000 	ldr.w	r2, [r9]
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	42ab      	cmp	r3, r5
 8001356:	dd0c      	ble.n	8001372 <_printf_common+0x7e>
 8001358:	2301      	movs	r3, #1
 800135a:	4652      	mov	r2, sl
 800135c:	4639      	mov	r1, r7
 800135e:	4630      	mov	r0, r6
 8001360:	47c0      	blx	r8
 8001362:	3001      	adds	r0, #1
 8001364:	f105 0501 	add.w	r5, r5, #1
 8001368:	d1f0      	bne.n	800134c <_printf_common+0x58>
 800136a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001372:	6821      	ldr	r1, [r4, #0]
 8001374:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001378:	3300      	adds	r3, #0
 800137a:	bf18      	it	ne
 800137c:	2301      	movne	r3, #1
 800137e:	068a      	lsls	r2, r1, #26
 8001380:	d50a      	bpl.n	8001398 <_printf_common+0xa4>
 8001382:	18e1      	adds	r1, r4, r3
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	2030      	movs	r0, #48	; 0x30
 8001388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800138c:	4422      	add	r2, r4
 800138e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001396:	3302      	adds	r3, #2
 8001398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800139c:	4639      	mov	r1, r7
 800139e:	4630      	mov	r0, r6
 80013a0:	47c0      	blx	r8
 80013a2:	3001      	adds	r0, #1
 80013a4:	d0e1      	beq.n	800136a <_printf_common+0x76>
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	68a2      	ldr	r2, [r4, #8]
 80013aa:	6921      	ldr	r1, [r4, #16]
 80013ac:	f003 0306 	and.w	r3, r3, #6
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d01d      	beq.n	80013f0 <_printf_common+0xfc>
 80013b4:	428a      	cmp	r2, r1
 80013b6:	dd26      	ble.n	8001406 <_printf_common+0x112>
 80013b8:	f04f 0900 	mov.w	r9, #0
 80013bc:	1a52      	subs	r2, r2, r1
 80013be:	4491      	add	r9, r2
 80013c0:	341a      	adds	r4, #26
 80013c2:	2500      	movs	r5, #0
 80013c4:	e001      	b.n	80013ca <_printf_common+0xd6>
 80013c6:	454d      	cmp	r5, r9
 80013c8:	da1d      	bge.n	8001406 <_printf_common+0x112>
 80013ca:	2301      	movs	r3, #1
 80013cc:	4622      	mov	r2, r4
 80013ce:	4639      	mov	r1, r7
 80013d0:	4630      	mov	r0, r6
 80013d2:	47c0      	blx	r8
 80013d4:	3001      	adds	r0, #1
 80013d6:	f105 0501 	add.w	r5, r5, #1
 80013da:	d1f4      	bne.n	80013c6 <_printf_common+0xd2>
 80013dc:	e7c5      	b.n	800136a <_printf_common+0x76>
 80013de:	f013 0f06 	tst.w	r3, #6
 80013e2:	d013      	beq.n	800140c <_printf_common+0x118>
 80013e4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80013e8:	3300      	adds	r3, #0
 80013ea:	bf18      	it	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	e7d3      	b.n	8001398 <_printf_common+0xa4>
 80013f0:	f8d9 0000 	ldr.w	r0, [r9]
 80013f4:	68e3      	ldr	r3, [r4, #12]
 80013f6:	428a      	cmp	r2, r1
 80013f8:	eba3 0300 	sub.w	r3, r3, r0
 80013fc:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
 8001400:	dcdc      	bgt.n	80013bc <_printf_common+0xc8>
 8001402:	2b00      	cmp	r3, #0
 8001404:	dcdc      	bgt.n	80013c0 <_printf_common+0xcc>
 8001406:	2000      	movs	r0, #0
 8001408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800140c:	68e1      	ldr	r1, [r4, #12]
 800140e:	f8d9 2000 	ldr.w	r2, [r9]
 8001412:	1a8a      	subs	r2, r1, r2
 8001414:	2a00      	cmp	r2, #0
 8001416:	bfd8      	it	le
 8001418:	4619      	movle	r1, r3
 800141a:	dc93      	bgt.n	8001344 <_printf_common+0x50>
 800141c:	e7aa      	b.n	8001374 <_printf_common+0x80>
 800141e:	bf00      	nop

08001420 <_printf_i>:
 8001420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001424:	460c      	mov	r4, r1
 8001426:	7e09      	ldrb	r1, [r1, #24]
 8001428:	b085      	sub	sp, #20
 800142a:	296e      	cmp	r1, #110	; 0x6e
 800142c:	4606      	mov	r6, r0
 800142e:	4617      	mov	r7, r2
 8001430:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001432:	4698      	mov	r8, r3
 8001434:	f104 0e43 	add.w	lr, r4, #67	; 0x43
 8001438:	d06d      	beq.n	8001516 <_printf_i+0xf6>
 800143a:	d939      	bls.n	80014b0 <_printf_i+0x90>
 800143c:	2973      	cmp	r1, #115	; 0x73
 800143e:	f000 80f6 	beq.w	800162e <_printf_i+0x20e>
 8001442:	d944      	bls.n	80014ce <_printf_i+0xae>
 8001444:	2975      	cmp	r1, #117	; 0x75
 8001446:	f000 8104 	beq.w	8001652 <_printf_i+0x232>
 800144a:	2978      	cmp	r1, #120	; 0x78
 800144c:	f040 8111 	bne.w	8001672 <_printf_i+0x252>
 8001450:	2378      	movs	r3, #120	; 0x78
 8001452:	6822      	ldr	r2, [r4, #0]
 8001454:	f8df c258 	ldr.w	ip, [pc, #600]	; 80016b0 <_printf_i+0x290>
 8001458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800145c:	6801      	ldr	r1, [r0, #0]
 800145e:	0615      	lsls	r5, r2, #24
 8001460:	f851 3b04 	ldr.w	r3, [r1], #4
 8001464:	6001      	str	r1, [r0, #0]
 8001466:	f140 80a1 	bpl.w	80015ac <_printf_i+0x18c>
 800146a:	07d1      	lsls	r1, r2, #31
 800146c:	bf44      	itt	mi
 800146e:	f042 0220 	orrmi.w	r2, r2, #32
 8001472:	6022      	strmi	r2, [r4, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8093 	beq.w	80015a0 <_printf_i+0x180>
 800147a:	2210      	movs	r2, #16
 800147c:	2100      	movs	r1, #0
 800147e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001482:	6860      	ldr	r0, [r4, #4]
 8001484:	60a0      	str	r0, [r4, #8]
 8001486:	2800      	cmp	r0, #0
 8001488:	f2c0 80c8 	blt.w	800161c <_printf_i+0x1fc>
 800148c:	6821      	ldr	r1, [r4, #0]
 800148e:	f021 0104 	bic.w	r1, r1, #4
 8001492:	6021      	str	r1, [r4, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f040 80a3 	bne.w	80015e0 <_printf_i+0x1c0>
 800149a:	2800      	cmp	r0, #0
 800149c:	f040 80c0 	bne.w	8001620 <_printf_i+0x200>
 80014a0:	4675      	mov	r5, lr
 80014a2:	2a08      	cmp	r2, #8
 80014a4:	f000 80ac 	beq.w	8001600 <_printf_i+0x1e0>
 80014a8:	ebae 0305 	sub.w	r3, lr, r5
 80014ac:	6123      	str	r3, [r4, #16]
 80014ae:	e041      	b.n	8001534 <_printf_i+0x114>
 80014b0:	2963      	cmp	r1, #99	; 0x63
 80014b2:	f000 80e5 	beq.w	8001680 <_printf_i+0x260>
 80014b6:	d81a      	bhi.n	80014ee <_printf_i+0xce>
 80014b8:	2900      	cmp	r1, #0
 80014ba:	d038      	beq.n	800152e <_printf_i+0x10e>
 80014bc:	2958      	cmp	r1, #88	; 0x58
 80014be:	f040 80d8 	bne.w	8001672 <_printf_i+0x252>
 80014c2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80016b4 <_printf_i+0x294>
 80014cc:	e7c6      	b.n	800145c <_printf_i+0x3c>
 80014ce:	296f      	cmp	r1, #111	; 0x6f
 80014d0:	f000 80bf 	beq.w	8001652 <_printf_i+0x232>
 80014d4:	2970      	cmp	r1, #112	; 0x70
 80014d6:	f040 80cc 	bne.w	8001672 <_printf_i+0x252>
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80016b0 <_printf_i+0x290>
 80014e0:	f042 0220 	orr.w	r2, r2, #32
 80014e4:	2378      	movs	r3, #120	; 0x78
 80014e6:	6022      	str	r2, [r4, #0]
 80014e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014ec:	e7b6      	b.n	800145c <_printf_i+0x3c>
 80014ee:	2964      	cmp	r1, #100	; 0x64
 80014f0:	d002      	beq.n	80014f8 <_printf_i+0xd8>
 80014f2:	2969      	cmp	r1, #105	; 0x69
 80014f4:	f040 80bd 	bne.w	8001672 <_printf_i+0x252>
 80014f8:	6822      	ldr	r2, [r4, #0]
 80014fa:	6803      	ldr	r3, [r0, #0]
 80014fc:	0611      	lsls	r1, r2, #24
 80014fe:	f103 0504 	add.w	r5, r3, #4
 8001502:	d557      	bpl.n	80015b4 <_printf_i+0x194>
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	6005      	str	r5, [r0, #0]
 8001508:	460b      	mov	r3, r1
 800150a:	2900      	cmp	r1, #0
 800150c:	db59      	blt.n	80015c2 <_printf_i+0x1a2>
 800150e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80016b4 <_printf_i+0x294>
 8001512:	220a      	movs	r2, #10
 8001514:	e7b5      	b.n	8001482 <_printf_i+0x62>
 8001516:	6803      	ldr	r3, [r0, #0]
 8001518:	6822      	ldr	r2, [r4, #0]
 800151a:	6961      	ldr	r1, [r4, #20]
 800151c:	1d1d      	adds	r5, r3, #4
 800151e:	6005      	str	r5, [r0, #0]
 8001520:	0615      	lsls	r5, r2, #24
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	d402      	bmi.n	800152c <_printf_i+0x10c>
 8001526:	0650      	lsls	r0, r2, #25
 8001528:	f100 80bd 	bmi.w	80016a6 <_printf_i+0x286>
 800152c:	6019      	str	r1, [r3, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	4675      	mov	r5, lr
 8001532:	6123      	str	r3, [r4, #16]
 8001534:	f8cd 8000 	str.w	r8, [sp]
 8001538:	463b      	mov	r3, r7
 800153a:	aa03      	add	r2, sp, #12
 800153c:	4621      	mov	r1, r4
 800153e:	4630      	mov	r0, r6
 8001540:	f7ff fed8 	bl	80012f4 <_printf_common>
 8001544:	3001      	adds	r0, #1
 8001546:	d020      	beq.n	800158a <_printf_i+0x16a>
 8001548:	462a      	mov	r2, r5
 800154a:	6923      	ldr	r3, [r4, #16]
 800154c:	4639      	mov	r1, r7
 800154e:	4630      	mov	r0, r6
 8001550:	47c0      	blx	r8
 8001552:	3001      	adds	r0, #1
 8001554:	d019      	beq.n	800158a <_printf_i+0x16a>
 8001556:	6822      	ldr	r2, [r4, #0]
 8001558:	9803      	ldr	r0, [sp, #12]
 800155a:	68e3      	ldr	r3, [r4, #12]
 800155c:	0792      	lsls	r2, r2, #30
 800155e:	d519      	bpl.n	8001594 <_printf_i+0x174>
 8001560:	1a1a      	subs	r2, r3, r0
 8001562:	2a00      	cmp	r2, #0
 8001564:	dd16      	ble.n	8001594 <_printf_i+0x174>
 8001566:	f104 0919 	add.w	r9, r4, #25
 800156a:	2500      	movs	r5, #0
 800156c:	e004      	b.n	8001578 <_printf_i+0x158>
 800156e:	68e3      	ldr	r3, [r4, #12]
 8001570:	9803      	ldr	r0, [sp, #12]
 8001572:	1a1a      	subs	r2, r3, r0
 8001574:	42aa      	cmp	r2, r5
 8001576:	dd0d      	ble.n	8001594 <_printf_i+0x174>
 8001578:	2301      	movs	r3, #1
 800157a:	464a      	mov	r2, r9
 800157c:	4639      	mov	r1, r7
 800157e:	4630      	mov	r0, r6
 8001580:	47c0      	blx	r8
 8001582:	3001      	adds	r0, #1
 8001584:	f105 0501 	add.w	r5, r5, #1
 8001588:	d1f1      	bne.n	800156e <_printf_i+0x14e>
 800158a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800158e:	b005      	add	sp, #20
 8001590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001594:	4298      	cmp	r0, r3
 8001596:	bfb8      	it	lt
 8001598:	4618      	movlt	r0, r3
 800159a:	b005      	add	sp, #20
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	6822      	ldr	r2, [r4, #0]
 80015a2:	f022 0220 	bic.w	r2, r2, #32
 80015a6:	6022      	str	r2, [r4, #0]
 80015a8:	2210      	movs	r2, #16
 80015aa:	e767      	b.n	800147c <_printf_i+0x5c>
 80015ac:	0650      	lsls	r0, r2, #25
 80015ae:	bf48      	it	mi
 80015b0:	b29b      	uxthmi	r3, r3
 80015b2:	e75a      	b.n	800146a <_printf_i+0x4a>
 80015b4:	0651      	lsls	r1, r2, #25
 80015b6:	d5a5      	bpl.n	8001504 <_printf_i+0xe4>
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	6005      	str	r5, [r0, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	e7a3      	b.n	800150a <_printf_i+0xea>
 80015c2:	6861      	ldr	r1, [r4, #4]
 80015c4:	60a1      	str	r1, [r4, #8]
 80015c6:	202d      	movs	r0, #45	; 0x2d
 80015c8:	2900      	cmp	r1, #0
 80015ca:	f1c3 0300 	rsb	r3, r3, #0
 80015ce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80015d2:	db02      	blt.n	80015da <_printf_i+0x1ba>
 80015d4:	f022 0204 	bic.w	r2, r2, #4
 80015d8:	6022      	str	r2, [r4, #0]
 80015da:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80016b4 <_printf_i+0x294>
 80015de:	220a      	movs	r2, #10
 80015e0:	4675      	mov	r5, lr
 80015e2:	e000      	b.n	80015e6 <_printf_i+0x1c6>
 80015e4:	460b      	mov	r3, r1
 80015e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80015ea:	fb02 3011 	mls	r0, r2, r1, r3
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f81c 0000 	ldrb.w	r0, [ip, r0]
 80015f4:	f805 0d01 	strb.w	r0, [r5, #-1]!
 80015f8:	d2f4      	bcs.n	80015e4 <_printf_i+0x1c4>
 80015fa:	2a08      	cmp	r2, #8
 80015fc:	f47f af54 	bne.w	80014a8 <_printf_i+0x88>
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	07db      	lsls	r3, r3, #31
 8001604:	f57f af50 	bpl.w	80014a8 <_printf_i+0x88>
 8001608:	6862      	ldr	r2, [r4, #4]
 800160a:	6923      	ldr	r3, [r4, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	f73f af4b 	bgt.w	80014a8 <_printf_i+0x88>
 8001612:	2330      	movs	r3, #48	; 0x30
 8001614:	f805 3c01 	strb.w	r3, [r5, #-1]
 8001618:	3d01      	subs	r5, #1
 800161a:	e745      	b.n	80014a8 <_printf_i+0x88>
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1df      	bne.n	80015e0 <_printf_i+0x1c0>
 8001620:	f89c 3000 	ldrb.w	r3, [ip]
 8001624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800162c:	e739      	b.n	80014a2 <_printf_i+0x82>
 800162e:	6803      	ldr	r3, [r0, #0]
 8001630:	6862      	ldr	r2, [r4, #4]
 8001632:	1d19      	adds	r1, r3, #4
 8001634:	6001      	str	r1, [r0, #0]
 8001636:	681d      	ldr	r5, [r3, #0]
 8001638:	2100      	movs	r1, #0
 800163a:	4628      	mov	r0, r5
 800163c:	f003 fa60 	bl	8004b00 <memchr>
 8001640:	2800      	cmp	r0, #0
 8001642:	d032      	beq.n	80016aa <_printf_i+0x28a>
 8001644:	1b40      	subs	r0, r0, r5
 8001646:	6060      	str	r0, [r4, #4]
 8001648:	6120      	str	r0, [r4, #16]
 800164a:	2300      	movs	r3, #0
 800164c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001650:	e770      	b.n	8001534 <_printf_i+0x114>
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	6803      	ldr	r3, [r0, #0]
 8001656:	f012 0f80 	tst.w	r2, #128	; 0x80
 800165a:	f103 0504 	add.w	r5, r3, #4
 800165e:	d01a      	beq.n	8001696 <_printf_i+0x276>
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6005      	str	r5, [r0, #0]
 8001664:	296f      	cmp	r1, #111	; 0x6f
 8001666:	bf0c      	ite	eq
 8001668:	2208      	moveq	r2, #8
 800166a:	220a      	movne	r2, #10
 800166c:	f8df c044 	ldr.w	ip, [pc, #68]	; 80016b4 <_printf_i+0x294>
 8001670:	e704      	b.n	800147c <_printf_i+0x5c>
 8001672:	2301      	movs	r3, #1
 8001674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001678:	6123      	str	r3, [r4, #16]
 800167a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800167e:	e7e4      	b.n	800164a <_printf_i+0x22a>
 8001680:	6803      	ldr	r3, [r0, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	1d19      	adds	r1, r3, #4
 8001686:	2301      	movs	r3, #1
 8001688:	6001      	str	r1, [r0, #0]
 800168a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800168e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001692:	6123      	str	r3, [r4, #16]
 8001694:	e7d9      	b.n	800164a <_printf_i+0x22a>
 8001696:	f012 0f40 	tst.w	r2, #64	; 0x40
 800169a:	bf0d      	iteet	eq
 800169c:	681b      	ldreq	r3, [r3, #0]
 800169e:	6005      	strne	r5, [r0, #0]
 80016a0:	881b      	ldrhne	r3, [r3, #0]
 80016a2:	6005      	streq	r5, [r0, #0]
 80016a4:	e7de      	b.n	8001664 <_printf_i+0x244>
 80016a6:	8019      	strh	r1, [r3, #0]
 80016a8:	e741      	b.n	800152e <_printf_i+0x10e>
 80016aa:	6860      	ldr	r0, [r4, #4]
 80016ac:	e7cc      	b.n	8001648 <_printf_i+0x228>
 80016ae:	bf00      	nop
 80016b0:	080122c8 	.word	0x080122c8
 80016b4:	080122b4 	.word	0x080122b4

080016b8 <_iprintf_r>:
 80016b8:	b40e      	push	{r1, r2, r3}
 80016ba:	b510      	push	{r4, lr}
 80016bc:	4604      	mov	r4, r0
 80016be:	b083      	sub	sp, #12
 80016c0:	b108      	cbz	r0, 80016c6 <_iprintf_r+0xe>
 80016c2:	6983      	ldr	r3, [r0, #24]
 80016c4:	b163      	cbz	r3, 80016e0 <_iprintf_r+0x28>
 80016c6:	a806      	add	r0, sp, #24
 80016c8:	4603      	mov	r3, r0
 80016ca:	9001      	str	r0, [sp, #4]
 80016cc:	9a05      	ldr	r2, [sp, #20]
 80016ce:	68a1      	ldr	r1, [r4, #8]
 80016d0:	4620      	mov	r0, r4
 80016d2:	f004 f88d 	bl	80057f0 <_vfiprintf_r>
 80016d6:	b003      	add	sp, #12
 80016d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016dc:	b003      	add	sp, #12
 80016de:	4770      	bx	lr
 80016e0:	f002 fd00 	bl	80040e4 <__sinit>
 80016e4:	e7ef      	b.n	80016c6 <_iprintf_r+0xe>
 80016e6:	bf00      	nop

080016e8 <iprintf>:
 80016e8:	b40f      	push	{r0, r1, r2, r3}
 80016ea:	b510      	push	{r4, lr}
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <iprintf+0x34>)
 80016ee:	681c      	ldr	r4, [r3, #0]
 80016f0:	b082      	sub	sp, #8
 80016f2:	b10c      	cbz	r4, 80016f8 <iprintf+0x10>
 80016f4:	69a3      	ldr	r3, [r4, #24]
 80016f6:	b163      	cbz	r3, 8001712 <iprintf+0x2a>
 80016f8:	a805      	add	r0, sp, #20
 80016fa:	4603      	mov	r3, r0
 80016fc:	9001      	str	r0, [sp, #4]
 80016fe:	9a04      	ldr	r2, [sp, #16]
 8001700:	68a1      	ldr	r1, [r4, #8]
 8001702:	4620      	mov	r0, r4
 8001704:	f004 f874 	bl	80057f0 <_vfiprintf_r>
 8001708:	b002      	add	sp, #8
 800170a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800170e:	b004      	add	sp, #16
 8001710:	4770      	bx	lr
 8001712:	4620      	mov	r0, r4
 8001714:	f002 fce6 	bl	80040e4 <__sinit>
 8001718:	e7ee      	b.n	80016f8 <iprintf+0x10>
 800171a:	bf00      	nop
 800171c:	20000004 	.word	0x20000004

08001720 <_puts_r>:
 8001720:	6983      	ldr	r3, [r0, #24]
 8001722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001726:	4680      	mov	r8, r0
 8001728:	460e      	mov	r6, r1
 800172a:	b333      	cbz	r3, 800177a <_puts_r+0x5a>
 800172c:	6884      	ldr	r4, [r0, #8]
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <_puts_r+0xcc>)
 8001730:	429c      	cmp	r4, r3
 8001732:	d030      	beq.n	8001796 <_puts_r+0x76>
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <_puts_r+0xd0>)
 8001736:	429c      	cmp	r4, r3
 8001738:	d039      	beq.n	80017ae <_puts_r+0x8e>
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <_puts_r+0xd4>)
 800173c:	429c      	cmp	r4, r3
 800173e:	bf08      	it	eq
 8001740:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 8001744:	89a3      	ldrh	r3, [r4, #12]
 8001746:	071b      	lsls	r3, r3, #28
 8001748:	d52a      	bpl.n	80017a0 <_puts_r+0x80>
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	b343      	cbz	r3, 80017a0 <_puts_r+0x80>
 800174e:	3e01      	subs	r6, #1
 8001750:	68a3      	ldr	r3, [r4, #8]
 8001752:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8001756:	3b01      	subs	r3, #1
 8001758:	60a3      	str	r3, [r4, #8]
 800175a:	b39d      	cbz	r5, 80017c4 <_puts_r+0xa4>
 800175c:	2b00      	cmp	r3, #0
 800175e:	da07      	bge.n	8001770 <_puts_r+0x50>
 8001760:	69a7      	ldr	r7, [r4, #24]
 8001762:	429f      	cmp	r7, r3
 8001764:	4622      	mov	r2, r4
 8001766:	4629      	mov	r1, r5
 8001768:	4640      	mov	r0, r8
 800176a:	dc23      	bgt.n	80017b4 <_puts_r+0x94>
 800176c:	2d0a      	cmp	r5, #10
 800176e:	d021      	beq.n	80017b4 <_puts_r+0x94>
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	6022      	str	r2, [r4, #0]
 8001776:	701d      	strb	r5, [r3, #0]
 8001778:	e7ea      	b.n	8001750 <_puts_r+0x30>
 800177a:	f002 fcb3 	bl	80040e4 <__sinit>
 800177e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001782:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1d1      	bne.n	800172e <_puts_r+0xe>
 800178a:	4640      	mov	r0, r8
 800178c:	f002 fcaa 	bl	80040e4 <__sinit>
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <_puts_r+0xcc>)
 8001792:	429c      	cmp	r4, r3
 8001794:	d1ce      	bne.n	8001734 <_puts_r+0x14>
 8001796:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800179a:	89a3      	ldrh	r3, [r4, #12]
 800179c:	071b      	lsls	r3, r3, #28
 800179e:	d4d4      	bmi.n	800174a <_puts_r+0x2a>
 80017a0:	4621      	mov	r1, r4
 80017a2:	4640      	mov	r0, r8
 80017a4:	f001 fa5e 	bl	8002c64 <__swsetup_r>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d0d0      	beq.n	800174e <_puts_r+0x2e>
 80017ac:	e006      	b.n	80017bc <_puts_r+0x9c>
 80017ae:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80017b2:	e7c7      	b.n	8001744 <_puts_r+0x24>
 80017b4:	f001 f9f6 	bl	8002ba4 <__swbuf_r>
 80017b8:	3001      	adds	r0, #1
 80017ba:	d1c9      	bne.n	8001750 <_puts_r+0x30>
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da09      	bge.n	80017dc <_puts_r+0xbc>
 80017c8:	4622      	mov	r2, r4
 80017ca:	4640      	mov	r0, r8
 80017cc:	210a      	movs	r1, #10
 80017ce:	f001 f9e9 	bl	8002ba4 <__swbuf_r>
 80017d2:	3001      	adds	r0, #1
 80017d4:	d0f2      	beq.n	80017bc <_puts_r+0x9c>
 80017d6:	200a      	movs	r0, #10
 80017d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	220a      	movs	r2, #10
 80017e0:	1c59      	adds	r1, r3, #1
 80017e2:	6021      	str	r1, [r4, #0]
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	4610      	mov	r0, r2
 80017e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017ec:	08011834 	.word	0x08011834
 80017f0:	08011814 	.word	0x08011814
 80017f4:	080117f4 	.word	0x080117f4

080017f8 <puts>:
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <puts+0xc>)
 80017fa:	4601      	mov	r1, r0
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	f7ff bf8f 	b.w	8001720 <_puts_r>
 8001802:	bf00      	nop
 8001804:	20000004 	.word	0x20000004
	...

08001840 <strlen>:
 8001840:	f890 f000 	pld	[r0]
 8001844:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001848:	f020 0107 	bic.w	r1, r0, #7
 800184c:	f06f 0c00 	mvn.w	ip, #0
 8001850:	f010 0407 	ands.w	r4, r0, #7
 8001854:	f891 f020 	pld	[r1, #32]
 8001858:	f040 8049 	bne.w	80018ee <strlen+0xae>
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	f06f 0007 	mvn.w	r0, #7
 8001864:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001868:	f891 f040 	pld	[r1, #64]	; 0x40
 800186c:	f100 0008 	add.w	r0, r0, #8
 8001870:	fa82 f24c 	uadd8	r2, r2, ip
 8001874:	faa4 f28c 	sel	r2, r4, ip
 8001878:	fa83 f34c 	uadd8	r3, r3, ip
 800187c:	faa2 f38c 	sel	r3, r2, ip
 8001880:	bb4b      	cbnz	r3, 80018d6 <strlen+0x96>
 8001882:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001886:	fa82 f24c 	uadd8	r2, r2, ip
 800188a:	f100 0008 	add.w	r0, r0, #8
 800188e:	faa4 f28c 	sel	r2, r4, ip
 8001892:	fa83 f34c 	uadd8	r3, r3, ip
 8001896:	faa2 f38c 	sel	r3, r2, ip
 800189a:	b9e3      	cbnz	r3, 80018d6 <strlen+0x96>
 800189c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80018a0:	fa82 f24c 	uadd8	r2, r2, ip
 80018a4:	f100 0008 	add.w	r0, r0, #8
 80018a8:	faa4 f28c 	sel	r2, r4, ip
 80018ac:	fa83 f34c 	uadd8	r3, r3, ip
 80018b0:	faa2 f38c 	sel	r3, r2, ip
 80018b4:	b97b      	cbnz	r3, 80018d6 <strlen+0x96>
 80018b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80018ba:	f101 0120 	add.w	r1, r1, #32
 80018be:	fa82 f24c 	uadd8	r2, r2, ip
 80018c2:	f100 0008 	add.w	r0, r0, #8
 80018c6:	faa4 f28c 	sel	r2, r4, ip
 80018ca:	fa83 f34c 	uadd8	r3, r3, ip
 80018ce:	faa2 f38c 	sel	r3, r2, ip
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0c6      	beq.n	8001864 <strlen+0x24>
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	bf04      	itt	eq
 80018da:	3004      	addeq	r0, #4
 80018dc:	461a      	moveq	r2, r3
 80018de:	ba12      	rev	r2, r2
 80018e0:	fab2 f282 	clz	r2, r2
 80018e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80018e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80018ec:	4770      	bx	lr
 80018ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80018f2:	f004 0503 	and.w	r5, r4, #3
 80018f6:	f1c4 0000 	rsb	r0, r4, #0
 80018fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80018fe:	f014 0f04 	tst.w	r4, #4
 8001902:	f891 f040 	pld	[r1, #64]	; 0x40
 8001906:	fa0c f505 	lsl.w	r5, ip, r5
 800190a:	ea62 0205 	orn	r2, r2, r5
 800190e:	bf1c      	itt	ne
 8001910:	ea63 0305 	ornne	r3, r3, r5
 8001914:	4662      	movne	r2, ip
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	e7a9      	b.n	8001870 <strlen+0x30>
 800191c:	0000      	movs	r0, r0
	...

08001920 <sulp>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	ec45 4b10 	vmov	d0, r4, r5
 800192a:	4616      	mov	r6, r2
 800192c:	f003 fcc6 	bl	80052bc <__ulp>
 8001930:	ec51 0b10 	vmov	r0, r1, d0
 8001934:	b17e      	cbz	r6, 8001956 <sulp+0x36>
 8001936:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800193a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800193e:	2b00      	cmp	r3, #0
 8001940:	dd09      	ble.n	8001956 <sulp+0x36>
 8001942:	051b      	lsls	r3, r3, #20
 8001944:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8001948:	2400      	movs	r4, #0
 800194a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800194e:	4622      	mov	r2, r4
 8001950:	462b      	mov	r3, r5
 8001952:	f004 feef 	bl	8006734 <__aeabi_dmul>
 8001956:	bd70      	pop	{r4, r5, r6, pc}

08001958 <_strtod_l>:
 8001958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800195c:	4c73      	ldr	r4, [pc, #460]	; (8001b2c <_strtod_l+0x1d4>)
 800195e:	b0a3      	sub	sp, #140	; 0x8c
 8001960:	6824      	ldr	r4, [r4, #0]
 8001962:	9407      	str	r4, [sp, #28]
 8001964:	4688      	mov	r8, r1
 8001966:	4681      	mov	r9, r0
 8001968:	2100      	movs	r1, #0
 800196a:	4620      	mov	r0, r4
 800196c:	461d      	mov	r5, r3
 800196e:	2400      	movs	r4, #0
 8001970:	2300      	movs	r3, #0
 8001972:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001976:	9206      	str	r2, [sp, #24]
 8001978:	911e      	str	r1, [sp, #120]	; 0x78
 800197a:	f7ff ff61 	bl	8001840 <strlen>
 800197e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8001982:	4683      	mov	fp, r0
 8001984:	4643      	mov	r3, r8
 8001986:	469a      	mov	sl, r3
 8001988:	f813 4b01 	ldrb.w	r4, [r3], #1
 800198c:	2c2d      	cmp	r4, #45	; 0x2d
 800198e:	f200 80b3 	bhi.w	8001af8 <_strtod_l+0x1a0>
 8001992:	e8df f004 	tbb	[pc, r4]
 8001996:	b11e      	.short	0xb11e
 8001998:	b1b1b1b1 	.word	0xb1b1b1b1
 800199c:	afb1b1b1 	.word	0xafb1b1b1
 80019a0:	afafafaf 	.word	0xafafafaf
 80019a4:	b1b1b1b1 	.word	0xb1b1b1b1
 80019a8:	b1b1b1b1 	.word	0xb1b1b1b1
 80019ac:	b1b1b1b1 	.word	0xb1b1b1b1
 80019b0:	b1b1b1b1 	.word	0xb1b1b1b1
 80019b4:	b1afb1b1 	.word	0xb1afb1b1
 80019b8:	b1b1b1b1 	.word	0xb1b1b1b1
 80019bc:	b1b1b1b1 	.word	0xb1b1b1b1
 80019c0:	2cb1acb1 	.word	0x2cb1acb1
 80019c4:	2d00      	cmp	r5, #0
 80019c6:	f040 80b6 	bne.w	8001b36 <_strtod_l+0x1de>
 80019ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019cc:	4303      	orrs	r3, r0
 80019ce:	f040 80b1 	bne.w	8001b34 <_strtod_l+0x1dc>
 80019d2:	9b06      	ldr	r3, [sp, #24]
 80019d4:	b113      	cbz	r3, 80019dc <_strtod_l+0x84>
 80019d6:	9b06      	ldr	r3, [sp, #24]
 80019d8:	f8c3 8000 	str.w	r8, [r3]
 80019dc:	f04f 0a00 	mov.w	sl, #0
 80019e0:	f04f 0b00 	mov.w	fp, #0
 80019e4:	ec4b ab10 	vmov	d0, sl, fp
 80019e8:	b023      	add	sp, #140	; 0x8c
 80019ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ee:	2301      	movs	r3, #1
 80019f0:	930a      	str	r3, [sp, #40]	; 0x28
 80019f2:	f10a 0301 	add.w	r3, sl, #1
 80019f6:	931d      	str	r3, [sp, #116]	; 0x74
 80019f8:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80019fc:	2c00      	cmp	r4, #0
 80019fe:	d0e8      	beq.n	80019d2 <_strtod_l+0x7a>
 8001a00:	2c30      	cmp	r4, #48	; 0x30
 8001a02:	469a      	mov	sl, r3
 8001a04:	d07c      	beq.n	8001b00 <_strtod_l+0x1a8>
 8001a06:	2300      	movs	r3, #0
 8001a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	2a09      	cmp	r2, #9
 8001a12:	f200 849d 	bhi.w	8002350 <_strtod_l+0x9f8>
 8001a16:	2600      	movs	r6, #0
 8001a18:	4637      	mov	r7, r6
 8001a1a:	4635      	mov	r5, r6
 8001a1c:	4650      	mov	r0, sl
 8001a1e:	3001      	adds	r0, #1
 8001a20:	901d      	str	r0, [sp, #116]	; 0x74
 8001a22:	2d08      	cmp	r5, #8
 8001a24:	7804      	ldrb	r4, [r0, #0]
 8001a26:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8001a2a:	bfca      	itet	gt
 8001a2c:	eb06 0686 	addgt.w	r6, r6, r6, lsl #2
 8001a30:	eb03 0742 	addle.w	r7, r3, r2, lsl #1
 8001a34:	eb03 0646 	addgt.w	r6, r3, r6, lsl #1
 8001a38:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	2a09      	cmp	r2, #9
 8001a40:	f105 0501 	add.w	r5, r5, #1
 8001a44:	d9eb      	bls.n	8001a1e <_strtod_l+0xc6>
 8001a46:	9907      	ldr	r1, [sp, #28]
 8001a48:	465a      	mov	r2, fp
 8001a4a:	f004 f8a9 	bl	8005ba0 <strncmp>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	f000 812c 	beq.w	8001cac <_strtod_l+0x354>
 8001a54:	2000      	movs	r0, #0
 8001a56:	2c65      	cmp	r4, #101	; 0x65
 8001a58:	4683      	mov	fp, r0
 8001a5a:	4684      	mov	ip, r0
 8001a5c:	9508      	str	r5, [sp, #32]
 8001a5e:	d06a      	beq.n	8001b36 <_strtod_l+0x1de>
 8001a60:	2c45      	cmp	r4, #69	; 0x45
 8001a62:	d0af      	beq.n	80019c4 <_strtod_l+0x6c>
 8001a64:	2300      	movs	r3, #0
 8001a66:	930c      	str	r3, [sp, #48]	; 0x30
 8001a68:	2d00      	cmp	r5, #0
 8001a6a:	f000 80b0 	beq.w	8001bce <_strtod_l+0x276>
 8001a6e:	9b08      	ldr	r3, [sp, #32]
 8001a70:	461a      	mov	r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf08      	it	eq
 8001a76:	462a      	moveq	r2, r5
 8001a78:	4638      	mov	r0, r7
 8001a7a:	9208      	str	r2, [sp, #32]
 8001a7c:	f004 fde0 	bl	8006640 <__aeabi_ui2d>
 8001a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a82:	2d10      	cmp	r5, #16
 8001a84:	eba3 030b 	sub.w	r3, r3, fp
 8001a88:	462c      	mov	r4, r5
 8001a8a:	bfa8      	it	ge
 8001a8c:	2410      	movge	r4, #16
 8001a8e:	2d09      	cmp	r5, #9
 8001a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a96:	dd13      	ble.n	8001ac0 <_strtod_l+0x168>
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <_strtod_l+0x1d8>)
 8001a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001a9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8001aa2:	f004 fe47 	bl	8006734 <__aeabi_dmul>
 8001aa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f004 fdc8 	bl	8006640 <__aeabi_ui2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001ab8:	f004 fc86 	bl	80063c8 <__adddf3>
 8001abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001ac0:	2d0f      	cmp	r5, #15
 8001ac2:	f300 8106 	bgt.w	8001cd2 <_strtod_l+0x37a>
 8001ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8482 	beq.w	80023d2 <_strtod_l+0xa7a>
 8001ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ad0:	f340 8387 	ble.w	80021e2 <_strtod_l+0x88a>
 8001ad4:	2b16      	cmp	r3, #22
 8001ad6:	f340 857a 	ble.w	80025ce <_strtod_l+0xc76>
 8001ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001adc:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	f280 858a 	bge.w	80025fa <_strtod_l+0xca2>
 8001ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ae8:	1b2c      	subs	r4, r5, r4
 8001aea:	441c      	add	r4, r3
 8001aec:	e0f7      	b.n	8001cde <_strtod_l+0x386>
 8001aee:	2300      	movs	r3, #0
 8001af0:	930a      	str	r3, [sp, #40]	; 0x28
 8001af2:	e77e      	b.n	80019f2 <_strtod_l+0x9a>
 8001af4:	931d      	str	r3, [sp, #116]	; 0x74
 8001af6:	e746      	b.n	8001986 <_strtod_l+0x2e>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2c30      	cmp	r4, #48	; 0x30
 8001afc:	930a      	str	r3, [sp, #40]	; 0x28
 8001afe:	d182      	bne.n	8001a06 <_strtod_l+0xae>
 8001b00:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001b04:	2b58      	cmp	r3, #88	; 0x58
 8001b06:	f000 8467 	beq.w	80023d8 <_strtod_l+0xa80>
 8001b0a:	2b78      	cmp	r3, #120	; 0x78
 8001b0c:	bf18      	it	ne
 8001b0e:	4653      	movne	r3, sl
 8001b10:	f000 8462 	beq.w	80023d8 <_strtod_l+0xa80>
 8001b14:	3301      	adds	r3, #1
 8001b16:	931d      	str	r3, [sp, #116]	; 0x74
 8001b18:	781c      	ldrb	r4, [r3, #0]
 8001b1a:	2c30      	cmp	r4, #48	; 0x30
 8001b1c:	d0fa      	beq.n	8001b14 <_strtod_l+0x1bc>
 8001b1e:	469a      	mov	sl, r3
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	f000 80af 	beq.w	8001c84 <_strtod_l+0x32c>
 8001b26:	2301      	movs	r3, #1
 8001b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b2a:	e76e      	b.n	8001a0a <_strtod_l+0xb2>
 8001b2c:	08011954 	.word	0x08011954
 8001b30:	08011970 	.word	0x08011970
 8001b34:	2500      	movs	r5, #0
 8001b36:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8001b3a:	f108 0301 	add.w	r3, r8, #1
 8001b3e:	931d      	str	r3, [sp, #116]	; 0x74
 8001b40:	f898 4001 	ldrb.w	r4, [r8, #1]
 8001b44:	2c2b      	cmp	r4, #43	; 0x2b
 8001b46:	f000 82e1 	beq.w	800210c <_strtod_l+0x7b4>
 8001b4a:	2c2d      	cmp	r4, #45	; 0x2d
 8001b4c:	f000 8273 	beq.w	8002036 <_strtod_l+0x6de>
 8001b50:	f04f 0e00 	mov.w	lr, #0
 8001b54:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	f200 8274 	bhi.w	8002046 <_strtod_l+0x6ee>
 8001b5e:	2c30      	cmp	r4, #48	; 0x30
 8001b60:	d105      	bne.n	8001b6e <_strtod_l+0x216>
 8001b62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001b64:	3301      	adds	r3, #1
 8001b66:	931d      	str	r3, [sp, #116]	; 0x74
 8001b68:	781c      	ldrb	r4, [r3, #0]
 8001b6a:	2c30      	cmp	r4, #48	; 0x30
 8001b6c:	d0fa      	beq.n	8001b64 <_strtod_l+0x20c>
 8001b6e:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	f63f af76 	bhi.w	8001a64 <_strtod_l+0x10c>
 8001b78:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001b7a:	9107      	str	r1, [sp, #28]
 8001b7c:	1c4a      	adds	r2, r1, #1
 8001b7e:	921d      	str	r2, [sp, #116]	; 0x74
 8001b80:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001b84:	784c      	ldrb	r4, [r1, #1]
 8001b86:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
 8001b8a:	2909      	cmp	r1, #9
 8001b8c:	f200 8476 	bhi.w	800247c <_strtod_l+0xb24>
 8001b90:	3201      	adds	r2, #1
 8001b92:	921d      	str	r2, [sp, #116]	; 0x74
 8001b94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b98:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001b9c:	7814      	ldrb	r4, [r2, #0]
 8001b9e:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
 8001ba2:	2909      	cmp	r1, #9
 8001ba4:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8001ba8:	d9f2      	bls.n	8001b90 <_strtod_l+0x238>
 8001baa:	9907      	ldr	r1, [sp, #28]
 8001bac:	1a52      	subs	r2, r2, r1
 8001bae:	2a08      	cmp	r2, #8
 8001bb0:	f340 8464 	ble.w	800247c <_strtod_l+0xb24>
 8001bb4:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001bb8:	930c      	str	r3, [sp, #48]	; 0x30
 8001bba:	f1be 0f00 	cmp.w	lr, #0
 8001bbe:	f43f af53 	beq.w	8001a68 <_strtod_l+0x110>
 8001bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8001bc8:	2d00      	cmp	r5, #0
 8001bca:	f47f af50 	bne.w	8001a6e <_strtod_l+0x116>
 8001bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001bd0:	4303      	orrs	r3, r0
 8001bd2:	d157      	bne.n	8001c84 <_strtod_l+0x32c>
 8001bd4:	f1bc 0f00 	cmp.w	ip, #0
 8001bd8:	f47f aefb 	bne.w	80019d2 <_strtod_l+0x7a>
 8001bdc:	3c49      	subs	r4, #73	; 0x49
 8001bde:	2c25      	cmp	r4, #37	; 0x25
 8001be0:	f63f aef7 	bhi.w	80019d2 <_strtod_l+0x7a>
 8001be4:	a301      	add	r3, pc, #4	; (adr r3, 8001bec <_strtod_l+0x294>)
 8001be6:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	0800222b 	.word	0x0800222b
 8001bf0:	080019d3 	.word	0x080019d3
 8001bf4:	080019d3 	.word	0x080019d3
 8001bf8:	080019d3 	.word	0x080019d3
 8001bfc:	080019d3 	.word	0x080019d3
 8001c00:	08002207 	.word	0x08002207
 8001c04:	080019d3 	.word	0x080019d3
 8001c08:	080019d3 	.word	0x080019d3
 8001c0c:	080019d3 	.word	0x080019d3
 8001c10:	080019d3 	.word	0x080019d3
 8001c14:	080019d3 	.word	0x080019d3
 8001c18:	080019d3 	.word	0x080019d3
 8001c1c:	080019d3 	.word	0x080019d3
 8001c20:	080019d3 	.word	0x080019d3
 8001c24:	080019d3 	.word	0x080019d3
 8001c28:	080019d3 	.word	0x080019d3
 8001c2c:	080019d3 	.word	0x080019d3
 8001c30:	080019d3 	.word	0x080019d3
 8001c34:	080019d3 	.word	0x080019d3
 8001c38:	080019d3 	.word	0x080019d3
 8001c3c:	080019d3 	.word	0x080019d3
 8001c40:	080019d3 	.word	0x080019d3
 8001c44:	080019d3 	.word	0x080019d3
 8001c48:	080019d3 	.word	0x080019d3
 8001c4c:	080019d3 	.word	0x080019d3
 8001c50:	080019d3 	.word	0x080019d3
 8001c54:	080019d3 	.word	0x080019d3
 8001c58:	080019d3 	.word	0x080019d3
 8001c5c:	080019d3 	.word	0x080019d3
 8001c60:	080019d3 	.word	0x080019d3
 8001c64:	080019d3 	.word	0x080019d3
 8001c68:	080019d3 	.word	0x080019d3
 8001c6c:	0800222b 	.word	0x0800222b
 8001c70:	080019d3 	.word	0x080019d3
 8001c74:	080019d3 	.word	0x080019d3
 8001c78:	080019d3 	.word	0x080019d3
 8001c7c:	080019d3 	.word	0x080019d3
 8001c80:	08002207 	.word	0x08002207
 8001c84:	f04f 0a00 	mov.w	sl, #0
 8001c88:	f04f 0b00 	mov.w	fp, #0
 8001c8c:	9a06      	ldr	r2, [sp, #24]
 8001c8e:	b10a      	cbz	r2, 8001c94 <_strtod_l+0x33c>
 8001c90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f43f aea4 	beq.w	80019e4 <_strtod_l+0x8c>
 8001c9c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8001ca0:	469b      	mov	fp, r3
 8001ca2:	ec4b ab10 	vmov	d0, sl, fp
 8001ca6:	b023      	add	sp, #140	; 0x8c
 8001ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001cae:	9508      	str	r5, [sp, #32]
 8001cb0:	eb03 020b 	add.w	r2, r3, fp
 8001cb4:	921d      	str	r2, [sp, #116]	; 0x74
 8001cb6:	f813 400b 	ldrb.w	r4, [r3, fp]
 8001cba:	4683      	mov	fp, r0
 8001cbc:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8001cc0:	2a09      	cmp	r2, #9
 8001cc2:	f240 83b1 	bls.w	8002428 <_strtod_l+0xad0>
 8001cc6:	2c65      	cmp	r4, #101	; 0x65
 8001cc8:	f04f 0c01 	mov.w	ip, #1
 8001ccc:	f47f aec8 	bne.w	8001a60 <_strtod_l+0x108>
 8001cd0:	e731      	b.n	8001b36 <_strtod_l+0x1de>
 8001cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cd4:	1b2c      	subs	r4, r5, r4
 8001cd6:	441c      	add	r4, r3
 8001cd8:	2c00      	cmp	r4, #0
 8001cda:	f340 82e5 	ble.w	80022a8 <_strtod_l+0x950>
 8001cde:	f014 030f 	ands.w	r3, r4, #15
 8001ce2:	d00a      	beq.n	8001cfa <_strtod_l+0x3a2>
 8001ce4:	49ba      	ldr	r1, [pc, #744]	; (8001fd0 <_strtod_l+0x678>)
 8001ce6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001cf2:	f004 fd1f 	bl	8006734 <__aeabi_dmul>
 8001cf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001cfa:	f034 040f 	bics.w	r4, r4, #15
 8001cfe:	f040 8259 	bne.w	80021b4 <_strtod_l+0x85c>
 8001d02:	2300      	movs	r3, #0
 8001d04:	9307      	str	r3, [sp, #28]
 8001d06:	9700      	str	r7, [sp, #0]
 8001d08:	462b      	mov	r3, r5
 8001d0a:	9a08      	ldr	r2, [sp, #32]
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	4648      	mov	r0, r9
 8001d10:	f002 fffc 	bl	8004d0c <__s2b>
 8001d14:	9013      	str	r0, [sp, #76]	; 0x4c
 8001d16:	2800      	cmp	r0, #0
 8001d18:	f000 8404 	beq.w	8002524 <_strtod_l+0xbcc>
 8001d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d20:	2100      	movs	r1, #0
 8001d22:	2a00      	cmp	r2, #0
 8001d24:	ebab 0303 	sub.w	r3, fp, r3
 8001d28:	bfa8      	it	ge
 8001d2a:	460b      	movge	r3, r1
 8001d2c:	930e      	str	r3, [sp, #56]	; 0x38
 8001d2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001d32:	460f      	mov	r7, r1
 8001d34:	9312      	str	r3, [sp, #72]	; 0x48
 8001d36:	468b      	mov	fp, r1
 8001d38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8001d3a:	4648      	mov	r0, r9
 8001d3c:	6861      	ldr	r1, [r4, #4]
 8001d3e:	f002 ff2f 	bl	8004ba0 <_Balloc>
 8001d42:	4680      	mov	r8, r0
 8001d44:	2800      	cmp	r0, #0
 8001d46:	f000 8158 	beq.w	8001ffa <_strtod_l+0x6a2>
 8001d4a:	6922      	ldr	r2, [r4, #16]
 8001d4c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8001d50:	3202      	adds	r2, #2
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	f104 010c 	add.w	r1, r4, #12
 8001d58:	300c      	adds	r0, #12
 8001d5a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001d5e:	f7fe fe83 	bl	8000a68 <memcpy>
 8001d62:	ed9d 0b08 	vldr	d0, [sp, #32]
 8001d66:	aa20      	add	r2, sp, #128	; 0x80
 8001d68:	a91f      	add	r1, sp, #124	; 0x7c
 8001d6a:	4648      	mov	r0, r9
 8001d6c:	f003 fb2a 	bl	80053c4 <__d2b>
 8001d70:	901e      	str	r0, [sp, #120]	; 0x78
 8001d72:	2800      	cmp	r0, #0
 8001d74:	f000 811a 	beq.w	8001fac <_strtod_l+0x654>
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4648      	mov	r0, r9
 8001d7c:	f003 f86c 	bl	8004e58 <__i2b>
 8001d80:	4607      	mov	r7, r0
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f000 8139 	beq.w	8001ffa <_strtod_l+0x6a2>
 8001d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f2c0 8111 	blt.w	8001fb2 <_strtod_l+0x65a>
 8001d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001d92:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001d94:	189e      	adds	r6, r3, r2
 8001d96:	9907      	ldr	r1, [sp, #28]
 8001d98:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8001d9a:	4a8e      	ldr	r2, [pc, #568]	; (8001fd4 <_strtod_l+0x67c>)
 8001d9c:	1a5b      	subs	r3, r3, r1
 8001d9e:	4423      	add	r3, r4
 8001da0:	3b01      	subs	r3, #1
 8001da2:	4293      	cmp	r3, r2
 8001da4:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 8001da8:	f280 80c5 	bge.w	8001f36 <_strtod_l+0x5de>
 8001dac:	1ad2      	subs	r2, r2, r3
 8001dae:	2a1f      	cmp	r2, #31
 8001db0:	eba4 0402 	sub.w	r4, r4, r2
 8001db4:	f300 8137 	bgt.w	8002026 <_strtod_l+0x6ce>
 8001db8:	2301      	movs	r3, #1
 8001dba:	4093      	lsls	r3, r2
 8001dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9310      	str	r3, [sp, #64]	; 0x40
 8001dc2:	4425      	add	r5, r4
 8001dc4:	9b07      	ldr	r3, [sp, #28]
 8001dc6:	4434      	add	r4, r6
 8001dc8:	42a6      	cmp	r6, r4
 8001dca:	441d      	add	r5, r3
 8001dcc:	4633      	mov	r3, r6
 8001dce:	bfa8      	it	ge
 8001dd0:	4623      	movge	r3, r4
 8001dd2:	42ab      	cmp	r3, r5
 8001dd4:	bfa8      	it	ge
 8001dd6:	462b      	movge	r3, r5
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dd02      	ble.n	8001de2 <_strtod_l+0x48a>
 8001ddc:	1ae4      	subs	r4, r4, r3
 8001dde:	1aed      	subs	r5, r5, r3
 8001de0:	1af6      	subs	r6, r6, r3
 8001de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f300 80bf 	bgt.w	8001f68 <_strtod_l+0x610>
 8001dea:	2c00      	cmp	r4, #0
 8001dec:	f300 80d5 	bgt.w	8001f9a <_strtod_l+0x642>
 8001df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f300 80f8 	bgt.w	8001fe8 <_strtod_l+0x690>
 8001df8:	2d00      	cmp	r5, #0
 8001dfa:	f300 810a 	bgt.w	8002012 <_strtod_l+0x6ba>
 8001dfe:	2e00      	cmp	r6, #0
 8001e00:	dd08      	ble.n	8001e14 <_strtod_l+0x4bc>
 8001e02:	4639      	mov	r1, r7
 8001e04:	4632      	mov	r2, r6
 8001e06:	4648      	mov	r0, r9
 8001e08:	f003 f944 	bl	8005094 <__lshift>
 8001e0c:	4607      	mov	r7, r0
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	f000 80f3 	beq.w	8001ffa <_strtod_l+0x6a2>
 8001e14:	4642      	mov	r2, r8
 8001e16:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001e18:	4648      	mov	r0, r9
 8001e1a:	f003 f9bb 	bl	8005194 <__mdiff>
 8001e1e:	4683      	mov	fp, r0
 8001e20:	2800      	cmp	r0, #0
 8001e22:	f000 80ea 	beq.w	8001ffa <_strtod_l+0x6a2>
 8001e26:	2300      	movs	r3, #0
 8001e28:	68c2      	ldr	r2, [r0, #12]
 8001e2a:	60c3      	str	r3, [r0, #12]
 8001e2c:	4639      	mov	r1, r7
 8001e2e:	920f      	str	r2, [sp, #60]	; 0x3c
 8001e30:	f003 f994 	bl	800515c <__mcmp>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	f2c0 845e 	blt.w	80026f6 <_strtod_l+0xd9e>
 8001e3a:	9e05      	ldr	r6, [sp, #20]
 8001e3c:	f000 83f4 	beq.w	8002628 <_strtod_l+0xcd0>
 8001e40:	4639      	mov	r1, r7
 8001e42:	4658      	mov	r0, fp
 8001e44:	f003 fb28 	bl	8005498 <__ratio>
 8001e48:	ec55 4b10 	vmov	r4, r5, d0
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e52:	ee10 0a10 	vmov	r0, s0
 8001e56:	4629      	mov	r1, r5
 8001e58:	f004 fee8 	bl	8006c2c <__aeabi_dcmple>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d06f      	beq.n	8001f40 <_strtod_l+0x5e8>
 8001e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80f9 	beq.w	800205a <_strtod_l+0x702>
 8001e68:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8001fc0 <_strtod_l+0x668>
 8001e6c:	4c5a      	ldr	r4, [pc, #360]	; (8001fd8 <_strtod_l+0x680>)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8001e74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001e78:	4d58      	ldr	r5, [pc, #352]	; (8001fdc <_strtod_l+0x684>)
 8001e7a:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <_strtod_l+0x688>)
 8001e7c:	ea06 0405 	and.w	r4, r6, r5
 8001e80:	429c      	cmp	r4, r3
 8001e82:	f000 810f 	beq.w	80020a4 <_strtod_l+0x74c>
 8001e86:	9b07      	ldr	r3, [sp, #28]
 8001e88:	b353      	cbz	r3, 8001ee0 <_strtod_l+0x588>
 8001e8a:	f1b4 6fd4 	cmp.w	r4, #111149056	; 0x6a00000
 8001e8e:	d827      	bhi.n	8001ee0 <_strtod_l+0x588>
 8001e90:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
 8001e94:	a34c      	add	r3, pc, #304	; (adr r3, 8001fc8 <_strtod_l+0x670>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	4631      	mov	r1, r6
 8001e9e:	f004 fec5 	bl	8006c2c <__aeabi_dcmple>
 8001ea2:	b1c0      	cbz	r0, 8001ed6 <_strtod_l+0x57e>
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	4631      	mov	r1, r6
 8001ea8:	f004 ff1c 	bl	8006ce4 <__aeabi_d2uiz>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	f000 82f2 	beq.w	8002496 <_strtod_l+0xb3e>
 8001eb2:	f004 fbc5 	bl	8006640 <__aeabi_ui2d>
 8001eb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 82e5 	bne.w	800248c <_strtod_l+0xb34>
 8001ec2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8001ec6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8001eca:	9116      	str	r1, [sp, #88]	; 0x58
 8001ecc:	9317      	str	r3, [sp, #92]	; 0x5c
 8001ece:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8001ed2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ed8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8001edc:	1b1b      	subs	r3, r3, r4
 8001ede:	930d      	str	r3, [sp, #52]	; 0x34
 8001ee0:	ed9d 0b08 	vldr	d0, [sp, #32]
 8001ee4:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8001ee8:	f003 f9e8 	bl	80052bc <__ulp>
 8001eec:	4628      	mov	r0, r5
 8001eee:	ec53 2b10 	vmov	r2, r3, d0
 8001ef2:	4631      	mov	r1, r6
 8001ef4:	f004 fc1e 	bl	8006734 <__aeabi_dmul>
 8001ef8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001efc:	f004 fa64 	bl	80063c8 <__adddf3>
 8001f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f04:	460d      	mov	r5, r1
 8001f06:	9b07      	ldr	r3, [sp, #28]
 8001f08:	b923      	cbnz	r3, 8001f14 <_strtod_l+0x5bc>
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <_strtod_l+0x684>)
 8001f0c:	402b      	ands	r3, r5
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	f000 80ff 	beq.w	8002112 <_strtod_l+0x7ba>
 8001f14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001f16:	4648      	mov	r0, r9
 8001f18:	f002 fe82 	bl	8004c20 <_Bfree>
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	4648      	mov	r0, r9
 8001f20:	f002 fe7e 	bl	8004c20 <_Bfree>
 8001f24:	4639      	mov	r1, r7
 8001f26:	4648      	mov	r0, r9
 8001f28:	f002 fe7a 	bl	8004c20 <_Bfree>
 8001f2c:	4659      	mov	r1, fp
 8001f2e:	4648      	mov	r0, r9
 8001f30:	f002 fe76 	bl	8004c20 <_Bfree>
 8001f34:	e700      	b.n	8001d38 <_strtod_l+0x3e0>
 8001f36:	2300      	movs	r3, #0
 8001f38:	9310      	str	r3, [sp, #64]	; 0x40
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	930c      	str	r3, [sp, #48]	; 0x30
 8001f3e:	e740      	b.n	8001dc2 <_strtod_l+0x46a>
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <_strtod_l+0x68c>)
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	2200      	movs	r2, #0
 8001f48:	f004 fbf4 	bl	8006734 <__aeabi_dmul>
 8001f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d17c      	bne.n	8002050 <_strtod_l+0x6f8>
 8001f56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001f5a:	9014      	str	r0, [sp, #80]	; 0x50
 8001f5c:	9315      	str	r3, [sp, #84]	; 0x54
 8001f5e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8001f62:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8001f66:	e787      	b.n	8001e78 <_strtod_l+0x520>
 8001f68:	4639      	mov	r1, r7
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4648      	mov	r0, r9
 8001f6e:	f003 f82f 	bl	8004fd0 <__pow5mult>
 8001f72:	4607      	mov	r7, r0
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d040      	beq.n	8001ffa <_strtod_l+0x6a2>
 8001f78:	4601      	mov	r1, r0
 8001f7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001f7c:	4648      	mov	r0, r9
 8001f7e:	f002 ff81 	bl	8004e84 <__multiply>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d039      	beq.n	8001ffa <_strtod_l+0x6a2>
 8001f86:	900f      	str	r0, [sp, #60]	; 0x3c
 8001f88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001f8a:	4648      	mov	r0, r9
 8001f8c:	f002 fe48 	bl	8004c20 <_Bfree>
 8001f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f92:	931e      	str	r3, [sp, #120]	; 0x78
 8001f94:	2c00      	cmp	r4, #0
 8001f96:	f77f af2b 	ble.w	8001df0 <_strtod_l+0x498>
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001f9e:	4648      	mov	r0, r9
 8001fa0:	f003 f878 	bl	8005094 <__lshift>
 8001fa4:	901e      	str	r0, [sp, #120]	; 0x78
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	f47f af22 	bne.w	8001df0 <_strtod_l+0x498>
 8001fac:	465e      	mov	r6, fp
 8001fae:	4604      	mov	r4, r0
 8001fb0:	e025      	b.n	8001ffe <_strtod_l+0x6a6>
 8001fb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001fb4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001fb6:	1ad5      	subs	r5, r2, r3
 8001fb8:	e6ed      	b.n	8001d96 <_strtod_l+0x43e>
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	3ff00000 	.word	0x3ff00000
 8001fc8:	ffc00000 	.word	0xffc00000
 8001fcc:	41dfffff 	.word	0x41dfffff
 8001fd0:	08011970 	.word	0x08011970
 8001fd4:	fffffc02 	.word	0xfffffc02
 8001fd8:	3ff00000 	.word	0x3ff00000
 8001fdc:	7ff00000 	.word	0x7ff00000
 8001fe0:	7fe00000 	.word	0x7fe00000
 8001fe4:	3fe00000 	.word	0x3fe00000
 8001fe8:	4641      	mov	r1, r8
 8001fea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001fec:	4648      	mov	r0, r9
 8001fee:	f002 ffef 	bl	8004fd0 <__pow5mult>
 8001ff2:	4680      	mov	r8, r0
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	f47f aeff 	bne.w	8001df8 <_strtod_l+0x4a0>
 8001ffa:	465e      	mov	r6, fp
 8001ffc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8001ffe:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <_strtod_l+0x920>)
 8002000:	9305      	str	r3, [sp, #20]
 8002002:	2200      	movs	r2, #0
 8002004:	2322      	movs	r3, #34	; 0x22
 8002006:	9204      	str	r2, [sp, #16]
 8002008:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800200c:	f8c9 3000 	str.w	r3, [r9]
 8002010:	e0a8      	b.n	8002164 <_strtod_l+0x80c>
 8002012:	4641      	mov	r1, r8
 8002014:	462a      	mov	r2, r5
 8002016:	4648      	mov	r0, r9
 8002018:	f003 f83c 	bl	8005094 <__lshift>
 800201c:	4680      	mov	r8, r0
 800201e:	2800      	cmp	r0, #0
 8002020:	f47f aeed 	bne.w	8001dfe <_strtod_l+0x4a6>
 8002024:	e7e9      	b.n	8001ffa <_strtod_l+0x6a2>
 8002026:	4a95      	ldr	r2, [pc, #596]	; (800227c <_strtod_l+0x924>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2201      	movs	r2, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	9310      	str	r3, [sp, #64]	; 0x40
 8002032:	920c      	str	r2, [sp, #48]	; 0x30
 8002034:	e6c5      	b.n	8001dc2 <_strtod_l+0x46a>
 8002036:	f04f 0e01 	mov.w	lr, #1
 800203a:	f108 0302 	add.w	r3, r8, #2
 800203e:	931d      	str	r3, [sp, #116]	; 0x74
 8002040:	f898 4002 	ldrb.w	r4, [r8, #2]
 8002044:	e586      	b.n	8001b54 <_strtod_l+0x1fc>
 8002046:	2300      	movs	r3, #0
 8002048:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800204c:	930c      	str	r3, [sp, #48]	; 0x30
 800204e:	e50b      	b.n	8001a68 <_strtod_l+0x110>
 8002050:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8002054:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002058:	e781      	b.n	8001f5e <_strtod_l+0x606>
 800205a:	9b04      	ldr	r3, [sp, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 8096 	bne.w	800218e <_strtod_l+0x836>
 8002062:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8097 	bne.w	800219a <_strtod_l+0x842>
 800206c:	2200      	movs	r2, #0
 800206e:	4b84      	ldr	r3, [pc, #528]	; (8002280 <_strtod_l+0x928>)
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f004 fdd0 	bl	8006c18 <__aeabi_dcmplt>
 8002078:	2800      	cmp	r0, #0
 800207a:	f040 82b5 	bne.w	80025e8 <_strtod_l+0xc90>
 800207e:	2200      	movs	r2, #0
 8002080:	4b80      	ldr	r3, [pc, #512]	; (8002284 <_strtod_l+0x92c>)
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	f004 fb55 	bl	8006734 <__aeabi_dmul>
 800208a:	460a      	mov	r2, r1
 800208c:	4601      	mov	r1, r0
 800208e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8002092:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8002096:	901a      	str	r0, [sp, #104]	; 0x68
 8002098:	931b      	str	r3, [sp, #108]	; 0x6c
 800209a:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
 800209e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80020a2:	e6e9      	b.n	8001e78 <_strtod_l+0x520>
 80020a4:	f1a6 7354 	sub.w	r3, r6, #55574528	; 0x3500000
 80020a8:	9305      	str	r3, [sp, #20]
 80020aa:	ed9d 7b04 	vldr	d7, [sp, #16]
 80020ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80020b2:	eeb0 0a47 	vmov.f32	s0, s14
 80020b6:	eef0 0a67 	vmov.f32	s1, s15
 80020ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80020be:	f003 f8fd 	bl	80052bc <__ulp>
 80020c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80020c6:	ec53 2b10 	vmov	r2, r3, d0
 80020ca:	f004 fb33 	bl	8006734 <__aeabi_dmul>
 80020ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80020d2:	f004 f979 	bl	80063c8 <__adddf3>
 80020d6:	ea05 0c01 	and.w	ip, r5, r1
 80020da:	460b      	mov	r3, r1
 80020dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80020e4:	4a68      	ldr	r2, [pc, #416]	; (8002288 <_strtod_l+0x930>)
 80020e6:	4605      	mov	r5, r0
 80020e8:	460e      	mov	r6, r1
 80020ea:	4594      	cmp	ip, r2
 80020ec:	e9cd 5618 	strd	r5, r6, [sp, #96]	; 0x60
 80020f0:	d95c      	bls.n	80021ac <_strtod_l+0x854>
 80020f2:	4b66      	ldr	r3, [pc, #408]	; (800228c <_strtod_l+0x934>)
 80020f4:	4299      	cmp	r1, r3
 80020f6:	d103      	bne.n	8002100 <_strtod_l+0x7a8>
 80020f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80020fc:	f43f af7d 	beq.w	8001ffa <_strtod_l+0x6a2>
 8002100:	4962      	ldr	r1, [pc, #392]	; (800228c <_strtod_l+0x934>)
 8002102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002106:	e9cd 3104 	strd	r3, r1, [sp, #16]
 800210a:	e703      	b.n	8001f14 <_strtod_l+0x5bc>
 800210c:	f04f 0e00 	mov.w	lr, #0
 8002110:	e793      	b.n	800203a <_strtod_l+0x6e2>
 8002112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002116:	f004 fe6d 	bl	8006df4 <__aeabi_d2lz>
 800211a:	f004 fadd 	bl	80066d8 <__aeabi_l2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002126:	f004 f94d 	bl	80063c4 <__aeabi_dsub>
 800212a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800212c:	9a04      	ldr	r2, [sp, #16]
 800212e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002132:	4313      	orrs	r3, r2
 8002134:	432b      	orrs	r3, r5
 8002136:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800213a:	d049      	beq.n	80021d0 <_strtod_l+0x878>
 800213c:	a346      	add	r3, pc, #280	; (adr r3, 8002258 <_strtod_l+0x900>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f004 fd69 	bl	8006c18 <__aeabi_dcmplt>
 8002146:	b948      	cbnz	r0, 800215c <_strtod_l+0x804>
 8002148:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800214c:	a344      	add	r3, pc, #272	; (adr r3, 8002260 <_strtod_l+0x908>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f004 fd7f 	bl	8006c54 <__aeabi_dcmpgt>
 8002156:	2800      	cmp	r0, #0
 8002158:	f43f aedc 	beq.w	8001f14 <_strtod_l+0x5bc>
 800215c:	465e      	mov	r6, fp
 800215e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002162:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8002164:	4621      	mov	r1, r4
 8002166:	4648      	mov	r0, r9
 8002168:	f002 fd5a 	bl	8004c20 <_Bfree>
 800216c:	4641      	mov	r1, r8
 800216e:	4648      	mov	r0, r9
 8002170:	f002 fd56 	bl	8004c20 <_Bfree>
 8002174:	4639      	mov	r1, r7
 8002176:	4648      	mov	r0, r9
 8002178:	f002 fd52 	bl	8004c20 <_Bfree>
 800217c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800217e:	4648      	mov	r0, r9
 8002180:	f002 fd4e 	bl	8004c20 <_Bfree>
 8002184:	4631      	mov	r1, r6
 8002186:	4648      	mov	r0, r9
 8002188:	f002 fd4a 	bl	8004c20 <_Bfree>
 800218c:	e57e      	b.n	8001c8c <_strtod_l+0x334>
 800218e:	9b04      	ldr	r3, [sp, #16]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d102      	bne.n	800219a <_strtod_l+0x842>
 8002194:	2e00      	cmp	r6, #0
 8002196:	f000 8340 	beq.w	800281a <_strtod_l+0xec2>
 800219a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8002268 <_strtod_l+0x910>
 800219e:	4c3c      	ldr	r4, [pc, #240]	; (8002290 <_strtod_l+0x938>)
 80021a0:	2300      	movs	r3, #0
 80021a2:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80021a6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80021aa:	e665      	b.n	8001e78 <_strtod_l+0x520>
 80021ac:	f103 7554 	add.w	r5, r3, #55574528	; 0x3500000
 80021b0:	9505      	str	r5, [sp, #20]
 80021b2:	e6a8      	b.n	8001f06 <_strtod_l+0x5ae>
 80021b4:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80021b8:	f340 8172 	ble.w	80024a0 <_strtod_l+0xb48>
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <_strtod_l+0x920>)
 80021be:	9305      	str	r3, [sp, #20]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2322      	movs	r3, #34	; 0x22
 80021c4:	9204      	str	r2, [sp, #16]
 80021c6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80021ca:	f8c9 3000 	str.w	r3, [r9]
 80021ce:	e55d      	b.n	8001c8c <_strtod_l+0x334>
 80021d0:	a327      	add	r3, pc, #156	; (adr r3, 8002270 <_strtod_l+0x918>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f004 fd1f 	bl	8006c18 <__aeabi_dcmplt>
 80021da:	2800      	cmp	r0, #0
 80021dc:	f43f ae9a 	beq.w	8001f14 <_strtod_l+0x5bc>
 80021e0:	e7bc      	b.n	800215c <_strtod_l+0x804>
 80021e2:	3316      	adds	r3, #22
 80021e4:	f6ff ad75 	blt.w	8001cd2 <_strtod_l+0x37a>
 80021e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <_strtod_l+0x93c>)
 80021ec:	ebab 0b02 	sub.w	fp, fp, r2
 80021f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80021f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f004 fbc4 	bl	8006988 <__aeabi_ddiv>
 8002200:	4682      	mov	sl, r0
 8002202:	468b      	mov	fp, r1
 8002204:	e542      	b.n	8001c8c <_strtod_l+0x334>
 8002206:	a81d      	add	r0, sp, #116	; 0x74
 8002208:	4923      	ldr	r1, [pc, #140]	; (8002298 <_strtod_l+0x940>)
 800220a:	f002 fadb 	bl	80047c4 <__match>
 800220e:	2800      	cmp	r0, #0
 8002210:	f43f abdf 	beq.w	80019d2 <_strtod_l+0x7a>
 8002214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b28      	cmp	r3, #40	; 0x28
 800221a:	f000 8297 	beq.w	800274c <_strtod_l+0xdf4>
 800221e:	481f      	ldr	r0, [pc, #124]	; (800229c <_strtod_l+0x944>)
 8002220:	f003 fc56 	bl	8005ad0 <nan>
 8002224:	ec5b ab10 	vmov	sl, fp, d0
 8002228:	e530      	b.n	8001c8c <_strtod_l+0x334>
 800222a:	a81d      	add	r0, sp, #116	; 0x74
 800222c:	491c      	ldr	r1, [pc, #112]	; (80022a0 <_strtod_l+0x948>)
 800222e:	f002 fac9 	bl	80047c4 <__match>
 8002232:	2800      	cmp	r0, #0
 8002234:	f43f abcd 	beq.w	80019d2 <_strtod_l+0x7a>
 8002238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800223a:	491a      	ldr	r1, [pc, #104]	; (80022a4 <_strtod_l+0x94c>)
 800223c:	3b01      	subs	r3, #1
 800223e:	a81d      	add	r0, sp, #116	; 0x74
 8002240:	931d      	str	r3, [sp, #116]	; 0x74
 8002242:	f002 fabf 	bl	80047c4 <__match>
 8002246:	b910      	cbnz	r0, 800224e <_strtod_l+0x8f6>
 8002248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800224a:	3301      	adds	r3, #1
 800224c:	931d      	str	r3, [sp, #116]	; 0x74
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <_strtod_l+0x920>)
 8002250:	9305      	str	r3, [sp, #20]
 8002252:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002256:	e519      	b.n	8001c8c <_strtod_l+0x334>
 8002258:	94a03595 	.word	0x94a03595
 800225c:	3fdfffff 	.word	0x3fdfffff
 8002260:	35afe535 	.word	0x35afe535
 8002264:	3fe00000 	.word	0x3fe00000
 8002268:	00000000 	.word	0x00000000
 800226c:	3ff00000 	.word	0x3ff00000
 8002270:	94a03595 	.word	0x94a03595
 8002274:	3fcfffff 	.word	0x3fcfffff
 8002278:	7ff00000 	.word	0x7ff00000
 800227c:	fffffbe2 	.word	0xfffffbe2
 8002280:	3ff00000 	.word	0x3ff00000
 8002284:	3fe00000 	.word	0x3fe00000
 8002288:	7c9fffff 	.word	0x7c9fffff
 800228c:	7fefffff 	.word	0x7fefffff
 8002290:	bff00000 	.word	0xbff00000
 8002294:	08011970 	.word	0x08011970
 8002298:	080122e8 	.word	0x080122e8
 800229c:	080123fc 	.word	0x080123fc
 80022a0:	080122dc 	.word	0x080122dc
 80022a4:	080122e0 	.word	0x080122e0
 80022a8:	f43f ad2b 	beq.w	8001d02 <_strtod_l+0x3aa>
 80022ac:	4264      	negs	r4, r4
 80022ae:	f014 020f 	ands.w	r2, r4, #15
 80022b2:	d00a      	beq.n	80022ca <_strtod_l+0x972>
 80022b4:	4bba      	ldr	r3, [pc, #744]	; (80025a0 <_strtod_l+0xc48>)
 80022b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80022ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f004 fb61 	bl	8006988 <__aeabi_ddiv>
 80022c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80022ca:	1124      	asrs	r4, r4, #4
 80022cc:	f43f ad19 	beq.w	8001d02 <_strtod_l+0x3aa>
 80022d0:	2c1f      	cmp	r4, #31
 80022d2:	dc35      	bgt.n	8002340 <_strtod_l+0x9e8>
 80022d4:	f014 0310 	ands.w	r3, r4, #16
 80022d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80022dc:	bf18      	it	ne
 80022de:	236a      	movne	r3, #106	; 0x6a
 80022e0:	4eb0      	ldr	r6, [pc, #704]	; (80025a4 <_strtod_l+0xc4c>)
 80022e2:	9307      	str	r3, [sp, #28]
 80022e4:	2300      	movs	r3, #0
 80022e6:	07e2      	lsls	r2, r4, #31
 80022e8:	d504      	bpl.n	80022f4 <_strtod_l+0x99c>
 80022ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80022ee:	f004 fa21 	bl	8006734 <__aeabi_dmul>
 80022f2:	2301      	movs	r3, #1
 80022f4:	1064      	asrs	r4, r4, #1
 80022f6:	f106 0608 	add.w	r6, r6, #8
 80022fa:	d1f4      	bne.n	80022e6 <_strtod_l+0x98e>
 80022fc:	b10b      	cbz	r3, 8002302 <_strtod_l+0x9aa>
 80022fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002302:	9b07      	ldr	r3, [sp, #28]
 8002304:	b19b      	cbz	r3, 800232e <_strtod_l+0x9d6>
 8002306:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800230a:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800230e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002312:	2b00      	cmp	r3, #0
 8002314:	4611      	mov	r1, r2
 8002316:	dd0a      	ble.n	800232e <_strtod_l+0x9d6>
 8002318:	2b1f      	cmp	r3, #31
 800231a:	f340 826b 	ble.w	80027f4 <_strtod_l+0xe9c>
 800231e:	2200      	movs	r2, #0
 8002320:	2b34      	cmp	r3, #52	; 0x34
 8002322:	9204      	str	r2, [sp, #16]
 8002324:	f340 8271 	ble.w	800280a <_strtod_l+0xeb2>
 8002328:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800232c:	9305      	str	r3, [sp, #20]
 800232e:	2200      	movs	r2, #0
 8002330:	2300      	movs	r3, #0
 8002332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002336:	f004 fc65 	bl	8006c04 <__aeabi_dcmpeq>
 800233a:	2800      	cmp	r0, #0
 800233c:	f43f ace3 	beq.w	8001d06 <_strtod_l+0x3ae>
 8002340:	2322      	movs	r3, #34	; 0x22
 8002342:	f8c9 3000 	str.w	r3, [r9]
 8002346:	f04f 0a00 	mov.w	sl, #0
 800234a:	f04f 0b00 	mov.w	fp, #0
 800234e:	e49d      	b.n	8001c8c <_strtod_l+0x334>
 8002350:	9907      	ldr	r1, [sp, #28]
 8002352:	465a      	mov	r2, fp
 8002354:	4650      	mov	r0, sl
 8002356:	f003 fc23 	bl	8005ba0 <strncmp>
 800235a:	9008      	str	r0, [sp, #32]
 800235c:	2800      	cmp	r0, #0
 800235e:	f040 8272 	bne.w	8002846 <_strtod_l+0xeee>
 8002362:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002364:	eb02 030b 	add.w	r3, r2, fp
 8002368:	931d      	str	r3, [sp, #116]	; 0x74
 800236a:	f812 400b 	ldrb.w	r4, [r2, fp]
 800236e:	2c30      	cmp	r4, #48	; 0x30
 8002370:	bf08      	it	eq
 8002372:	f1c3 0201 	rsbeq	r2, r3, #1
 8002376:	f040 80e0 	bne.w	800253a <_strtod_l+0xbe2>
 800237a:	1898      	adds	r0, r3, r2
 800237c:	3301      	adds	r3, #1
 800237e:	931d      	str	r3, [sp, #116]	; 0x74
 8002380:	781c      	ldrb	r4, [r3, #0]
 8002382:	2c30      	cmp	r4, #48	; 0x30
 8002384:	d0f9      	beq.n	800237a <_strtod_l+0xa22>
 8002386:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
 800238a:	2b08      	cmp	r3, #8
 800238c:	d812      	bhi.n	80023b4 <_strtod_l+0xa5c>
 800238e:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8002392:	2700      	movs	r7, #0
 8002394:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8002398:	f100 0b01 	add.w	fp, r0, #1
 800239c:	4654      	mov	r4, sl
 800239e:	463e      	mov	r6, r7
 80023a0:	2501      	movs	r5, #1
 80023a2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80023a6:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
 80023aa:	2000      	movs	r0, #0
 80023ac:	1c63      	adds	r3, r4, #1
 80023ae:	931d      	str	r3, [sp, #116]	; 0x74
 80023b0:	7864      	ldrb	r4, [r4, #1]
 80023b2:	e483      	b.n	8001cbc <_strtod_l+0x364>
 80023b4:	2c65      	cmp	r4, #101	; 0x65
 80023b6:	d02f      	beq.n	8002418 <_strtod_l+0xac0>
 80023b8:	2c45      	cmp	r4, #69	; 0x45
 80023ba:	d02d      	beq.n	8002418 <_strtod_l+0xac0>
 80023bc:	f04f 0c01 	mov.w	ip, #1
 80023c0:	e405      	b.n	8001bce <_strtod_l+0x276>
 80023c2:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <_strtod_l+0xc50>)
 80023c4:	9305      	str	r3, [sp, #20]
 80023c6:	0724      	lsls	r4, r4, #28
 80023c8:	bf42      	ittt	mi
 80023ca:	9b05      	ldrmi	r3, [sp, #20]
 80023cc:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80023d0:	9305      	strmi	r3, [sp, #20]
 80023d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80023d6:	e459      	b.n	8001c8c <_strtod_l+0x334>
 80023d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023da:	9502      	str	r5, [sp, #8]
 80023dc:	ab1e      	add	r3, sp, #120	; 0x78
 80023de:	e9cd 3200 	strd	r3, r2, [sp]
 80023e2:	a91d      	add	r1, sp, #116	; 0x74
 80023e4:	ab1f      	add	r3, sp, #124	; 0x7c
 80023e6:	4a71      	ldr	r2, [pc, #452]	; (80025ac <_strtod_l+0xc54>)
 80023e8:	4648      	mov	r0, r9
 80023ea:	f001 ff3b 	bl	8004264 <__gethex>
 80023ee:	f010 0507 	ands.w	r5, r0, #7
 80023f2:	4604      	mov	r4, r0
 80023f4:	f43f ac46 	beq.w	8001c84 <_strtod_l+0x32c>
 80023f8:	2d06      	cmp	r5, #6
 80023fa:	f040 80a0 	bne.w	800253e <_strtod_l+0xbe6>
 80023fe:	9a06      	ldr	r2, [sp, #24]
 8002400:	f10a 0301 	add.w	r3, sl, #1
 8002404:	2a00      	cmp	r2, #0
 8002406:	f43f aae9 	beq.w	80019dc <_strtod_l+0x84>
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	f04f 0a00 	mov.w	sl, #0
 8002410:	f04f 0b00 	mov.w	fp, #0
 8002414:	f7ff bae6 	b.w	80019e4 <_strtod_l+0x8c>
 8002418:	f04f 0b00 	mov.w	fp, #0
 800241c:	465e      	mov	r6, fp
 800241e:	465f      	mov	r7, fp
 8002420:	f04f 0c01 	mov.w	ip, #1
 8002424:	f7ff bad1 	b.w	80019ca <_strtod_l+0x72>
 8002428:	3001      	adds	r0, #1
 800242a:	4696      	mov	lr, r2
 800242c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800242e:	2a00      	cmp	r2, #0
 8002430:	d0bc      	beq.n	80023ac <_strtod_l+0xa54>
 8002432:	2801      	cmp	r0, #1
 8002434:	4483      	add	fp, r0
 8002436:	f105 0101 	add.w	r1, r5, #1
 800243a:	f000 8201 	beq.w	8002840 <_strtod_l+0xee8>
 800243e:	4428      	add	r0, r5
 8002440:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8002444:	e003      	b.n	800244e <_strtod_l+0xaf6>
 8002446:	004f      	lsls	r7, r1, #1
 8002448:	4563      	cmp	r3, ip
 800244a:	461d      	mov	r5, r3
 800244c:	d00b      	beq.n	8002466 <_strtod_l+0xb0e>
 800244e:	2d08      	cmp	r5, #8
 8002450:	f105 0301 	add.w	r3, r5, #1
 8002454:	eb07 0187 	add.w	r1, r7, r7, lsl #2
 8002458:	ddf5      	ble.n	8002446 <_strtod_l+0xaee>
 800245a:	2b10      	cmp	r3, #16
 800245c:	bfdc      	itt	le
 800245e:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 8002462:	0076      	lslle	r6, r6, #1
 8002464:	e7f0      	b.n	8002448 <_strtod_l+0xaf0>
 8002466:	4605      	mov	r5, r0
 8002468:	2b08      	cmp	r3, #8
 800246a:	dd9a      	ble.n	80023a2 <_strtod_l+0xa4a>
 800246c:	2d10      	cmp	r5, #16
 800246e:	bfdc      	itt	le
 8002470:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 8002474:	eb02 0646 	addle.w	r6, r2, r6, lsl #1
 8002478:	2000      	movs	r0, #0
 800247a:	e797      	b.n	80023ac <_strtod_l+0xa54>
 800247c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002480:	4293      	cmp	r3, r2
 8002482:	bfa8      	it	ge
 8002484:	4613      	movge	r3, r2
 8002486:	930c      	str	r3, [sp, #48]	; 0x30
 8002488:	f7ff bb97 	b.w	8001bba <_strtod_l+0x262>
 800248c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8002490:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002494:	e51b      	b.n	8001ece <_strtod_l+0x576>
 8002496:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8002598 <_strtod_l+0xc40>
 800249a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800249e:	e50c      	b.n	8001eba <_strtod_l+0x562>
 80024a0:	1124      	asrs	r4, r4, #4
 80024a2:	2c01      	cmp	r4, #1
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <_strtod_l+0xc58>)
 80024a6:	f340 8165 	ble.w	8002774 <_strtod_l+0xe1c>
 80024aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80024ae:	461e      	mov	r6, r3
 80024b0:	9307      	str	r3, [sp, #28]
 80024b2:	2300      	movs	r3, #0
 80024b4:	4698      	mov	r8, r3
 80024b6:	f014 0f01 	tst.w	r4, #1
 80024ba:	f108 0801 	add.w	r8, r8, #1
 80024be:	ea4f 0464 	mov.w	r4, r4, asr #1
 80024c2:	d004      	beq.n	80024ce <_strtod_l+0xb76>
 80024c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80024c8:	f004 f934 	bl	8006734 <__aeabi_dmul>
 80024cc:	2301      	movs	r3, #1
 80024ce:	2c01      	cmp	r4, #1
 80024d0:	f106 0608 	add.w	r6, r6, #8
 80024d4:	d1ef      	bne.n	80024b6 <_strtod_l+0xb5e>
 80024d6:	b10b      	cbz	r3, 80024dc <_strtod_l+0xb84>
 80024d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80024dc:	9b05      	ldr	r3, [sp, #20]
 80024de:	4c32      	ldr	r4, [pc, #200]	; (80025a8 <_strtod_l+0xc50>)
 80024e0:	4e34      	ldr	r6, [pc, #208]	; (80025b4 <_strtod_l+0xc5c>)
 80024e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80024e6:	9305      	str	r3, [sp, #20]
 80024e8:	9b07      	ldr	r3, [sp, #28]
 80024ea:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80024ee:	e9d8 0100 	ldrd	r0, r1, [r8]
 80024f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80024f6:	f004 f91d 	bl	8006734 <__aeabi_dmul>
 80024fa:	ea01 0304 	and.w	r3, r1, r4
 80024fe:	42b3      	cmp	r3, r6
 8002500:	460a      	mov	r2, r1
 8002502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002506:	f200 80d4 	bhi.w	80026b2 <_strtod_l+0xd5a>
 800250a:	492b      	ldr	r1, [pc, #172]	; (80025b8 <_strtod_l+0xc60>)
 800250c:	428b      	cmp	r3, r1
 800250e:	f240 80c9 	bls.w	80026a4 <_strtod_l+0xd4c>
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <_strtod_l+0xc64>)
 8002514:	9305      	str	r3, [sp, #20]
 8002516:	2300      	movs	r3, #0
 8002518:	9307      	str	r3, [sp, #28]
 800251a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800251e:	9304      	str	r3, [sp, #16]
 8002520:	f7ff bbf1 	b.w	8001d06 <_strtod_l+0x3ae>
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <_strtod_l+0xc50>)
 8002526:	9305      	str	r3, [sp, #20]
 8002528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800252a:	9304      	str	r3, [sp, #16]
 800252c:	2322      	movs	r3, #34	; 0x22
 800252e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002532:	f8c9 3000 	str.w	r3, [r9]
 8002536:	f7ff bba9 	b.w	8001c8c <_strtod_l+0x334>
 800253a:	9808      	ldr	r0, [sp, #32]
 800253c:	e723      	b.n	8002386 <_strtod_l+0xa2e>
 800253e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002540:	b13a      	cbz	r2, 8002552 <_strtod_l+0xbfa>
 8002542:	2135      	movs	r1, #53	; 0x35
 8002544:	a820      	add	r0, sp, #128	; 0x80
 8002546:	f002 fff7 	bl	8005538 <__copybits>
 800254a:	4648      	mov	r0, r9
 800254c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800254e:	f002 fb67 	bl	8004c20 <_Bfree>
 8002552:	3d01      	subs	r5, #1
 8002554:	2d04      	cmp	r5, #4
 8002556:	f63f af36 	bhi.w	80023c6 <_strtod_l+0xa6e>
 800255a:	a301      	add	r3, pc, #4	; (adr r3, 8002560 <_strtod_l+0xc08>)
 800255c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8002560:	0800257f 	.word	0x0800257f
 8002564:	08002575 	.word	0x08002575
 8002568:	080023c3 	.word	0x080023c3
 800256c:	080025c1 	.word	0x080025c1
 8002570:	0800257f 	.word	0x0800257f
 8002574:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002576:	9304      	str	r3, [sp, #16]
 8002578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800257a:	9305      	str	r3, [sp, #20]
 800257c:	e723      	b.n	80023c6 <_strtod_l+0xa6e>
 800257e:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
 8002582:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002584:	9104      	str	r1, [sp, #16]
 8002586:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800258a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800258e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002592:	9305      	str	r3, [sp, #20]
 8002594:	e717      	b.n	80023c6 <_strtod_l+0xa6e>
 8002596:	bf00      	nop
 8002598:	00000000 	.word	0x00000000
 800259c:	3ff00000 	.word	0x3ff00000
 80025a0:	08011970 	.word	0x08011970
 80025a4:	080116c8 	.word	0x080116c8
 80025a8:	7ff00000 	.word	0x7ff00000
 80025ac:	080116a0 	.word	0x080116a0
 80025b0:	08011a60 	.word	0x08011a60
 80025b4:	7ca00000 	.word	0x7ca00000
 80025b8:	7c900000 	.word	0x7c900000
 80025bc:	7fefffff 	.word	0x7fefffff
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80025c8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80025cc:	e6fb      	b.n	80023c6 <_strtod_l+0xa6e>
 80025ce:	49aa      	ldr	r1, [pc, #680]	; (8002878 <_strtod_l+0xf20>)
 80025d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80025d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025dc:	f004 f8aa 	bl	8006734 <__aeabi_dmul>
 80025e0:	4682      	mov	sl, r0
 80025e2:	468b      	mov	fp, r1
 80025e4:	f7ff bb52 	b.w	8001c8c <_strtod_l+0x334>
 80025e8:	ed9f 7b9f 	vldr	d7, [pc, #636]	; 8002868 <_strtod_l+0xf10>
 80025ec:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 80025f0:	ed9f 7b9f 	vldr	d7, [pc, #636]	; 8002870 <_strtod_l+0xf18>
 80025f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80025f8:	e54f      	b.n	800209a <_strtod_l+0x742>
 80025fa:	4c9f      	ldr	r4, [pc, #636]	; (8002878 <_strtod_l+0xf20>)
 80025fc:	f1c5 050f 	rsb	r5, r5, #15
 8002600:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800260c:	f004 f892 	bl	8006734 <__aeabi_dmul>
 8002610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002612:	1b5d      	subs	r5, r3, r5
 8002614:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002618:	e9d4 2300 	ldrd	r2, r3, [r4]
 800261c:	f004 f88a 	bl	8006734 <__aeabi_dmul>
 8002620:	4682      	mov	sl, r0
 8002622:	468b      	mov	fp, r1
 8002624:	f7ff bb32 	b.w	8001c8c <_strtod_l+0x334>
 8002628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800262a:	960b      	str	r6, [sp, #44]	; 0x2c
 800262c:	4633      	mov	r3, r6
 800262e:	4a93      	ldr	r2, [pc, #588]	; (800287c <_strtod_l+0xf24>)
 8002630:	465e      	mov	r6, fp
 8002632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002636:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800263a:	2900      	cmp	r1, #0
 800263c:	d043      	beq.n	80026c6 <_strtod_l+0xd6e>
 800263e:	4293      	cmp	r3, r2
 8002640:	f000 80b6 	beq.w	80027b0 <_strtod_l+0xe58>
 8002644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d07b      	beq.n	8002742 <_strtod_l+0xdea>
 800264a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800264c:	4213      	tst	r3, r2
 800264e:	d010      	beq.n	8002672 <_strtod_l+0xd1a>
 8002650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002652:	9a07      	ldr	r2, [sp, #28]
 8002654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 808f 	beq.w	800277c <_strtod_l+0xe24>
 800265e:	f7ff f95f 	bl	8001920 <sulp>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4650      	mov	r0, sl
 8002668:	4659      	mov	r1, fp
 800266a:	f003 fead 	bl	80063c8 <__adddf3>
 800266e:	4682      	mov	sl, r0
 8002670:	468b      	mov	fp, r1
 8002672:	9b07      	ldr	r3, [sp, #28]
 8002674:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8002676:	2b00      	cmp	r3, #0
 8002678:	f43f ad74 	beq.w	8002164 <_strtod_l+0x80c>
 800267c:	4a80      	ldr	r2, [pc, #512]	; (8002880 <_strtod_l+0xf28>)
 800267e:	2300      	movs	r3, #0
 8002680:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
 8002684:	4650      	mov	r0, sl
 8002686:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800268a:	4659      	mov	r1, fp
 800268c:	f004 f852 	bl	8006734 <__aeabi_dmul>
 8002690:	4603      	mov	r3, r0
 8002692:	430b      	orrs	r3, r1
 8002694:	bf08      	it	eq
 8002696:	2322      	moveq	r3, #34	; 0x22
 8002698:	4682      	mov	sl, r0
 800269a:	468b      	mov	fp, r1
 800269c:	bf08      	it	eq
 800269e:	f8c9 3000 	streq.w	r3, [r9]
 80026a2:	e55f      	b.n	8002164 <_strtod_l+0x80c>
 80026a4:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
 80026a8:	9305      	str	r3, [sp, #20]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9307      	str	r3, [sp, #28]
 80026ae:	f7ff bb2a 	b.w	8001d06 <_strtod_l+0x3ae>
 80026b2:	2300      	movs	r3, #0
 80026b4:	9304      	str	r3, [sp, #16]
 80026b6:	9405      	str	r4, [sp, #20]
 80026b8:	2322      	movs	r3, #34	; 0x22
 80026ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80026be:	f8c9 3000 	str.w	r3, [r9]
 80026c2:	f7ff bae3 	b.w	8001c8c <_strtod_l+0x334>
 80026c6:	9a04      	ldr	r2, [sp, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	d1bb      	bne.n	8002644 <_strtod_l+0xcec>
 80026cc:	9b07      	ldr	r3, [sp, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80a5 	bne.w	800281e <_strtod_l+0xec6>
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <_strtod_l+0xf2c>)
 80026d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80026d8:	401a      	ands	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80026e0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80026e4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80026e8:	9305      	str	r3, [sp, #20]
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ee:	9304      	str	r3, [sp, #16]
 80026f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80026f4:	e7bd      	b.n	8002672 <_strtod_l+0xd1a>
 80026f6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80026fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80026fc:	4323      	orrs	r3, r4
 80026fe:	465a      	mov	r2, fp
 8002700:	465e      	mov	r6, fp
 8002702:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8002706:	d1b4      	bne.n	8002672 <_strtod_l+0xd1a>
 8002708:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800270c:	950b      	str	r5, [sp, #44]	; 0x2c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1af      	bne.n	8002672 <_strtod_l+0xd1a>
 8002712:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002716:	0d1b      	lsrs	r3, r3, #20
 8002718:	051b      	lsls	r3, r3, #20
 800271a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800271e:	d9a8      	bls.n	8002672 <_strtod_l+0xd1a>
 8002720:	6953      	ldr	r3, [r2, #20]
 8002722:	b913      	cbnz	r3, 800272a <_strtod_l+0xdd2>
 8002724:	6913      	ldr	r3, [r2, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	dda3      	ble.n	8002672 <_strtod_l+0xd1a>
 800272a:	4631      	mov	r1, r6
 800272c:	2201      	movs	r2, #1
 800272e:	4648      	mov	r0, r9
 8002730:	f002 fcb0 	bl	8005094 <__lshift>
 8002734:	4639      	mov	r1, r7
 8002736:	4606      	mov	r6, r0
 8002738:	f002 fd10 	bl	800515c <__mcmp>
 800273c:	2800      	cmp	r0, #0
 800273e:	dd98      	ble.n	8002672 <_strtod_l+0xd1a>
 8002740:	e7c4      	b.n	80026cc <_strtod_l+0xd74>
 8002742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002744:	9a04      	ldr	r2, [sp, #16]
 8002746:	4213      	tst	r3, r2
 8002748:	d093      	beq.n	8002672 <_strtod_l+0xd1a>
 800274a:	e781      	b.n	8002650 <_strtod_l+0xcf8>
 800274c:	a81d      	add	r0, sp, #116	; 0x74
 800274e:	aa20      	add	r2, sp, #128	; 0x80
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <_strtod_l+0xf30>)
 8002752:	f002 f84f 	bl	80047f4 <__hexnan>
 8002756:	2805      	cmp	r0, #5
 8002758:	f47f ad61 	bne.w	800221e <_strtod_l+0x8c6>
 800275c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800275e:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8002762:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002766:	9305      	str	r3, [sp, #20]
 8002768:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800276a:	9304      	str	r3, [sp, #16]
 800276c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002770:	f7ff ba8c 	b.w	8001c8c <_strtod_l+0x334>
 8002774:	9307      	str	r3, [sp, #28]
 8002776:	f04f 0800 	mov.w	r8, #0
 800277a:	e6af      	b.n	80024dc <_strtod_l+0xb84>
 800277c:	f7ff f8d0 	bl	8001920 <sulp>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4650      	mov	r0, sl
 8002786:	4659      	mov	r1, fp
 8002788:	f003 fe1c 	bl	80063c4 <__aeabi_dsub>
 800278c:	2200      	movs	r2, #0
 800278e:	2300      	movs	r3, #0
 8002790:	4682      	mov	sl, r0
 8002792:	468b      	mov	fp, r1
 8002794:	f004 fa36 	bl	8006c04 <__aeabi_dcmpeq>
 8002798:	2800      	cmp	r0, #0
 800279a:	f43f af6a 	beq.w	8002672 <_strtod_l+0xd1a>
 800279e:	2322      	movs	r3, #34	; 0x22
 80027a0:	f8c9 3000 	str.w	r3, [r9]
 80027a4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80027a6:	f04f 0a00 	mov.w	sl, #0
 80027aa:	f04f 0b00 	mov.w	fp, #0
 80027ae:	e4d9      	b.n	8002164 <_strtod_l+0x80c>
 80027b0:	9b07      	ldr	r3, [sp, #28]
 80027b2:	9904      	ldr	r1, [sp, #16]
 80027b4:	b333      	cbz	r3, 8002804 <_strtod_l+0xeac>
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <_strtod_l+0xf2c>)
 80027b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027ba:	4013      	ands	r3, r2
 80027bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80027c0:	d820      	bhi.n	8002804 <_strtod_l+0xeac>
 80027c2:	0d1b      	lsrs	r3, r3, #20
 80027c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	4299      	cmp	r1, r3
 80027d2:	f47f af37 	bne.w	8002644 <_strtod_l+0xcec>
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <_strtod_l+0xf34>)
 80027d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027da:	429a      	cmp	r2, r3
 80027dc:	d02c      	beq.n	8002838 <_strtod_l+0xee0>
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <_strtod_l+0xf2c>)
 80027e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027e2:	401a      	ands	r2, r3
 80027e4:	f502 1380 	add.w	r3, r2, #1048576	; 0x100000
 80027e8:	9305      	str	r3, [sp, #20]
 80027ea:	2300      	movs	r3, #0
 80027ec:	9304      	str	r3, [sp, #16]
 80027ee:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80027f2:	e73e      	b.n	8002672 <_strtod_l+0xd1a>
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	9a04      	ldr	r2, [sp, #16]
 80027fe:	401a      	ands	r2, r3
 8002800:	9204      	str	r2, [sp, #16]
 8002802:	e594      	b.n	800232e <_strtod_l+0x9d6>
 8002804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002808:	e7e2      	b.n	80027d0 <_strtod_l+0xe78>
 800280a:	3b20      	subs	r3, #32
 800280c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	400b      	ands	r3, r1
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	e589      	b.n	800232e <_strtod_l+0x9d6>
 800281a:	465e      	mov	r6, fp
 800281c:	e7bf      	b.n	800279e <_strtod_l+0xe46>
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <_strtod_l+0xf2c>)
 8002820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002822:	401a      	ands	r2, r3
 8002824:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
 8002828:	4613      	mov	r3, r2
 800282a:	f73f af57 	bgt.w	80026dc <_strtod_l+0xd84>
 800282e:	f1b2 7f5c 	cmp.w	r2, #57671680	; 0x3700000
 8002832:	ddb4      	ble.n	800279e <_strtod_l+0xe46>
 8002834:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8002836:	e721      	b.n	800267c <_strtod_l+0xd24>
 8002838:	3101      	adds	r1, #1
 800283a:	d1d0      	bne.n	80027de <_strtod_l+0xe86>
 800283c:	f7ff bbde 	b.w	8001ffc <_strtod_l+0x6a4>
 8002840:	462b      	mov	r3, r5
 8002842:	460d      	mov	r5, r1
 8002844:	e610      	b.n	8002468 <_strtod_l+0xb10>
 8002846:	2300      	movs	r3, #0
 8002848:	2c65      	cmp	r4, #101	; 0x65
 800284a:	9308      	str	r3, [sp, #32]
 800284c:	461e      	mov	r6, r3
 800284e:	461f      	mov	r7, r3
 8002850:	4618      	mov	r0, r3
 8002852:	469b      	mov	fp, r3
 8002854:	d003      	beq.n	800285e <_strtod_l+0xf06>
 8002856:	461d      	mov	r5, r3
 8002858:	469c      	mov	ip, r3
 800285a:	f7ff b901 	b.w	8001a60 <_strtod_l+0x108>
 800285e:	469c      	mov	ip, r3
 8002860:	f7ff b8b3 	b.w	80019ca <_strtod_l+0x72>
 8002864:	f3af 8000 	nop.w
 8002868:	00000000 	.word	0x00000000
 800286c:	bfe00000 	.word	0xbfe00000
 8002870:	00000000 	.word	0x00000000
 8002874:	3fe00000 	.word	0x3fe00000
 8002878:	08011970 	.word	0x08011970
 800287c:	000fffff 	.word	0x000fffff
 8002880:	39500000 	.word	0x39500000
 8002884:	7ff00000 	.word	0x7ff00000
 8002888:	080116b4 	.word	0x080116b4
 800288c:	7fefffff 	.word	0x7fefffff

08002890 <_strtod_r>:
 8002890:	4b01      	ldr	r3, [pc, #4]	; (8002898 <_strtod_r+0x8>)
 8002892:	f7ff b861 	b.w	8001958 <_strtod_l>
 8002896:	bf00      	nop
 8002898:	2000006c 	.word	0x2000006c

0800289c <strtod_l>:
 800289c:	b410      	push	{r4}
 800289e:	4c04      	ldr	r4, [pc, #16]	; (80028b0 <strtod_l+0x14>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	460a      	mov	r2, r1
 80028a4:	4601      	mov	r1, r0
 80028a6:	6820      	ldr	r0, [r4, #0]
 80028a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ac:	f7ff b854 	b.w	8001958 <_strtod_l>
 80028b0:	20000004 	.word	0x20000004

080028b4 <strtod>:
 80028b4:	b410      	push	{r4}
 80028b6:	4c04      	ldr	r4, [pc, #16]	; (80028c8 <strtod+0x14>)
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <strtod+0x18>)
 80028ba:	460a      	mov	r2, r1
 80028bc:	4601      	mov	r1, r0
 80028be:	6820      	ldr	r0, [r4, #0]
 80028c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028c4:	f7ff b848 	b.w	8001958 <_strtod_l>
 80028c8:	20000004 	.word	0x20000004
 80028cc:	2000006c 	.word	0x2000006c

080028d0 <strtof_l>:
 80028d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002980 <strtof_l+0xb0>
 80028d8:	4613      	mov	r3, r2
 80028da:	ed2d 8b02 	vpush	{d8}
 80028de:	460a      	mov	r2, r1
 80028e0:	4601      	mov	r1, r0
 80028e2:	f8d8 0000 	ldr.w	r0, [r8]
 80028e6:	f7ff f837 	bl	8001958 <_strtod_l>
 80028ea:	ec55 4b10 	vmov	r4, r5, d0
 80028ee:	ee10 2a10 	vmov	r2, s0
 80028f2:	462b      	mov	r3, r5
 80028f4:	ee10 0a10 	vmov	r0, s0
 80028f8:	4629      	mov	r1, r5
 80028fa:	f004 f9b5 	bl	8006c68 <__aeabi_dcmpun>
 80028fe:	bb50      	cbnz	r0, 8002956 <strtof_l+0x86>
 8002900:	4620      	mov	r0, r4
 8002902:	4629      	mov	r1, r5
 8002904:	f004 fa0e 	bl	8006d24 <__aeabi_d2f>
 8002908:	ee08 0a10 	vmov	s16, r0
 800290c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002974 <strtof_l+0xa4>
 8002910:	eeb0 7ac8 	vabs.f32	s14, s16
 8002914:	eeb4 7a67 	vcmp.f32	s14, s15
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	dd15      	ble.n	800294a <strtof_l+0x7a>
 800291e:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8002922:	4620      	mov	r0, r4
 8002924:	4639      	mov	r1, r7
 8002926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <strtof_l+0xa8>)
 800292c:	f004 f99c 	bl	8006c68 <__aeabi_dcmpun>
 8002930:	b938      	cbnz	r0, 8002942 <strtof_l+0x72>
 8002932:	4620      	mov	r0, r4
 8002934:	4639      	mov	r1, r7
 8002936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <strtof_l+0xa8>)
 800293c:	f004 f976 	bl	8006c2c <__aeabi_dcmple>
 8002940:	b118      	cbz	r0, 800294a <strtof_l+0x7a>
 8002942:	f8d8 3000 	ldr.w	r3, [r8]
 8002946:	2222      	movs	r2, #34	; 0x22
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	eeb0 0a48 	vmov.f32	s0, s16
 800294e:	ecbd 8b02 	vpop	{d8}
 8002952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002956:	2d00      	cmp	r5, #0
 8002958:	4808      	ldr	r0, [pc, #32]	; (800297c <strtof_l+0xac>)
 800295a:	da04      	bge.n	8002966 <strtof_l+0x96>
 800295c:	f003 f8d2 	bl	8005b04 <nanf>
 8002960:	eeb1 8a40 	vneg.f32	s16, s0
 8002964:	e7f1      	b.n	800294a <strtof_l+0x7a>
 8002966:	ecbd 8b02 	vpop	{d8}
 800296a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800296e:	f003 b8c9 	b.w	8005b04 <nanf>
 8002972:	bf00      	nop
 8002974:	7f7fffff 	.word	0x7f7fffff
 8002978:	7fefffff 	.word	0x7fefffff
 800297c:	080123fc 	.word	0x080123fc
 8002980:	20000004 	.word	0x20000004

08002984 <strtof>:
 8002984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002988:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002a38 <strtof+0xb4>
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <strtof+0xa4>)
 800298e:	460a      	mov	r2, r1
 8002990:	ed2d 8b02 	vpush	{d8}
 8002994:	4601      	mov	r1, r0
 8002996:	f8d8 0000 	ldr.w	r0, [r8]
 800299a:	f7fe ffdd 	bl	8001958 <_strtod_l>
 800299e:	ec55 4b10 	vmov	r4, r5, d0
 80029a2:	ee10 2a10 	vmov	r2, s0
 80029a6:	462b      	mov	r3, r5
 80029a8:	ee10 0a10 	vmov	r0, s0
 80029ac:	4629      	mov	r1, r5
 80029ae:	f004 f95b 	bl	8006c68 <__aeabi_dcmpun>
 80029b2:	bb50      	cbnz	r0, 8002a0a <strtof+0x86>
 80029b4:	4620      	mov	r0, r4
 80029b6:	4629      	mov	r1, r5
 80029b8:	f004 f9b4 	bl	8006d24 <__aeabi_d2f>
 80029bc:	ee08 0a10 	vmov	s16, r0
 80029c0:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8002a2c <strtof+0xa8>
 80029c4:	eeb0 7ac8 	vabs.f32	s14, s16
 80029c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	dd15      	ble.n	80029fe <strtof+0x7a>
 80029d2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80029d6:	4620      	mov	r0, r4
 80029d8:	4639      	mov	r1, r7
 80029da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <strtof+0xac>)
 80029e0:	f004 f942 	bl	8006c68 <__aeabi_dcmpun>
 80029e4:	b938      	cbnz	r0, 80029f6 <strtof+0x72>
 80029e6:	4620      	mov	r0, r4
 80029e8:	4639      	mov	r1, r7
 80029ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <strtof+0xac>)
 80029f0:	f004 f91c 	bl	8006c2c <__aeabi_dcmple>
 80029f4:	b118      	cbz	r0, 80029fe <strtof+0x7a>
 80029f6:	f8d8 3000 	ldr.w	r3, [r8]
 80029fa:	2222      	movs	r2, #34	; 0x22
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	eeb0 0a48 	vmov.f32	s0, s16
 8002a02:	ecbd 8b02 	vpop	{d8}
 8002a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a0a:	2d00      	cmp	r5, #0
 8002a0c:	4809      	ldr	r0, [pc, #36]	; (8002a34 <strtof+0xb0>)
 8002a0e:	da04      	bge.n	8002a1a <strtof+0x96>
 8002a10:	f003 f878 	bl	8005b04 <nanf>
 8002a14:	eeb1 8a40 	vneg.f32	s16, s0
 8002a18:	e7f1      	b.n	80029fe <strtof+0x7a>
 8002a1a:	ecbd 8b02 	vpop	{d8}
 8002a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a22:	f003 b86f 	b.w	8005b04 <nanf>
 8002a26:	bf00      	nop
 8002a28:	2000006c 	.word	0x2000006c
 8002a2c:	7f7fffff 	.word	0x7f7fffff
 8002a30:	7fefffff 	.word	0x7fefffff
 8002a34:	080123fc 	.word	0x080123fc
 8002a38:	20000004 	.word	0x20000004

08002a3c <_strtol_l.isra.0>:
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a42:	d041      	beq.n	8002ac8 <_strtol_l.isra.0+0x8c>
 8002a44:	2b24      	cmp	r3, #36	; 0x24
 8002a46:	4698      	mov	r8, r3
 8002a48:	d83e      	bhi.n	8002ac8 <_strtol_l.isra.0+0x8c>
 8002a4a:	460f      	mov	r7, r1
 8002a4c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8002b6c <_strtol_l.isra.0+0x130>
 8002a50:	e000      	b.n	8002a54 <_strtol_l.isra.0+0x18>
 8002a52:	462f      	mov	r7, r5
 8002a54:	463d      	mov	r5, r7
 8002a56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a5a:	f81c 6004 	ldrb.w	r6, [ip, r4]
 8002a5e:	f016 0608 	ands.w	r6, r6, #8
 8002a62:	d1f6      	bne.n	8002a52 <_strtol_l.isra.0+0x16>
 8002a64:	2c2d      	cmp	r4, #45	; 0x2d
 8002a66:	d06c      	beq.n	8002b42 <_strtol_l.isra.0+0x106>
 8002a68:	2c2b      	cmp	r4, #43	; 0x2b
 8002a6a:	bf0a      	itet	eq
 8002a6c:	f895 b000 	ldrbeq.w	fp, [r5]
 8002a70:	46a3      	movne	fp, r4
 8002a72:	1cbd      	addeq	r5, r7, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d046      	beq.n	8002b06 <_strtol_l.isra.0+0xca>
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d057      	beq.n	8002b2c <_strtol_l.isra.0+0xf0>
 8002a7c:	2e00      	cmp	r6, #0
 8002a7e:	bf14      	ite	ne
 8002a80:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
 8002a84:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
 8002a88:	2700      	movs	r7, #0
 8002a8a:	fbb9 fef8 	udiv	lr, r9, r8
 8002a8e:	46bc      	mov	ip, r7
 8002a90:	fb08 9a1e 	mls	sl, r8, lr, r9
 8002a94:	e007      	b.n	8002aa6 <_strtol_l.isra.0+0x6a>
 8002a96:	45e6      	cmp	lr, ip
 8002a98:	d313      	bcc.n	8002ac2 <_strtol_l.isra.0+0x86>
 8002a9a:	d02f      	beq.n	8002afc <_strtol_l.isra.0+0xc0>
 8002a9c:	fb0c 4c08 	mla	ip, ip, r8, r4
 8002aa0:	2701      	movs	r7, #1
 8002aa2:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002aa6:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8002aaa:	2c09      	cmp	r4, #9
 8002aac:	d905      	bls.n	8002aba <_strtol_l.isra.0+0x7e>
 8002aae:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 8002ab2:	2c19      	cmp	r4, #25
 8002ab4:	d80f      	bhi.n	8002ad6 <_strtol_l.isra.0+0x9a>
 8002ab6:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8002aba:	42a3      	cmp	r3, r4
 8002abc:	dd13      	ble.n	8002ae6 <_strtol_l.isra.0+0xaa>
 8002abe:	2f00      	cmp	r7, #0
 8002ac0:	dae9      	bge.n	8002a96 <_strtol_l.isra.0+0x5a>
 8002ac2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002ac6:	e7ec      	b.n	8002aa2 <_strtol_l.isra.0+0x66>
 8002ac8:	f7fd ffa4 	bl	8000a14 <__errno>
 8002acc:	2316      	movs	r3, #22
 8002ace:	6003      	str	r3, [r0, #0]
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ad6:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 8002ada:	2c19      	cmp	r4, #25
 8002adc:	d803      	bhi.n	8002ae6 <_strtol_l.isra.0+0xaa>
 8002ade:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 8002ae2:	42a3      	cmp	r3, r4
 8002ae4:	dceb      	bgt.n	8002abe <_strtol_l.isra.0+0x82>
 8002ae6:	2f00      	cmp	r7, #0
 8002ae8:	db25      	blt.n	8002b36 <_strtol_l.isra.0+0xfa>
 8002aea:	b10e      	cbz	r6, 8002af0 <_strtol_l.isra.0+0xb4>
 8002aec:	f1cc 0c00 	rsb	ip, ip, #0
 8002af0:	b10a      	cbz	r2, 8002af6 <_strtol_l.isra.0+0xba>
 8002af2:	bb77      	cbnz	r7, 8002b52 <_strtol_l.isra.0+0x116>
 8002af4:	6011      	str	r1, [r2, #0]
 8002af6:	4660      	mov	r0, ip
 8002af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002afc:	45a2      	cmp	sl, r4
 8002afe:	dacd      	bge.n	8002a9c <_strtol_l.isra.0+0x60>
 8002b00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002b04:	e7cd      	b.n	8002aa2 <_strtol_l.isra.0+0x66>
 8002b06:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8002b0a:	d003      	beq.n	8002b14 <_strtol_l.isra.0+0xd8>
 8002b0c:	f04f 080a 	mov.w	r8, #10
 8002b10:	4643      	mov	r3, r8
 8002b12:	e7b3      	b.n	8002a7c <_strtol_l.isra.0+0x40>
 8002b14:	782b      	ldrb	r3, [r5, #0]
 8002b16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002b1a:	2b58      	cmp	r3, #88	; 0x58
 8002b1c:	d11b      	bne.n	8002b56 <_strtol_l.isra.0+0x11a>
 8002b1e:	f04f 0810 	mov.w	r8, #16
 8002b22:	f895 b001 	ldrb.w	fp, [r5, #1]
 8002b26:	4643      	mov	r3, r8
 8002b28:	3502      	adds	r5, #2
 8002b2a:	e7a7      	b.n	8002a7c <_strtol_l.isra.0+0x40>
 8002b2c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8002b30:	d015      	beq.n	8002b5e <_strtol_l.isra.0+0x122>
 8002b32:	4698      	mov	r8, r3
 8002b34:	e7a2      	b.n	8002a7c <_strtol_l.isra.0+0x40>
 8002b36:	2322      	movs	r3, #34	; 0x22
 8002b38:	6003      	str	r3, [r0, #0]
 8002b3a:	b13a      	cbz	r2, 8002b4c <_strtol_l.isra.0+0x110>
 8002b3c:	1e69      	subs	r1, r5, #1
 8002b3e:	46cc      	mov	ip, r9
 8002b40:	e7d8      	b.n	8002af4 <_strtol_l.isra.0+0xb8>
 8002b42:	f895 b000 	ldrb.w	fp, [r5]
 8002b46:	2601      	movs	r6, #1
 8002b48:	1cbd      	adds	r5, r7, #2
 8002b4a:	e793      	b.n	8002a74 <_strtol_l.isra.0+0x38>
 8002b4c:	46cc      	mov	ip, r9
 8002b4e:	4660      	mov	r0, ip
 8002b50:	e7d2      	b.n	8002af8 <_strtol_l.isra.0+0xbc>
 8002b52:	46e1      	mov	r9, ip
 8002b54:	e7f2      	b.n	8002b3c <_strtol_l.isra.0+0x100>
 8002b56:	f04f 0808 	mov.w	r8, #8
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	e78e      	b.n	8002a7c <_strtol_l.isra.0+0x40>
 8002b5e:	782c      	ldrb	r4, [r5, #0]
 8002b60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002b64:	2c58      	cmp	r4, #88	; 0x58
 8002b66:	d0da      	beq.n	8002b1e <_strtol_l.isra.0+0xe2>
 8002b68:	4698      	mov	r8, r3
 8002b6a:	e787      	b.n	8002a7c <_strtol_l.isra.0+0x40>
 8002b6c:	080116f1 	.word	0x080116f1

08002b70 <_strtol_r>:
 8002b70:	e764      	b.n	8002a3c <_strtol_l.isra.0>
 8002b72:	bf00      	nop

08002b74 <strtol_l>:
 8002b74:	b410      	push	{r4}
 8002b76:	4c04      	ldr	r4, [pc, #16]	; (8002b88 <strtol_l+0x14>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	6820      	ldr	r0, [r4, #0]
 8002b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b84:	e75a      	b.n	8002a3c <_strtol_l.isra.0>
 8002b86:	bf00      	nop
 8002b88:	20000004 	.word	0x20000004

08002b8c <strtol>:
 8002b8c:	b410      	push	{r4}
 8002b8e:	4c04      	ldr	r4, [pc, #16]	; (8002ba0 <strtol+0x14>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	460a      	mov	r2, r1
 8002b94:	4601      	mov	r1, r0
 8002b96:	6820      	ldr	r0, [r4, #0]
 8002b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b9c:	e74e      	b.n	8002a3c <_strtol_l.isra.0>
 8002b9e:	bf00      	nop
 8002ba0:	20000004 	.word	0x20000004

08002ba4 <__swbuf_r>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	460d      	mov	r5, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	4606      	mov	r6, r0
 8002bac:	b108      	cbz	r0, 8002bb2 <__swbuf_r+0xe>
 8002bae:	6983      	ldr	r3, [r0, #24]
 8002bb0:	b343      	cbz	r3, 8002c04 <__swbuf_r+0x60>
 8002bb2:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <__swbuf_r+0xa4>)
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	d02a      	beq.n	8002c0e <__swbuf_r+0x6a>
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <__swbuf_r+0xa8>)
 8002bba:	429c      	cmp	r4, r3
 8002bbc:	d029      	beq.n	8002c12 <__swbuf_r+0x6e>
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <__swbuf_r+0xac>)
 8002bc0:	429c      	cmp	r4, r3
 8002bc2:	bf08      	it	eq
 8002bc4:	68f4      	ldreq	r4, [r6, #12]
 8002bc6:	89a3      	ldrh	r3, [r4, #12]
 8002bc8:	69a2      	ldr	r2, [r4, #24]
 8002bca:	60a2      	str	r2, [r4, #8]
 8002bcc:	071a      	lsls	r2, r3, #28
 8002bce:	d522      	bpl.n	8002c16 <__swbuf_r+0x72>
 8002bd0:	6923      	ldr	r3, [r4, #16]
 8002bd2:	b303      	cbz	r3, 8002c16 <__swbuf_r+0x72>
 8002bd4:	6822      	ldr	r2, [r4, #0]
 8002bd6:	6961      	ldr	r1, [r4, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	b2ed      	uxtb	r5, r5
 8002bdc:	4299      	cmp	r1, r3
 8002bde:	462f      	mov	r7, r5
 8002be0:	dd29      	ble.n	8002c36 <__swbuf_r+0x92>
 8002be2:	3301      	adds	r3, #1
 8002be4:	68a1      	ldr	r1, [r4, #8]
 8002be6:	1c50      	adds	r0, r2, #1
 8002be8:	3901      	subs	r1, #1
 8002bea:	60a1      	str	r1, [r4, #8]
 8002bec:	6020      	str	r0, [r4, #0]
 8002bee:	7015      	strb	r5, [r2, #0]
 8002bf0:	6962      	ldr	r2, [r4, #20]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d016      	beq.n	8002c24 <__swbuf_r+0x80>
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	07db      	lsls	r3, r3, #31
 8002bfa:	d501      	bpl.n	8002c00 <__swbuf_r+0x5c>
 8002bfc:	2d0a      	cmp	r5, #10
 8002bfe:	d011      	beq.n	8002c24 <__swbuf_r+0x80>
 8002c00:	4638      	mov	r0, r7
 8002c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c04:	f001 fa6e 	bl	80040e4 <__sinit>
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <__swbuf_r+0xa4>)
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	d1d4      	bne.n	8002bb8 <__swbuf_r+0x14>
 8002c0e:	6874      	ldr	r4, [r6, #4]
 8002c10:	e7d9      	b.n	8002bc6 <__swbuf_r+0x22>
 8002c12:	68b4      	ldr	r4, [r6, #8]
 8002c14:	e7d7      	b.n	8002bc6 <__swbuf_r+0x22>
 8002c16:	4621      	mov	r1, r4
 8002c18:	4630      	mov	r0, r6
 8002c1a:	f000 f823 	bl	8002c64 <__swsetup_r>
 8002c1e:	b938      	cbnz	r0, 8002c30 <__swbuf_r+0x8c>
 8002c20:	6923      	ldr	r3, [r4, #16]
 8002c22:	e7d7      	b.n	8002bd4 <__swbuf_r+0x30>
 8002c24:	4621      	mov	r1, r4
 8002c26:	4630      	mov	r0, r6
 8002c28:	f001 f932 	bl	8003e90 <_fflush_r>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d0e7      	beq.n	8002c00 <__swbuf_r+0x5c>
 8002c30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002c34:	e7e4      	b.n	8002c00 <__swbuf_r+0x5c>
 8002c36:	4621      	mov	r1, r4
 8002c38:	4630      	mov	r0, r6
 8002c3a:	f001 f929 	bl	8003e90 <_fflush_r>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d1f6      	bne.n	8002c30 <__swbuf_r+0x8c>
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	e7cd      	b.n	8002be4 <__swbuf_r+0x40>
 8002c48:	08011834 	.word	0x08011834
 8002c4c:	08011814 	.word	0x08011814
 8002c50:	080117f4 	.word	0x080117f4

08002c54 <__swbuf>:
 8002c54:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <__swbuf+0xc>)
 8002c56:	460a      	mov	r2, r1
 8002c58:	4601      	mov	r1, r0
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f7ff bfa2 	b.w	8002ba4 <__swbuf_r>
 8002c60:	20000004 	.word	0x20000004

08002c64 <__swsetup_r>:
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <__swsetup_r+0xf0>)
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	681d      	ldr	r5, [r3, #0]
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	b10d      	cbz	r5, 8002c74 <__swsetup_r+0x10>
 8002c70:	69ab      	ldr	r3, [r5, #24]
 8002c72:	b1db      	cbz	r3, 8002cac <__swsetup_r+0x48>
 8002c74:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <__swsetup_r+0xf4>)
 8002c76:	429c      	cmp	r4, r3
 8002c78:	d01e      	beq.n	8002cb8 <__swsetup_r+0x54>
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <__swsetup_r+0xf8>)
 8002c7c:	429c      	cmp	r4, r3
 8002c7e:	d04a      	beq.n	8002d16 <__swsetup_r+0xb2>
 8002c80:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <__swsetup_r+0xfc>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	bf08      	it	eq
 8002c86:	68ec      	ldreq	r4, [r5, #12]
 8002c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c8c:	b293      	uxth	r3, r2
 8002c8e:	0719      	lsls	r1, r3, #28
 8002c90:	d518      	bpl.n	8002cc4 <__swsetup_r+0x60>
 8002c92:	6920      	ldr	r0, [r4, #16]
 8002c94:	b308      	cbz	r0, 8002cda <__swsetup_r+0x76>
 8002c96:	f013 0201 	ands.w	r2, r3, #1
 8002c9a:	d02c      	beq.n	8002cf6 <__swsetup_r+0x92>
 8002c9c:	6963      	ldr	r3, [r4, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	425b      	negs	r3, r3
 8002ca2:	61a3      	str	r3, [r4, #24]
 8002ca4:	60a2      	str	r2, [r4, #8]
 8002ca6:	b360      	cbz	r0, 8002d02 <__swsetup_r+0x9e>
 8002ca8:	2000      	movs	r0, #0
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	4628      	mov	r0, r5
 8002cae:	f001 fa19 	bl	80040e4 <__sinit>
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <__swsetup_r+0xf4>)
 8002cb4:	429c      	cmp	r4, r3
 8002cb6:	d1e0      	bne.n	8002c7a <__swsetup_r+0x16>
 8002cb8:	686c      	ldr	r4, [r5, #4]
 8002cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cbe:	b293      	uxth	r3, r2
 8002cc0:	0719      	lsls	r1, r3, #28
 8002cc2:	d4e6      	bmi.n	8002c92 <__swsetup_r+0x2e>
 8002cc4:	06dd      	lsls	r5, r3, #27
 8002cc6:	d53c      	bpl.n	8002d42 <__swsetup_r+0xde>
 8002cc8:	0758      	lsls	r0, r3, #29
 8002cca:	d426      	bmi.n	8002d1a <__swsetup_r+0xb6>
 8002ccc:	6920      	ldr	r0, [r4, #16]
 8002cce:	f042 0308 	orr.w	r3, r2, #8
 8002cd2:	81a3      	strh	r3, [r4, #12]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d1dd      	bne.n	8002c96 <__swsetup_r+0x32>
 8002cda:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8002cde:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002ce2:	d0d8      	beq.n	8002c96 <__swsetup_r+0x32>
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	f001 fe8a 	bl	8004a00 <__smakebuf_r>
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	6920      	ldr	r0, [r4, #16]
 8002cf0:	f013 0201 	ands.w	r2, r3, #1
 8002cf4:	d1d2      	bne.n	8002c9c <__swsetup_r+0x38>
 8002cf6:	0799      	lsls	r1, r3, #30
 8002cf8:	bf58      	it	pl
 8002cfa:	6962      	ldrpl	r2, [r4, #20]
 8002cfc:	60a2      	str	r2, [r4, #8]
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d1d2      	bne.n	8002ca8 <__swsetup_r+0x44>
 8002d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d06:	061a      	lsls	r2, r3, #24
 8002d08:	d5cf      	bpl.n	8002caa <__swsetup_r+0x46>
 8002d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0e:	81a3      	strh	r3, [r4, #12]
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	68ac      	ldr	r4, [r5, #8]
 8002d18:	e7b6      	b.n	8002c88 <__swsetup_r+0x24>
 8002d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d1c:	b151      	cbz	r1, 8002d34 <__swsetup_r+0xd0>
 8002d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d22:	4299      	cmp	r1, r3
 8002d24:	d004      	beq.n	8002d30 <__swsetup_r+0xcc>
 8002d26:	4630      	mov	r0, r6
 8002d28:	f002 fc64 	bl	80055f4 <_free_r>
 8002d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d30:	2300      	movs	r3, #0
 8002d32:	6363      	str	r3, [r4, #52]	; 0x34
 8002d34:	2300      	movs	r3, #0
 8002d36:	6920      	ldr	r0, [r4, #16]
 8002d38:	6063      	str	r3, [r4, #4]
 8002d3a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8002d3e:	6020      	str	r0, [r4, #0]
 8002d40:	e7c5      	b.n	8002cce <__swsetup_r+0x6a>
 8002d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d46:	2309      	movs	r3, #9
 8002d48:	6033      	str	r3, [r6, #0]
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d4e:	81a2      	strh	r2, [r4, #12]
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
 8002d52:	bf00      	nop
 8002d54:	20000004 	.word	0x20000004
 8002d58:	08011834 	.word	0x08011834
 8002d5c:	08011814 	.word	0x08011814
 8002d60:	080117f4 	.word	0x080117f4
 8002d64:	00000000 	.word	0x00000000

08002d68 <quorem>:
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	6903      	ldr	r3, [r0, #16]
 8002d6e:	690f      	ldr	r7, [r1, #16]
 8002d70:	42bb      	cmp	r3, r7
 8002d72:	b083      	sub	sp, #12
 8002d74:	f2c0 8086 	blt.w	8002e84 <quorem+0x11c>
 8002d78:	3f01      	subs	r7, #1
 8002d7a:	f101 0614 	add.w	r6, r1, #20
 8002d7e:	f100 0a14 	add.w	sl, r0, #20
 8002d82:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
 8002d86:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 8002d8a:	00bc      	lsls	r4, r7, #2
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	9400      	str	r4, [sp, #0]
 8002d90:	eb06 0904 	add.w	r9, r6, r4
 8002d94:	429a      	cmp	r2, r3
 8002d96:	4454      	add	r4, sl
 8002d98:	fbb2 f8f3 	udiv	r8, r2, r3
 8002d9c:	9401      	str	r4, [sp, #4]
 8002d9e:	d33a      	bcc.n	8002e16 <quorem+0xae>
 8002da0:	2500      	movs	r5, #0
 8002da2:	462a      	mov	r2, r5
 8002da4:	46b6      	mov	lr, r6
 8002da6:	46d4      	mov	ip, sl
 8002da8:	f85e 4b04 	ldr.w	r4, [lr], #4
 8002dac:	f8dc 3000 	ldr.w	r3, [ip]
 8002db0:	fa1f fb84 	uxth.w	fp, r4
 8002db4:	fb08 550b 	mla	r5, r8, fp, r5
 8002db8:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 8002dbc:	0c24      	lsrs	r4, r4, #16
 8002dbe:	fb08 b404 	mla	r4, r8, r4, fp
 8002dc2:	b2ad      	uxth	r5, r5
 8002dc4:	1b55      	subs	r5, r2, r5
 8002dc6:	b2a2      	uxth	r2, r4
 8002dc8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 8002dcc:	fa15 f383 	uxtah	r3, r5, r3
 8002dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002dda:	45f1      	cmp	r9, lr
 8002ddc:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8002de0:	f84c 3b04 	str.w	r3, [ip], #4
 8002de4:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002de8:	d2de      	bcs.n	8002da8 <quorem+0x40>
 8002dea:	9b00      	ldr	r3, [sp, #0]
 8002dec:	f85a 3003 	ldr.w	r3, [sl, r3]
 8002df0:	b98b      	cbnz	r3, 8002e16 <quorem+0xae>
 8002df2:	9a01      	ldr	r2, [sp, #4]
 8002df4:	1f13      	subs	r3, r2, #4
 8002df6:	459a      	cmp	sl, r3
 8002df8:	d20c      	bcs.n	8002e14 <quorem+0xac>
 8002dfa:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8002dfe:	b94b      	cbnz	r3, 8002e14 <quorem+0xac>
 8002e00:	f1a2 0308 	sub.w	r3, r2, #8
 8002e04:	e002      	b.n	8002e0c <quorem+0xa4>
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	3b04      	subs	r3, #4
 8002e0a:	b91a      	cbnz	r2, 8002e14 <quorem+0xac>
 8002e0c:	459a      	cmp	sl, r3
 8002e0e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8002e12:	d3f8      	bcc.n	8002e06 <quorem+0x9e>
 8002e14:	6107      	str	r7, [r0, #16]
 8002e16:	4604      	mov	r4, r0
 8002e18:	f002 f9a0 	bl	800515c <__mcmp>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	db2d      	blt.n	8002e7c <quorem+0x114>
 8002e20:	f108 0801 	add.w	r8, r8, #1
 8002e24:	4650      	mov	r0, sl
 8002e26:	2300      	movs	r3, #0
 8002e28:	f856 1b04 	ldr.w	r1, [r6], #4
 8002e2c:	6805      	ldr	r5, [r0, #0]
 8002e2e:	b28a      	uxth	r2, r1
 8002e30:	1a9a      	subs	r2, r3, r2
 8002e32:	0c0b      	lsrs	r3, r1, #16
 8002e34:	fa12 f285 	uxtah	r2, r2, r5
 8002e38:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
 8002e3c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8002e40:	b292      	uxth	r2, r2
 8002e42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002e46:	45b1      	cmp	r9, r6
 8002e48:	f840 2b04 	str.w	r2, [r0], #4
 8002e4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8002e50:	d2ea      	bcs.n	8002e28 <quorem+0xc0>
 8002e52:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 8002e56:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 8002e5a:	b97a      	cbnz	r2, 8002e7c <quorem+0x114>
 8002e5c:	1f1a      	subs	r2, r3, #4
 8002e5e:	4592      	cmp	sl, r2
 8002e60:	d20b      	bcs.n	8002e7a <quorem+0x112>
 8002e62:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8002e66:	b942      	cbnz	r2, 8002e7a <quorem+0x112>
 8002e68:	3b08      	subs	r3, #8
 8002e6a:	e002      	b.n	8002e72 <quorem+0x10a>
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	b91a      	cbnz	r2, 8002e7a <quorem+0x112>
 8002e72:	459a      	cmp	sl, r3
 8002e74:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8002e78:	d3f8      	bcc.n	8002e6c <quorem+0x104>
 8002e7a:	6127      	str	r7, [r4, #16]
 8002e7c:	4640      	mov	r0, r8
 8002e7e:	b003      	add	sp, #12
 8002e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e84:	2000      	movs	r0, #0
 8002e86:	b003      	add	sp, #12
 8002e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e8c <_dtoa_r>:
 8002e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e90:	ec55 4b10 	vmov	r4, r5, d0
 8002e94:	b097      	sub	sp, #92	; 0x5c
 8002e96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002e98:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8002e9a:	9103      	str	r1, [sp, #12]
 8002e9c:	4682      	mov	sl, r0
 8002e9e:	920a      	str	r2, [sp, #40]	; 0x28
 8002ea0:	9307      	str	r3, [sp, #28]
 8002ea2:	e9cd 4500 	strd	r4, r5, [sp]
 8002ea6:	2e00      	cmp	r6, #0
 8002ea8:	f000 8336 	beq.w	8003518 <_dtoa_r+0x68c>
 8002eac:	6831      	ldr	r1, [r6, #0]
 8002eae:	b151      	cbz	r1, 8002ec6 <_dtoa_r+0x3a>
 8002eb0:	6872      	ldr	r2, [r6, #4]
 8002eb2:	604a      	str	r2, [r1, #4]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4093      	lsls	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
 8002eba:	f001 feb1 	bl	8004c20 <_Bfree>
 8002ebe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	1e2e      	subs	r6, r5, #0
 8002ec8:	bfb4      	ite	lt
 8002eca:	2301      	movlt	r3, #1
 8002ecc:	2300      	movge	r3, #0
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4b77      	ldr	r3, [pc, #476]	; (80030b0 <_dtoa_r+0x224>)
 8002ed2:	bfbc      	itt	lt
 8002ed4:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 8002ed8:	9601      	strlt	r6, [sp, #4]
 8002eda:	43b3      	bics	r3, r6
 8002edc:	f000 80b0 	beq.w	8003040 <_dtoa_r+0x1b4>
 8002ee0:	ed9d 7b00 	vldr	d7, [sp]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	ec51 0b17 	vmov	r0, r1, d7
 8002eec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002ef0:	f003 fe88 	bl	8006c04 <__aeabi_dcmpeq>
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	b178      	cbz	r0, 8002f18 <_dtoa_r+0x8c>
 8002ef8:	9a07      	ldr	r2, [sp, #28]
 8002efa:	2301      	movs	r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8323 	beq.w	800354c <_dtoa_r+0x6c0>
 8002f06:	4b6b      	ldr	r3, [pc, #428]	; (80030b4 <_dtoa_r+0x228>)
 8002f08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	9802      	ldr	r0, [sp, #8]
 8002f12:	b017      	add	sp, #92	; 0x5c
 8002f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f18:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 8002f1c:	aa14      	add	r2, sp, #80	; 0x50
 8002f1e:	a915      	add	r1, sp, #84	; 0x54
 8002f20:	ec48 7b10 	vmov	d0, r7, r8
 8002f24:	4650      	mov	r0, sl
 8002f26:	f002 fa4d 	bl	80053c4 <__d2b>
 8002f2a:	0d34      	lsrs	r4, r6, #20
 8002f2c:	4683      	mov	fp, r0
 8002f2e:	f040 809d 	bne.w	800306c <_dtoa_r+0x1e0>
 8002f32:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
 8002f36:	442c      	add	r4, r5
 8002f38:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	f340 83cd 	ble.w	80036dc <_dtoa_r+0x850>
 8002f42:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002f46:	409e      	lsls	r6, r3
 8002f48:	9b00      	ldr	r3, [sp, #0]
 8002f4a:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8002f4e:	fa23 f000 	lsr.w	r0, r3, r0
 8002f52:	4330      	orrs	r0, r6
 8002f54:	f003 fb74 	bl	8006640 <__aeabi_ui2d>
 8002f58:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4602      	mov	r2, r0
 8002f60:	3c01      	subs	r4, #1
 8002f62:	910e      	str	r1, [sp, #56]	; 0x38
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <_dtoa_r+0x22c>)
 8002f6c:	f003 fa2a 	bl	80063c4 <__aeabi_dsub>
 8002f70:	a349      	add	r3, pc, #292	; (adr r3, 8003098 <_dtoa_r+0x20c>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f003 fbdd 	bl	8006734 <__aeabi_dmul>
 8002f7a:	a349      	add	r3, pc, #292	; (adr r3, 80030a0 <_dtoa_r+0x214>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f003 fa22 	bl	80063c8 <__adddf3>
 8002f84:	4606      	mov	r6, r0
 8002f86:	4620      	mov	r0, r4
 8002f88:	460f      	mov	r7, r1
 8002f8a:	f003 fb69 	bl	8006660 <__aeabi_i2d>
 8002f8e:	a346      	add	r3, pc, #280	; (adr r3, 80030a8 <_dtoa_r+0x21c>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f003 fbce 	bl	8006734 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	4639      	mov	r1, r7
 8002fa0:	f003 fa12 	bl	80063c8 <__adddf3>
 8002fa4:	4606      	mov	r6, r0
 8002fa6:	460f      	mov	r7, r1
 8002fa8:	f003 fe74 	bl	8006c94 <__aeabi_d2iz>
 8002fac:	2200      	movs	r2, #0
 8002fae:	4681      	mov	r9, r0
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	4639      	mov	r1, r7
 8002fb6:	f003 fe2f 	bl	8006c18 <__aeabi_dcmplt>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	f040 82b9 	bne.w	8003532 <_dtoa_r+0x6a6>
 8002fc0:	1b2c      	subs	r4, r5, r4
 8002fc2:	f1b9 0f16 	cmp.w	r9, #22
 8002fc6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 8002fca:	f200 8299 	bhi.w	8003500 <_dtoa_r+0x674>
 8002fce:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <_dtoa_r+0x230>)
 8002fd0:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fdc:	f003 fe1c 	bl	8006c18 <__aeabi_dcmplt>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d071      	beq.n	80030c8 <_dtoa_r+0x23c>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f1b8 0f00 	cmp.w	r8, #0
 8002fea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002fee:	930d      	str	r3, [sp, #52]	; 0x34
 8002ff0:	f2c0 828c 	blt.w	800350c <_dtoa_r+0x680>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff8:	f1b9 0f00 	cmp.w	r9, #0
 8002ffc:	da6a      	bge.n	80030d4 <_dtoa_r+0x248>
 8002ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003000:	f8cd 9018 	str.w	r9, [sp, #24]
 8003004:	eba3 0309 	sub.w	r3, r3, r9
 8003008:	9309      	str	r3, [sp, #36]	; 0x24
 800300a:	f1c9 0300 	rsb	r3, r9, #0
 800300e:	930c      	str	r3, [sp, #48]	; 0x30
 8003010:	9b03      	ldr	r3, [sp, #12]
 8003012:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8003016:	2b09      	cmp	r3, #9
 8003018:	f04f 0900 	mov.w	r9, #0
 800301c:	d864      	bhi.n	80030e8 <_dtoa_r+0x25c>
 800301e:	2b05      	cmp	r3, #5
 8003020:	f340 835a 	ble.w	80036d8 <_dtoa_r+0x84c>
 8003024:	3b04      	subs	r3, #4
 8003026:	9303      	str	r3, [sp, #12]
 8003028:	2400      	movs	r4, #0
 800302a:	9b03      	ldr	r3, [sp, #12]
 800302c:	3b02      	subs	r3, #2
 800302e:	2b03      	cmp	r3, #3
 8003030:	f200 8664 	bhi.w	8003cfc <_dtoa_r+0xe70>
 8003034:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003038:	04630466 	.word	0x04630466
 800303c:	0456043e 	.word	0x0456043e
 8003040:	9a07      	ldr	r2, [sp, #28]
 8003042:	f242 730f 	movw	r3, #9999	; 0x270f
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	9b00      	ldr	r3, [sp, #0]
 800304a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800304e:	4333      	orrs	r3, r6
 8003050:	d118      	bne.n	8003084 <_dtoa_r+0x1f8>
 8003052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8660 	beq.w	8003d1a <_dtoa_r+0xe8e>
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <_dtoa_r+0x234>)
 800305c:	9302      	str	r3, [sp, #8]
 800305e:	3308      	adds	r3, #8
 8003060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003062:	9802      	ldr	r0, [sp, #8]
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	b017      	add	sp, #92	; 0x5c
 8003068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800306c:	f3c8 0113 	ubfx	r1, r8, #0, #20
 8003070:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8003074:	950e      	str	r5, [sp, #56]	; 0x38
 8003076:	463a      	mov	r2, r7
 8003078:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800307c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003080:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003082:	e76f      	b.n	8002f64 <_dtoa_r+0xd8>
 8003084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8403 	bne.w	8003892 <_dtoa_r+0xa06>
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <_dtoa_r+0x238>)
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	e73e      	b.n	8002f10 <_dtoa_r+0x84>
 8003092:	bf00      	nop
 8003094:	f3af 8000 	nop.w
 8003098:	636f4361 	.word	0x636f4361
 800309c:	3fd287a7 	.word	0x3fd287a7
 80030a0:	8b60c8b3 	.word	0x8b60c8b3
 80030a4:	3fc68a28 	.word	0x3fc68a28
 80030a8:	509f79fb 	.word	0x509f79fb
 80030ac:	3fd34413 	.word	0x3fd34413
 80030b0:	7ff00000 	.word	0x7ff00000
 80030b4:	080122b1 	.word	0x080122b1
 80030b8:	3ff80000 	.word	0x3ff80000
 80030bc:	08011970 	.word	0x08011970
 80030c0:	080122ec 	.word	0x080122ec
 80030c4:	080122f8 	.word	0x080122f8
 80030c8:	f1b8 0f00 	cmp.w	r8, #0
 80030cc:	f2c0 84a3 	blt.w	8003a16 <_dtoa_r+0xb8a>
 80030d0:	900d      	str	r0, [sp, #52]	; 0x34
 80030d2:	9009      	str	r0, [sp, #36]	; 0x24
 80030d4:	2300      	movs	r3, #0
 80030d6:	930c      	str	r3, [sp, #48]	; 0x30
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	f8cd 9018 	str.w	r9, [sp, #24]
 80030de:	2b09      	cmp	r3, #9
 80030e0:	44c8      	add	r8, r9
 80030e2:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80030e6:	d99a      	bls.n	800301e <_dtoa_r+0x192>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2401      	movs	r4, #1
 80030ec:	9303      	str	r3, [sp, #12]
 80030ee:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030f6:	9308      	str	r3, [sp, #32]
 80030f8:	2100      	movs	r1, #0
 80030fa:	9b08      	ldr	r3, [sp, #32]
 80030fc:	6041      	str	r1, [r0, #4]
 80030fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8003100:	4650      	mov	r0, sl
 8003102:	f001 fd4d 	bl	8004ba0 <_Balloc>
 8003106:	9002      	str	r0, [sp, #8]
 8003108:	2800      	cmp	r0, #0
 800310a:	f000 85ff 	beq.w	8003d0c <_dtoa_r+0xe80>
 800310e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003112:	9a02      	ldr	r2, [sp, #8]
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	9b08      	ldr	r3, [sp, #32]
 8003118:	2b0e      	cmp	r3, #14
 800311a:	f200 810a 	bhi.w	8003332 <_dtoa_r+0x4a6>
 800311e:	2c00      	cmp	r4, #0
 8003120:	f000 8107 	beq.w	8003332 <_dtoa_r+0x4a6>
 8003124:	9906      	ldr	r1, [sp, #24]
 8003126:	2900      	cmp	r1, #0
 8003128:	f340 8477 	ble.w	8003a1a <_dtoa_r+0xb8e>
 800312c:	4bb1      	ldr	r3, [pc, #708]	; (80033f4 <_dtoa_r+0x568>)
 800312e:	f001 020f 	and.w	r2, r1, #15
 8003132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003136:	ed93 7b00 	vldr	d7, [r3]
 800313a:	110c      	asrs	r4, r1, #4
 800313c:	06e2      	lsls	r2, r4, #27
 800313e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003142:	f140 8414 	bpl.w	800396e <_dtoa_r+0xae2>
 8003146:	4bac      	ldr	r3, [pc, #688]	; (80033f8 <_dtoa_r+0x56c>)
 8003148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800314c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003150:	f003 fc1a 	bl	8006988 <__aeabi_ddiv>
 8003154:	e9cd 0100 	strd	r0, r1, [sp]
 8003158:	f004 040f 	and.w	r4, r4, #15
 800315c:	2603      	movs	r6, #3
 800315e:	b17c      	cbz	r4, 8003180 <_dtoa_r+0x2f4>
 8003160:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003164:	4da4      	ldr	r5, [pc, #656]	; (80033f8 <_dtoa_r+0x56c>)
 8003166:	07e3      	lsls	r3, r4, #31
 8003168:	d504      	bpl.n	8003174 <_dtoa_r+0x2e8>
 800316a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800316e:	f003 fae1 	bl	8006734 <__aeabi_dmul>
 8003172:	3601      	adds	r6, #1
 8003174:	1064      	asrs	r4, r4, #1
 8003176:	f105 0508 	add.w	r5, r5, #8
 800317a:	d1f4      	bne.n	8003166 <_dtoa_r+0x2da>
 800317c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003180:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003188:	f003 fbfe 	bl	8006988 <__aeabi_ddiv>
 800318c:	e9cd 0100 	strd	r0, r1, [sp]
 8003190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003192:	b153      	cbz	r3, 80031aa <_dtoa_r+0x31e>
 8003194:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003198:	2200      	movs	r2, #0
 800319a:	4b98      	ldr	r3, [pc, #608]	; (80033fc <_dtoa_r+0x570>)
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f003 fd3a 	bl	8006c18 <__aeabi_dcmplt>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	f040 8535 	bne.w	8003c14 <_dtoa_r+0xd88>
 80031aa:	4630      	mov	r0, r6
 80031ac:	f003 fa58 	bl	8006660 <__aeabi_i2d>
 80031b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031b4:	f003 fabe 	bl	8006734 <__aeabi_dmul>
 80031b8:	4b91      	ldr	r3, [pc, #580]	; (8003400 <_dtoa_r+0x574>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	f003 f904 	bl	80063c8 <__adddf3>
 80031c0:	9b08      	ldr	r3, [sp, #32]
 80031c2:	4604      	mov	r4, r0
 80031c4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8408 	beq.w	80039de <_dtoa_r+0xb52>
 80031ce:	9b06      	ldr	r3, [sp, #24]
 80031d0:	9312      	str	r3, [sp, #72]	; 0x48
 80031d2:	9b08      	ldr	r3, [sp, #32]
 80031d4:	9310      	str	r3, [sp, #64]	; 0x40
 80031d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80031da:	4639      	mov	r1, r7
 80031dc:	4630      	mov	r0, r6
 80031de:	f003 fd59 	bl	8006c94 <__aeabi_d2iz>
 80031e2:	9000      	str	r0, [sp, #0]
 80031e4:	f003 fa3c 	bl	8006660 <__aeabi_i2d>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4630      	mov	r0, r6
 80031ee:	4639      	mov	r1, r7
 80031f0:	f003 f8e8 	bl	80063c4 <__aeabi_dsub>
 80031f4:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <_dtoa_r+0x568>)
 80031f6:	9a00      	ldr	r2, [sp, #0]
 80031f8:	460f      	mov	r7, r1
 80031fa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80031fc:	4606      	mov	r6, r0
 80031fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003202:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003204:	9902      	ldr	r1, [sp, #8]
 8003206:	3230      	adds	r2, #48	; 0x30
 8003208:	e9cd 4500 	strd	r4, r5, [sp]
 800320c:	b2d5      	uxtb	r5, r2
 800320e:	1c4c      	adds	r4, r1, #1
 8003210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003214:	2800      	cmp	r0, #0
 8003216:	f000 84a1 	beq.w	8003b5c <_dtoa_r+0xcd0>
 800321a:	2000      	movs	r0, #0
 800321c:	4979      	ldr	r1, [pc, #484]	; (8003404 <_dtoa_r+0x578>)
 800321e:	f003 fbb3 	bl	8006988 <__aeabi_ddiv>
 8003222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003226:	f003 f8cd 	bl	80063c4 <__aeabi_dsub>
 800322a:	9b02      	ldr	r3, [sp, #8]
 800322c:	4632      	mov	r2, r6
 800322e:	701d      	strb	r5, [r3, #0]
 8003230:	463b      	mov	r3, r7
 8003232:	e9cd 0100 	strd	r0, r1, [sp]
 8003236:	f003 fd0d 	bl	8006c54 <__aeabi_dcmpgt>
 800323a:	2800      	cmp	r0, #0
 800323c:	f040 84de 	bne.w	8003bfc <_dtoa_r+0xd70>
 8003240:	4632      	mov	r2, r6
 8003242:	463b      	mov	r3, r7
 8003244:	2000      	movs	r0, #0
 8003246:	496d      	ldr	r1, [pc, #436]	; (80033fc <_dtoa_r+0x570>)
 8003248:	f003 f8bc 	bl	80063c4 <__aeabi_dsub>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003254:	f003 fcfe 	bl	8006c54 <__aeabi_dcmpgt>
 8003258:	2800      	cmp	r0, #0
 800325a:	f040 853d 	bne.w	8003cd8 <_dtoa_r+0xe4c>
 800325e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003260:	2b01      	cmp	r3, #1
 8003262:	d062      	beq.n	800332a <_dtoa_r+0x49e>
 8003264:	9a02      	ldr	r2, [sp, #8]
 8003266:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800326a:	4413      	add	r3, r2
 800326c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003270:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003274:	f8cd b000 	str.w	fp, [sp]
 8003278:	46d3      	mov	fp, sl
 800327a:	469a      	mov	sl, r3
 800327c:	e00e      	b.n	800329c <_dtoa_r+0x410>
 800327e:	4632      	mov	r2, r6
 8003280:	463b      	mov	r3, r7
 8003282:	2000      	movs	r0, #0
 8003284:	495d      	ldr	r1, [pc, #372]	; (80033fc <_dtoa_r+0x570>)
 8003286:	f003 f89d 	bl	80063c4 <__aeabi_dsub>
 800328a:	4642      	mov	r2, r8
 800328c:	464b      	mov	r3, r9
 800328e:	f003 fcc3 	bl	8006c18 <__aeabi_dcmplt>
 8003292:	2800      	cmp	r0, #0
 8003294:	f040 84fc 	bne.w	8003c90 <_dtoa_r+0xe04>
 8003298:	4554      	cmp	r4, sl
 800329a:	d03f      	beq.n	800331c <_dtoa_r+0x490>
 800329c:	4640      	mov	r0, r8
 800329e:	4649      	mov	r1, r9
 80032a0:	2200      	movs	r2, #0
 80032a2:	4b59      	ldr	r3, [pc, #356]	; (8003408 <_dtoa_r+0x57c>)
 80032a4:	f003 fa46 	bl	8006734 <__aeabi_dmul>
 80032a8:	2200      	movs	r2, #0
 80032aa:	4b57      	ldr	r3, [pc, #348]	; (8003408 <_dtoa_r+0x57c>)
 80032ac:	4680      	mov	r8, r0
 80032ae:	4689      	mov	r9, r1
 80032b0:	4630      	mov	r0, r6
 80032b2:	4639      	mov	r1, r7
 80032b4:	f003 fa3e 	bl	8006734 <__aeabi_dmul>
 80032b8:	460f      	mov	r7, r1
 80032ba:	4606      	mov	r6, r0
 80032bc:	f003 fcea 	bl	8006c94 <__aeabi_d2iz>
 80032c0:	4605      	mov	r5, r0
 80032c2:	f003 f9cd 	bl	8006660 <__aeabi_i2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4630      	mov	r0, r6
 80032cc:	4639      	mov	r1, r7
 80032ce:	f003 f879 	bl	80063c4 <__aeabi_dsub>
 80032d2:	3530      	adds	r5, #48	; 0x30
 80032d4:	b2ed      	uxtb	r5, r5
 80032d6:	f804 5b01 	strb.w	r5, [r4], #1
 80032da:	4642      	mov	r2, r8
 80032dc:	464b      	mov	r3, r9
 80032de:	4606      	mov	r6, r0
 80032e0:	460f      	mov	r7, r1
 80032e2:	f003 fc99 	bl	8006c18 <__aeabi_dcmplt>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d0c9      	beq.n	800327e <_dtoa_r+0x3f2>
 80032ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032ec:	46da      	mov	sl, fp
 80032ee:	3301      	adds	r3, #1
 80032f0:	f8dd b000 	ldr.w	fp, [sp]
 80032f4:	9306      	str	r3, [sp, #24]
 80032f6:	4659      	mov	r1, fp
 80032f8:	4650      	mov	r0, sl
 80032fa:	f001 fc91 	bl	8004c20 <_Bfree>
 80032fe:	2300      	movs	r3, #0
 8003300:	7023      	strb	r3, [r4, #0]
 8003302:	9b07      	ldr	r3, [sp, #28]
 8003304:	461a      	mov	r2, r3
 8003306:	9b06      	ldr	r3, [sp, #24]
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800330c:	2b00      	cmp	r3, #0
 800330e:	f43f adff 	beq.w	8002f10 <_dtoa_r+0x84>
 8003312:	9802      	ldr	r0, [sp, #8]
 8003314:	601c      	str	r4, [r3, #0]
 8003316:	b017      	add	sp, #92	; 0x5c
 8003318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331c:	46da      	mov	sl, fp
 800331e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003322:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8003326:	f8dd b000 	ldr.w	fp, [sp]
 800332a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800332e:	e9cd 3400 	strd	r3, r4, [sp]
 8003332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003334:	2b00      	cmp	r3, #0
 8003336:	f2c0 80c6 	blt.w	80034c6 <_dtoa_r+0x63a>
 800333a:	9a06      	ldr	r2, [sp, #24]
 800333c:	2a0e      	cmp	r2, #14
 800333e:	f300 80c2 	bgt.w	80034c6 <_dtoa_r+0x63a>
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <_dtoa_r+0x568>)
 8003344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800334c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	da17      	bge.n	8003382 <_dtoa_r+0x4f6>
 8003352:	9f08      	ldr	r7, [sp, #32]
 8003354:	2f00      	cmp	r7, #0
 8003356:	dc14      	bgt.n	8003382 <_dtoa_r+0x4f6>
 8003358:	f040 835a 	bne.w	8003a10 <_dtoa_r+0xb84>
 800335c:	2200      	movs	r2, #0
 800335e:	4b2b      	ldr	r3, [pc, #172]	; (800340c <_dtoa_r+0x580>)
 8003360:	4640      	mov	r0, r8
 8003362:	4649      	mov	r1, r9
 8003364:	f003 f9e6 	bl	8006734 <__aeabi_dmul>
 8003368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800336c:	f003 fc68 	bl	8006c40 <__aeabi_dcmpge>
 8003370:	2800      	cmp	r0, #0
 8003372:	f000 83d2 	beq.w	8003b1a <_dtoa_r+0xc8e>
 8003376:	9f08      	ldr	r7, [sp, #32]
 8003378:	463d      	mov	r5, r7
 800337a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800337c:	9c02      	ldr	r4, [sp, #8]
 800337e:	43db      	mvns	r3, r3
 8003380:	e2de      	b.n	8003940 <_dtoa_r+0xab4>
 8003382:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003386:	4642      	mov	r2, r8
 8003388:	464b      	mov	r3, r9
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f003 fafb 	bl	8006988 <__aeabi_ddiv>
 8003392:	f003 fc7f 	bl	8006c94 <__aeabi_d2iz>
 8003396:	4606      	mov	r6, r0
 8003398:	9000      	str	r0, [sp, #0]
 800339a:	f003 f961 	bl	8006660 <__aeabi_i2d>
 800339e:	4642      	mov	r2, r8
 80033a0:	464b      	mov	r3, r9
 80033a2:	f003 f9c7 	bl	8006734 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4620      	mov	r0, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	9c02      	ldr	r4, [sp, #8]
 80033b0:	4635      	mov	r5, r6
 80033b2:	3530      	adds	r5, #48	; 0x30
 80033b4:	f003 f806 	bl	80063c4 <__aeabi_dsub>
 80033b8:	9e06      	ldr	r6, [sp, #24]
 80033ba:	f804 5b01 	strb.w	r5, [r4], #1
 80033be:	9d08      	ldr	r5, [sp, #32]
 80033c0:	3601      	adds	r6, #1
 80033c2:	2d01      	cmp	r5, #1
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	9606      	str	r6, [sp, #24]
 80033ca:	d052      	beq.n	8003472 <_dtoa_r+0x5e6>
 80033cc:	2200      	movs	r2, #0
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <_dtoa_r+0x57c>)
 80033d0:	f003 f9b0 	bl	8006734 <__aeabi_dmul>
 80033d4:	2200      	movs	r2, #0
 80033d6:	2300      	movs	r3, #0
 80033d8:	4606      	mov	r6, r0
 80033da:	460f      	mov	r7, r1
 80033dc:	f003 fc12 	bl	8006c04 <__aeabi_dcmpeq>
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d188      	bne.n	80032f6 <_dtoa_r+0x46a>
 80033e4:	f8cd b000 	str.w	fp, [sp]
 80033e8:	2501      	movs	r5, #1
 80033ea:	f8dd b020 	ldr.w	fp, [sp, #32]
 80033ee:	f8cd a00c 	str.w	sl, [sp, #12]
 80033f2:	e01a      	b.n	800342a <_dtoa_r+0x59e>
 80033f4:	08011970 	.word	0x08011970
 80033f8:	08011a60 	.word	0x08011a60
 80033fc:	3ff00000 	.word	0x3ff00000
 8003400:	401c0000 	.word	0x401c0000
 8003404:	3fe00000 	.word	0x3fe00000
 8003408:	40240000 	.word	0x40240000
 800340c:	40140000 	.word	0x40140000
 8003410:	2200      	movs	r2, #0
 8003412:	4bbf      	ldr	r3, [pc, #764]	; (8003710 <_dtoa_r+0x884>)
 8003414:	f003 f98e 	bl	8006734 <__aeabi_dmul>
 8003418:	2200      	movs	r2, #0
 800341a:	2300      	movs	r3, #0
 800341c:	4606      	mov	r6, r0
 800341e:	460f      	mov	r7, r1
 8003420:	f003 fbf0 	bl	8006c04 <__aeabi_dcmpeq>
 8003424:	2800      	cmp	r0, #0
 8003426:	f040 836d 	bne.w	8003b04 <_dtoa_r+0xc78>
 800342a:	4642      	mov	r2, r8
 800342c:	464b      	mov	r3, r9
 800342e:	4630      	mov	r0, r6
 8003430:	4639      	mov	r1, r7
 8003432:	f003 faa9 	bl	8006988 <__aeabi_ddiv>
 8003436:	f003 fc2d 	bl	8006c94 <__aeabi_d2iz>
 800343a:	4682      	mov	sl, r0
 800343c:	f003 f910 	bl	8006660 <__aeabi_i2d>
 8003440:	4642      	mov	r2, r8
 8003442:	464b      	mov	r3, r9
 8003444:	f003 f976 	bl	8006734 <__aeabi_dmul>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4630      	mov	r0, r6
 800344e:	4639      	mov	r1, r7
 8003450:	f002 ffb8 	bl	80063c4 <__aeabi_dsub>
 8003454:	3501      	adds	r5, #1
 8003456:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800345a:	45ab      	cmp	fp, r5
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	f804 6b01 	strb.w	r6, [r4], #1
 8003464:	d1d4      	bne.n	8003410 <_dtoa_r+0x584>
 8003466:	f8dd b000 	ldr.w	fp, [sp]
 800346a:	f8cd a000 	str.w	sl, [sp]
 800346e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f002 ffa7 	bl	80063c8 <__adddf3>
 800347a:	4642      	mov	r2, r8
 800347c:	464b      	mov	r3, r9
 800347e:	4606      	mov	r6, r0
 8003480:	460f      	mov	r7, r1
 8003482:	f003 fbe7 	bl	8006c54 <__aeabi_dcmpgt>
 8003486:	b960      	cbnz	r0, 80034a2 <_dtoa_r+0x616>
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	4630      	mov	r0, r6
 800348e:	4639      	mov	r1, r7
 8003490:	f003 fbb8 	bl	8006c04 <__aeabi_dcmpeq>
 8003494:	2800      	cmp	r0, #0
 8003496:	f43f af2e 	beq.w	80032f6 <_dtoa_r+0x46a>
 800349a:	9b00      	ldr	r3, [sp, #0]
 800349c:	07d9      	lsls	r1, r3, #31
 800349e:	f57f af2a 	bpl.w	80032f6 <_dtoa_r+0x46a>
 80034a2:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 80034a6:	9a02      	ldr	r2, [sp, #8]
 80034a8:	1e63      	subs	r3, r4, #1
 80034aa:	e004      	b.n	80034b6 <_dtoa_r+0x62a>
 80034ac:	429a      	cmp	r2, r3
 80034ae:	f000 83d7 	beq.w	8003c60 <_dtoa_r+0xdd4>
 80034b2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80034b6:	2d39      	cmp	r5, #57	; 0x39
 80034b8:	f103 0401 	add.w	r4, r3, #1
 80034bc:	d0f6      	beq.n	80034ac <_dtoa_r+0x620>
 80034be:	1c6a      	adds	r2, r5, #1
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e717      	b.n	80032f6 <_dtoa_r+0x46a>
 80034c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034c8:	2a00      	cmp	r2, #0
 80034ca:	d045      	beq.n	8003558 <_dtoa_r+0x6cc>
 80034cc:	9a03      	ldr	r2, [sp, #12]
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	f340 8263 	ble.w	800399a <_dtoa_r+0xb0e>
 80034d4:	9b08      	ldr	r3, [sp, #32]
 80034d6:	1e5e      	subs	r6, r3, #1
 80034d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034da:	42b3      	cmp	r3, r6
 80034dc:	f2c0 8241 	blt.w	8003962 <_dtoa_r+0xad6>
 80034e0:	1b9e      	subs	r6, r3, r6
 80034e2:	9b08      	ldr	r3, [sp, #32]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f2c0 8313 	blt.w	8003b10 <_dtoa_r+0xc84>
 80034ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ec:	4614      	mov	r4, r2
 80034ee:	441a      	add	r2, r3
 80034f0:	4498      	add	r8, r3
 80034f2:	9209      	str	r2, [sp, #36]	; 0x24
 80034f4:	2101      	movs	r1, #1
 80034f6:	4650      	mov	r0, sl
 80034f8:	f001 fcae 	bl	8004e58 <__i2b>
 80034fc:	4605      	mov	r5, r0
 80034fe:	e02e      	b.n	800355e <_dtoa_r+0x6d2>
 8003500:	2301      	movs	r3, #1
 8003502:	f1b8 0f00 	cmp.w	r8, #0
 8003506:	930d      	str	r3, [sp, #52]	; 0x34
 8003508:	f6bf ad74 	bge.w	8002ff4 <_dtoa_r+0x168>
 800350c:	f1c4 0301 	rsb	r3, r4, #1
 8003510:	9309      	str	r3, [sp, #36]	; 0x24
 8003512:	f04f 0800 	mov.w	r8, #0
 8003516:	e56f      	b.n	8002ff8 <_dtoa_r+0x16c>
 8003518:	2010      	movs	r0, #16
 800351a:	f001 fabb 	bl	8004a94 <malloc>
 800351e:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8003522:	2800      	cmp	r0, #0
 8003524:	f000 83dd 	beq.w	8003ce2 <_dtoa_r+0xe56>
 8003528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800352c:	6006      	str	r6, [r0, #0]
 800352e:	60c6      	str	r6, [r0, #12]
 8003530:	e4c9      	b.n	8002ec6 <_dtoa_r+0x3a>
 8003532:	4648      	mov	r0, r9
 8003534:	f003 f894 	bl	8006660 <__aeabi_i2d>
 8003538:	4632      	mov	r2, r6
 800353a:	463b      	mov	r3, r7
 800353c:	f003 fb62 	bl	8006c04 <__aeabi_dcmpeq>
 8003540:	2800      	cmp	r0, #0
 8003542:	f47f ad3d 	bne.w	8002fc0 <_dtoa_r+0x134>
 8003546:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800354a:	e539      	b.n	8002fc0 <_dtoa_r+0x134>
 800354c:	4b71      	ldr	r3, [pc, #452]	; (8003714 <_dtoa_r+0x888>)
 800354e:	9302      	str	r3, [sp, #8]
 8003550:	9802      	ldr	r0, [sp, #8]
 8003552:	b017      	add	sp, #92	; 0x5c
 8003554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003558:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800355a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800355c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800355e:	2c00      	cmp	r4, #0
 8003560:	dd0c      	ble.n	800357c <_dtoa_r+0x6f0>
 8003562:	f1b8 0f00 	cmp.w	r8, #0
 8003566:	dd09      	ble.n	800357c <_dtoa_r+0x6f0>
 8003568:	4544      	cmp	r4, r8
 800356a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800356c:	4623      	mov	r3, r4
 800356e:	bfa8      	it	ge
 8003570:	4643      	movge	r3, r8
 8003572:	1ad2      	subs	r2, r2, r3
 8003574:	9209      	str	r2, [sp, #36]	; 0x24
 8003576:	1ae4      	subs	r4, r4, r3
 8003578:	eba8 0803 	sub.w	r8, r8, r3
 800357c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800357e:	b1d3      	cbz	r3, 80035b6 <_dtoa_r+0x72a>
 8003580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 817e 	beq.w	8003884 <_dtoa_r+0x9f8>
 8003588:	2e00      	cmp	r6, #0
 800358a:	dd10      	ble.n	80035ae <_dtoa_r+0x722>
 800358c:	4629      	mov	r1, r5
 800358e:	4632      	mov	r2, r6
 8003590:	4650      	mov	r0, sl
 8003592:	f001 fd1d 	bl	8004fd0 <__pow5mult>
 8003596:	465a      	mov	r2, fp
 8003598:	4601      	mov	r1, r0
 800359a:	4605      	mov	r5, r0
 800359c:	4650      	mov	r0, sl
 800359e:	f001 fc71 	bl	8004e84 <__multiply>
 80035a2:	4659      	mov	r1, fp
 80035a4:	4607      	mov	r7, r0
 80035a6:	4650      	mov	r0, sl
 80035a8:	f001 fb3a 	bl	8004c20 <_Bfree>
 80035ac:	46bb      	mov	fp, r7
 80035ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035b0:	1b9a      	subs	r2, r3, r6
 80035b2:	f040 8168 	bne.w	8003886 <_dtoa_r+0x9fa>
 80035b6:	2101      	movs	r1, #1
 80035b8:	4650      	mov	r0, sl
 80035ba:	f001 fc4d 	bl	8004e58 <__i2b>
 80035be:	f1b9 0f00 	cmp.w	r9, #0
 80035c2:	4607      	mov	r7, r0
 80035c4:	f300 8090 	bgt.w	80036e8 <_dtoa_r+0x85c>
 80035c8:	9b03      	ldr	r3, [sp, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f340 8166 	ble.w	800389c <_dtoa_r+0xa10>
 80035d0:	2600      	movs	r6, #0
 80035d2:	2001      	movs	r0, #1
 80035d4:	f1b9 0f00 	cmp.w	r9, #0
 80035d8:	f040 8091 	bne.w	80036fe <_dtoa_r+0x872>
 80035dc:	4440      	add	r0, r8
 80035de:	f010 001f 	ands.w	r0, r0, #31
 80035e2:	d077      	beq.n	80036d4 <_dtoa_r+0x848>
 80035e4:	f1c0 0320 	rsb	r3, r0, #32
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	f340 839a 	ble.w	8003d22 <_dtoa_r+0xe96>
 80035ee:	f1c0 001c 	rsb	r0, r0, #28
 80035f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f4:	4403      	add	r3, r0
 80035f6:	9309      	str	r3, [sp, #36]	; 0x24
 80035f8:	4404      	add	r4, r0
 80035fa:	4480      	add	r8, r0
 80035fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fe:	2b00      	cmp	r3, #0
 8003600:	dd05      	ble.n	800360e <_dtoa_r+0x782>
 8003602:	4659      	mov	r1, fp
 8003604:	461a      	mov	r2, r3
 8003606:	4650      	mov	r0, sl
 8003608:	f001 fd44 	bl	8005094 <__lshift>
 800360c:	4683      	mov	fp, r0
 800360e:	f1b8 0f00 	cmp.w	r8, #0
 8003612:	dd05      	ble.n	8003620 <_dtoa_r+0x794>
 8003614:	4639      	mov	r1, r7
 8003616:	4642      	mov	r2, r8
 8003618:	4650      	mov	r0, sl
 800361a:	f001 fd3b 	bl	8005094 <__lshift>
 800361e:	4607      	mov	r7, r0
 8003620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 8113 	bne.w	800384e <_dtoa_r+0x9c2>
 8003628:	9b08      	ldr	r3, [sp, #32]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f340 80fa 	ble.w	8003824 <_dtoa_r+0x998>
 8003630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d17e      	bne.n	8003734 <_dtoa_r+0x8a8>
 8003636:	9b06      	ldr	r3, [sp, #24]
 8003638:	3301      	adds	r3, #1
 800363a:	9306      	str	r3, [sp, #24]
 800363c:	9c02      	ldr	r4, [sp, #8]
 800363e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003642:	2601      	movs	r6, #1
 8003644:	e007      	b.n	8003656 <_dtoa_r+0x7ca>
 8003646:	4659      	mov	r1, fp
 8003648:	2300      	movs	r3, #0
 800364a:	220a      	movs	r2, #10
 800364c:	4650      	mov	r0, sl
 800364e:	f001 fb0d 	bl	8004c6c <__multadd>
 8003652:	3601      	adds	r6, #1
 8003654:	4683      	mov	fp, r0
 8003656:	4639      	mov	r1, r7
 8003658:	4658      	mov	r0, fp
 800365a:	f7ff fb85 	bl	8002d68 <quorem>
 800365e:	45b0      	cmp	r8, r6
 8003660:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003664:	f804 0b01 	strb.w	r0, [r4], #1
 8003668:	dced      	bgt.n	8003646 <_dtoa_r+0x7ba>
 800366a:	4603      	mov	r3, r0
 800366c:	f04f 0900 	mov.w	r9, #0
 8003670:	4659      	mov	r1, fp
 8003672:	2201      	movs	r2, #1
 8003674:	4650      	mov	r0, sl
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	f001 fd0c 	bl	8005094 <__lshift>
 800367c:	4639      	mov	r1, r7
 800367e:	4683      	mov	fp, r0
 8003680:	f001 fd6c 	bl	800515c <__mcmp>
 8003684:	2800      	cmp	r0, #0
 8003686:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800368a:	f340 8178 	ble.w	800397e <_dtoa_r+0xaf2>
 800368e:	1e63      	subs	r3, r4, #1
 8003690:	9902      	ldr	r1, [sp, #8]
 8003692:	e004      	b.n	800369e <_dtoa_r+0x812>
 8003694:	4299      	cmp	r1, r3
 8003696:	f000 818d 	beq.w	80039b4 <_dtoa_r+0xb28>
 800369a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800369e:	2a39      	cmp	r2, #57	; 0x39
 80036a0:	f103 0401 	add.w	r4, r3, #1
 80036a4:	d0f6      	beq.n	8003694 <_dtoa_r+0x808>
 80036a6:	3201      	adds	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	4639      	mov	r1, r7
 80036ac:	4650      	mov	r0, sl
 80036ae:	f001 fab7 	bl	8004c20 <_Bfree>
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	f43f ae1f 	beq.w	80032f6 <_dtoa_r+0x46a>
 80036b8:	f1b9 0f00 	cmp.w	r9, #0
 80036bc:	d005      	beq.n	80036ca <_dtoa_r+0x83e>
 80036be:	45a9      	cmp	r9, r5
 80036c0:	d003      	beq.n	80036ca <_dtoa_r+0x83e>
 80036c2:	4649      	mov	r1, r9
 80036c4:	4650      	mov	r0, sl
 80036c6:	f001 faab 	bl	8004c20 <_Bfree>
 80036ca:	4629      	mov	r1, r5
 80036cc:	4650      	mov	r0, sl
 80036ce:	f001 faa7 	bl	8004c20 <_Bfree>
 80036d2:	e610      	b.n	80032f6 <_dtoa_r+0x46a>
 80036d4:	201c      	movs	r0, #28
 80036d6:	e78c      	b.n	80035f2 <_dtoa_r+0x766>
 80036d8:	2401      	movs	r4, #1
 80036da:	e4a6      	b.n	800302a <_dtoa_r+0x19e>
 80036dc:	f1c3 0620 	rsb	r6, r3, #32
 80036e0:	9b00      	ldr	r3, [sp, #0]
 80036e2:	fa03 f006 	lsl.w	r0, r3, r6
 80036e6:	e435      	b.n	8002f54 <_dtoa_r+0xc8>
 80036e8:	4601      	mov	r1, r0
 80036ea:	464a      	mov	r2, r9
 80036ec:	4650      	mov	r0, sl
 80036ee:	f001 fc6f 	bl	8004fd0 <__pow5mult>
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	4607      	mov	r7, r0
 80036f8:	f340 81b9 	ble.w	8003a6e <_dtoa_r+0xbe2>
 80036fc:	2600      	movs	r6, #0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003704:	6918      	ldr	r0, [r3, #16]
 8003706:	f001 fb57 	bl	8004db8 <__hi0bits>
 800370a:	f1c0 0020 	rsb	r0, r0, #32
 800370e:	e765      	b.n	80035dc <_dtoa_r+0x750>
 8003710:	40240000 	.word	0x40240000
 8003714:	080122b0 	.word	0x080122b0
 8003718:	4629      	mov	r1, r5
 800371a:	2300      	movs	r3, #0
 800371c:	220a      	movs	r2, #10
 800371e:	4650      	mov	r0, sl
 8003720:	f001 faa4 	bl	8004c6c <__multadd>
 8003724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003726:	2b00      	cmp	r3, #0
 8003728:	4605      	mov	r5, r0
 800372a:	f340 82cc 	ble.w	8003cc6 <_dtoa_r+0xe3a>
 800372e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003732:	9308      	str	r3, [sp, #32]
 8003734:	2c00      	cmp	r4, #0
 8003736:	f300 810d 	bgt.w	8003954 <_dtoa_r+0xac8>
 800373a:	2e00      	cmp	r6, #0
 800373c:	f040 81cb 	bne.w	8003ad6 <_dtoa_r+0xc4a>
 8003740:	46a8      	mov	r8, r5
 8003742:	9b00      	ldr	r3, [sp, #0]
 8003744:	9903      	ldr	r1, [sp, #12]
 8003746:	9e02      	ldr	r6, [sp, #8]
 8003748:	f003 0201 	and.w	r2, r3, #1
 800374c:	920b      	str	r2, [sp, #44]	; 0x2c
 800374e:	430a      	orrs	r2, r1
 8003750:	920a      	str	r2, [sp, #40]	; 0x28
 8003752:	9a08      	ldr	r2, [sp, #32]
 8003754:	1e73      	subs	r3, r6, #1
 8003756:	441a      	add	r2, r3
 8003758:	9209      	str	r2, [sp, #36]	; 0x24
 800375a:	4639      	mov	r1, r7
 800375c:	4658      	mov	r0, fp
 800375e:	f7ff fb03 	bl	8002d68 <quorem>
 8003762:	4629      	mov	r1, r5
 8003764:	9000      	str	r0, [sp, #0]
 8003766:	4658      	mov	r0, fp
 8003768:	f001 fcf8 	bl	800515c <__mcmp>
 800376c:	4642      	mov	r2, r8
 800376e:	4681      	mov	r9, r0
 8003770:	4639      	mov	r1, r7
 8003772:	4650      	mov	r0, sl
 8003774:	f001 fd0e 	bl	8005194 <__mdiff>
 8003778:	9b00      	ldr	r3, [sp, #0]
 800377a:	68c2      	ldr	r2, [r0, #12]
 800377c:	4604      	mov	r4, r0
 800377e:	3330      	adds	r3, #48	; 0x30
 8003780:	2a00      	cmp	r2, #0
 8003782:	d141      	bne.n	8003808 <_dtoa_r+0x97c>
 8003784:	4601      	mov	r1, r0
 8003786:	4658      	mov	r0, fp
 8003788:	9308      	str	r3, [sp, #32]
 800378a:	f001 fce7 	bl	800515c <__mcmp>
 800378e:	4621      	mov	r1, r4
 8003790:	9004      	str	r0, [sp, #16]
 8003792:	4650      	mov	r0, sl
 8003794:	f001 fa44 	bl	8004c20 <_Bfree>
 8003798:	9a04      	ldr	r2, [sp, #16]
 800379a:	9b08      	ldr	r3, [sp, #32]
 800379c:	b91a      	cbnz	r2, 80037a6 <_dtoa_r+0x91a>
 800379e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80037a0:	2900      	cmp	r1, #0
 80037a2:	f000 827c 	beq.w	8003c9e <_dtoa_r+0xe12>
 80037a6:	f1b9 0f00 	cmp.w	r9, #0
 80037aa:	f106 0401 	add.w	r4, r6, #1
 80037ae:	f2c0 8175 	blt.w	8003a9c <_dtoa_r+0xc10>
 80037b2:	9903      	ldr	r1, [sp, #12]
 80037b4:	ea41 0909 	orr.w	r9, r1, r9
 80037b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037ba:	ea51 0109 	orrs.w	r1, r1, r9
 80037be:	f000 816d 	beq.w	8003a9c <_dtoa_r+0xc10>
 80037c2:	2a00      	cmp	r2, #0
 80037c4:	f300 81ab 	bgt.w	8003b1e <_dtoa_r+0xc92>
 80037c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ca:	7033      	strb	r3, [r6, #0]
 80037cc:	42b2      	cmp	r2, r6
 80037ce:	f000 81b2 	beq.w	8003b36 <_dtoa_r+0xcaa>
 80037d2:	4659      	mov	r1, fp
 80037d4:	2300      	movs	r3, #0
 80037d6:	220a      	movs	r2, #10
 80037d8:	4650      	mov	r0, sl
 80037da:	f001 fa47 	bl	8004c6c <__multadd>
 80037de:	4545      	cmp	r5, r8
 80037e0:	4683      	mov	fp, r0
 80037e2:	4629      	mov	r1, r5
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	f04f 020a 	mov.w	r2, #10
 80037ec:	4650      	mov	r0, sl
 80037ee:	d013      	beq.n	8003818 <_dtoa_r+0x98c>
 80037f0:	f001 fa3c 	bl	8004c6c <__multadd>
 80037f4:	4641      	mov	r1, r8
 80037f6:	4605      	mov	r5, r0
 80037f8:	2300      	movs	r3, #0
 80037fa:	220a      	movs	r2, #10
 80037fc:	4650      	mov	r0, sl
 80037fe:	f001 fa35 	bl	8004c6c <__multadd>
 8003802:	4626      	mov	r6, r4
 8003804:	4680      	mov	r8, r0
 8003806:	e7a8      	b.n	800375a <_dtoa_r+0x8ce>
 8003808:	4601      	mov	r1, r0
 800380a:	4650      	mov	r0, sl
 800380c:	9304      	str	r3, [sp, #16]
 800380e:	f001 fa07 	bl	8004c20 <_Bfree>
 8003812:	2201      	movs	r2, #1
 8003814:	9b04      	ldr	r3, [sp, #16]
 8003816:	e7c6      	b.n	80037a6 <_dtoa_r+0x91a>
 8003818:	f001 fa28 	bl	8004c6c <__multadd>
 800381c:	4626      	mov	r6, r4
 800381e:	4605      	mov	r5, r0
 8003820:	4680      	mov	r8, r0
 8003822:	e79a      	b.n	800375a <_dtoa_r+0x8ce>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	2b02      	cmp	r3, #2
 8003828:	dc73      	bgt.n	8003912 <_dtoa_r+0xa86>
 800382a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d181      	bne.n	8003734 <_dtoa_r+0x8a8>
 8003830:	4639      	mov	r1, r7
 8003832:	4658      	mov	r0, fp
 8003834:	f7ff fa98 	bl	8002d68 <quorem>
 8003838:	9a06      	ldr	r2, [sp, #24]
 800383a:	9c02      	ldr	r4, [sp, #8]
 800383c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003840:	3201      	adds	r2, #1
 8003842:	9206      	str	r2, [sp, #24]
 8003844:	f804 3b01 	strb.w	r3, [r4], #1
 8003848:	f04f 0900 	mov.w	r9, #0
 800384c:	e710      	b.n	8003670 <_dtoa_r+0x7e4>
 800384e:	4639      	mov	r1, r7
 8003850:	4658      	mov	r0, fp
 8003852:	f001 fc83 	bl	800515c <__mcmp>
 8003856:	2800      	cmp	r0, #0
 8003858:	f6bf aee6 	bge.w	8003628 <_dtoa_r+0x79c>
 800385c:	4659      	mov	r1, fp
 800385e:	2300      	movs	r3, #0
 8003860:	220a      	movs	r2, #10
 8003862:	4650      	mov	r0, sl
 8003864:	f001 fa02 	bl	8004c6c <__multadd>
 8003868:	9b06      	ldr	r3, [sp, #24]
 800386a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800386e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003870:	4683      	mov	fp, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	f47f af50 	bne.w	8003718 <_dtoa_r+0x88c>
 8003878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800387a:	2b00      	cmp	r3, #0
 800387c:	f340 821c 	ble.w	8003cb8 <_dtoa_r+0xe2c>
 8003880:	9308      	str	r3, [sp, #32]
 8003882:	e6db      	b.n	800363c <_dtoa_r+0x7b0>
 8003884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003886:	4659      	mov	r1, fp
 8003888:	4650      	mov	r0, sl
 800388a:	f001 fba1 	bl	8004fd0 <__pow5mult>
 800388e:	4683      	mov	fp, r0
 8003890:	e691      	b.n	80035b6 <_dtoa_r+0x72a>
 8003892:	4bac      	ldr	r3, [pc, #688]	; (8003b44 <_dtoa_r+0xcb8>)
 8003894:	9302      	str	r3, [sp, #8]
 8003896:	3303      	adds	r3, #3
 8003898:	f7ff bbe2 	b.w	8003060 <_dtoa_r+0x1d4>
 800389c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80038a0:	2900      	cmp	r1, #0
 80038a2:	f47f ae95 	bne.w	80035d0 <_dtoa_r+0x744>
 80038a6:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80ea 	beq.w	8003a84 <_dtoa_r+0xbf8>
 80038b0:	9e00      	ldr	r6, [sp, #0]
 80038b2:	e68e      	b.n	80035d2 <_dtoa_r+0x746>
 80038b4:	2301      	movs	r3, #1
 80038b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80038b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	dd5a      	ble.n	8003974 <_dtoa_r+0xae8>
 80038be:	950f      	str	r5, [sp, #60]	; 0x3c
 80038c0:	9508      	str	r5, [sp, #32]
 80038c2:	2100      	movs	r1, #0
 80038c4:	2d17      	cmp	r5, #23
 80038c6:	6041      	str	r1, [r0, #4]
 80038c8:	f77f ac1a 	ble.w	8003100 <_dtoa_r+0x274>
 80038cc:	2201      	movs	r2, #1
 80038ce:	2304      	movs	r3, #4
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	f103 0614 	add.w	r6, r3, #20
 80038d6:	42ae      	cmp	r6, r5
 80038d8:	4611      	mov	r1, r2
 80038da:	f102 0201 	add.w	r2, r2, #1
 80038de:	d9f7      	bls.n	80038d0 <_dtoa_r+0xa44>
 80038e0:	6041      	str	r1, [r0, #4]
 80038e2:	e40d      	b.n	8003100 <_dtoa_r+0x274>
 80038e4:	2301      	movs	r3, #1
 80038e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80038e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ea:	9a06      	ldr	r2, [sp, #24]
 80038ec:	4413      	add	r3, r2
 80038ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80038f0:	3301      	adds	r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	461d      	mov	r5, r3
 80038f6:	9308      	str	r3, [sp, #32]
 80038f8:	bfb8      	it	lt
 80038fa:	2501      	movlt	r5, #1
 80038fc:	e7e1      	b.n	80038c2 <_dtoa_r+0xa36>
 80038fe:	2300      	movs	r3, #0
 8003900:	930b      	str	r3, [sp, #44]	; 0x2c
 8003902:	e7f1      	b.n	80038e8 <_dtoa_r+0xa5c>
 8003904:	2300      	movs	r3, #0
 8003906:	930b      	str	r3, [sp, #44]	; 0x2c
 8003908:	e7d6      	b.n	80038b8 <_dtoa_r+0xa2c>
 800390a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800390c:	9308      	str	r3, [sp, #32]
 800390e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003912:	9b08      	ldr	r3, [sp, #32]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f47f ad30 	bne.w	800337a <_dtoa_r+0x4ee>
 800391a:	4639      	mov	r1, r7
 800391c:	2205      	movs	r2, #5
 800391e:	4650      	mov	r0, sl
 8003920:	f001 f9a4 	bl	8004c6c <__multadd>
 8003924:	4601      	mov	r1, r0
 8003926:	4607      	mov	r7, r0
 8003928:	4658      	mov	r0, fp
 800392a:	f001 fc17 	bl	800515c <__mcmp>
 800392e:	2800      	cmp	r0, #0
 8003930:	f77f ad23 	ble.w	800337a <_dtoa_r+0x4ee>
 8003934:	9c02      	ldr	r4, [sp, #8]
 8003936:	9b06      	ldr	r3, [sp, #24]
 8003938:	2231      	movs	r2, #49	; 0x31
 800393a:	f804 2b01 	strb.w	r2, [r4], #1
 800393e:	3301      	adds	r3, #1
 8003940:	3301      	adds	r3, #1
 8003942:	4639      	mov	r1, r7
 8003944:	4650      	mov	r0, sl
 8003946:	9306      	str	r3, [sp, #24]
 8003948:	f001 f96a 	bl	8004c20 <_Bfree>
 800394c:	2d00      	cmp	r5, #0
 800394e:	f47f aebc 	bne.w	80036ca <_dtoa_r+0x83e>
 8003952:	e4d0      	b.n	80032f6 <_dtoa_r+0x46a>
 8003954:	4629      	mov	r1, r5
 8003956:	4622      	mov	r2, r4
 8003958:	4650      	mov	r0, sl
 800395a:	f001 fb9b 	bl	8005094 <__lshift>
 800395e:	4605      	mov	r5, r0
 8003960:	e6eb      	b.n	800373a <_dtoa_r+0x8ae>
 8003962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003964:	960c      	str	r6, [sp, #48]	; 0x30
 8003966:	1af3      	subs	r3, r6, r3
 8003968:	4499      	add	r9, r3
 800396a:	2600      	movs	r6, #0
 800396c:	e5b9      	b.n	80034e2 <_dtoa_r+0x656>
 800396e:	2602      	movs	r6, #2
 8003970:	f7ff bbf5 	b.w	800315e <_dtoa_r+0x2d2>
 8003974:	2301      	movs	r3, #1
 8003976:	930a      	str	r3, [sp, #40]	; 0x28
 8003978:	9308      	str	r3, [sp, #32]
 800397a:	f7ff bbbd 	b.w	80030f8 <_dtoa_r+0x26c>
 800397e:	d103      	bne.n	8003988 <_dtoa_r+0xafc>
 8003980:	9b00      	ldr	r3, [sp, #0]
 8003982:	07db      	lsls	r3, r3, #31
 8003984:	f53f ae83 	bmi.w	800368e <_dtoa_r+0x802>
 8003988:	1e63      	subs	r3, r4, #1
 800398a:	e001      	b.n	8003990 <_dtoa_r+0xb04>
 800398c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003990:	2a30      	cmp	r2, #48	; 0x30
 8003992:	f103 0401 	add.w	r4, r3, #1
 8003996:	d0f9      	beq.n	800398c <_dtoa_r+0xb00>
 8003998:	e687      	b.n	80036aa <_dtoa_r+0x81e>
 800399a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800399c:	2a00      	cmp	r2, #0
 800399e:	f000 8132 	beq.w	8003c06 <_dtoa_r+0xd7a>
 80039a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80039a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80039aa:	4614      	mov	r4, r2
 80039ac:	441a      	add	r2, r3
 80039ae:	4498      	add	r8, r3
 80039b0:	9209      	str	r2, [sp, #36]	; 0x24
 80039b2:	e59f      	b.n	80034f4 <_dtoa_r+0x668>
 80039b4:	9a06      	ldr	r2, [sp, #24]
 80039b6:	3201      	adds	r2, #1
 80039b8:	9206      	str	r2, [sp, #24]
 80039ba:	9a02      	ldr	r2, [sp, #8]
 80039bc:	2331      	movs	r3, #49	; 0x31
 80039be:	7013      	strb	r3, [r2, #0]
 80039c0:	e673      	b.n	80036aa <_dtoa_r+0x81e>
 80039c2:	4630      	mov	r0, r6
 80039c4:	f002 fe4c 	bl	8006660 <__aeabi_i2d>
 80039c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039cc:	f002 feb2 	bl	8006734 <__aeabi_dmul>
 80039d0:	2200      	movs	r2, #0
 80039d2:	4b5d      	ldr	r3, [pc, #372]	; (8003b48 <_dtoa_r+0xcbc>)
 80039d4:	f002 fcf8 	bl	80063c8 <__adddf3>
 80039d8:	4604      	mov	r4, r0
 80039da:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80039de:	2200      	movs	r2, #0
 80039e0:	4b5a      	ldr	r3, [pc, #360]	; (8003b4c <_dtoa_r+0xcc0>)
 80039e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039e6:	f002 fced 	bl	80063c4 <__aeabi_dsub>
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	4606      	mov	r6, r0
 80039f0:	460f      	mov	r7, r1
 80039f2:	f003 f92f 	bl	8006c54 <__aeabi_dcmpgt>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	f040 808e 	bne.w	8003b18 <_dtoa_r+0xc8c>
 80039fc:	4622      	mov	r2, r4
 80039fe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003a02:	4630      	mov	r0, r6
 8003a04:	4639      	mov	r1, r7
 8003a06:	f003 f907 	bl	8006c18 <__aeabi_dcmplt>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	f43f ac8d 	beq.w	800332a <_dtoa_r+0x49e>
 8003a10:	2700      	movs	r7, #0
 8003a12:	463d      	mov	r5, r7
 8003a14:	e4b1      	b.n	800337a <_dtoa_r+0x4ee>
 8003a16:	900d      	str	r0, [sp, #52]	; 0x34
 8003a18:	e578      	b.n	800350c <_dtoa_r+0x680>
 8003a1a:	f000 80f8 	beq.w	8003c0e <_dtoa_r+0xd82>
 8003a1e:	9b06      	ldr	r3, [sp, #24]
 8003a20:	425c      	negs	r4, r3
 8003a22:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <_dtoa_r+0xcc4>)
 8003a24:	f004 020f 	and.w	r2, r4, #15
 8003a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a34:	f002 fe7e 	bl	8006734 <__aeabi_dmul>
 8003a38:	1124      	asrs	r4, r4, #4
 8003a3a:	e9cd 0100 	strd	r0, r1, [sp]
 8003a3e:	f000 80e6 	beq.w	8003c0e <_dtoa_r+0xd82>
 8003a42:	4d44      	ldr	r5, [pc, #272]	; (8003b54 <_dtoa_r+0xcc8>)
 8003a44:	2300      	movs	r3, #0
 8003a46:	2602      	movs	r6, #2
 8003a48:	07e7      	lsls	r7, r4, #31
 8003a4a:	d505      	bpl.n	8003a58 <_dtoa_r+0xbcc>
 8003a4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a50:	f002 fe70 	bl	8006734 <__aeabi_dmul>
 8003a54:	3601      	adds	r6, #1
 8003a56:	2301      	movs	r3, #1
 8003a58:	1064      	asrs	r4, r4, #1
 8003a5a:	f105 0508 	add.w	r5, r5, #8
 8003a5e:	d1f3      	bne.n	8003a48 <_dtoa_r+0xbbc>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f43f ab95 	beq.w	8003190 <_dtoa_r+0x304>
 8003a66:	e9cd 0100 	strd	r0, r1, [sp]
 8003a6a:	f7ff bb91 	b.w	8003190 <_dtoa_r+0x304>
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f ae43 	bne.w	80036fc <_dtoa_r+0x870>
 8003a76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003a7a:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f47f ae3c 	bne.w	80036fc <_dtoa_r+0x870>
 8003a84:	4e34      	ldr	r6, [pc, #208]	; (8003b58 <_dtoa_r+0xccc>)
 8003a86:	4016      	ands	r6, r2
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	f43f ada2 	beq.w	80035d2 <_dtoa_r+0x746>
 8003a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a90:	3301      	adds	r3, #1
 8003a92:	9309      	str	r3, [sp, #36]	; 0x24
 8003a94:	f108 0801 	add.w	r8, r8, #1
 8003a98:	2601      	movs	r6, #1
 8003a9a:	e59a      	b.n	80035d2 <_dtoa_r+0x746>
 8003a9c:	9906      	ldr	r1, [sp, #24]
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	f101 0101 	add.w	r1, r1, #1
 8003aa4:	9106      	str	r1, [sp, #24]
 8003aa6:	dd12      	ble.n	8003ace <_dtoa_r+0xc42>
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4650      	mov	r0, sl
 8003aae:	9303      	str	r3, [sp, #12]
 8003ab0:	f001 faf0 	bl	8005094 <__lshift>
 8003ab4:	4639      	mov	r1, r7
 8003ab6:	4683      	mov	fp, r0
 8003ab8:	f001 fb50 	bl	800515c <__mcmp>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	f340 80e0 	ble.w	8003c84 <_dtoa_r+0xdf8>
 8003ac4:	2b39      	cmp	r3, #57	; 0x39
 8003ac6:	f000 80d2 	beq.w	8003c6e <_dtoa_r+0xde2>
 8003aca:	9b00      	ldr	r3, [sp, #0]
 8003acc:	3331      	adds	r3, #49	; 0x31
 8003ace:	46a9      	mov	r9, r5
 8003ad0:	7033      	strb	r3, [r6, #0]
 8003ad2:	4645      	mov	r5, r8
 8003ad4:	e5e9      	b.n	80036aa <_dtoa_r+0x81e>
 8003ad6:	6869      	ldr	r1, [r5, #4]
 8003ad8:	4650      	mov	r0, sl
 8003ada:	f001 f861 	bl	8004ba0 <_Balloc>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	f000 8104 	beq.w	8003cee <_dtoa_r+0xe62>
 8003ae6:	692b      	ldr	r3, [r5, #16]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	f105 010c 	add.w	r1, r5, #12
 8003af0:	300c      	adds	r0, #12
 8003af2:	f7fc ffb9 	bl	8000a68 <memcpy>
 8003af6:	4621      	mov	r1, r4
 8003af8:	2201      	movs	r2, #1
 8003afa:	4650      	mov	r0, sl
 8003afc:	f001 faca 	bl	8005094 <__lshift>
 8003b00:	4680      	mov	r8, r0
 8003b02:	e61e      	b.n	8003742 <_dtoa_r+0x8b6>
 8003b04:	f8dd b000 	ldr.w	fp, [sp]
 8003b08:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8003b0c:	f7ff bbf3 	b.w	80032f6 <_dtoa_r+0x46a>
 8003b10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b14:	1a9c      	subs	r4, r3, r2
 8003b16:	e4ed      	b.n	80034f4 <_dtoa_r+0x668>
 8003b18:	2700      	movs	r7, #0
 8003b1a:	463d      	mov	r5, r7
 8003b1c:	e70a      	b.n	8003934 <_dtoa_r+0xaa8>
 8003b1e:	9a06      	ldr	r2, [sp, #24]
 8003b20:	2b39      	cmp	r3, #57	; 0x39
 8003b22:	f102 0201 	add.w	r2, r2, #1
 8003b26:	9206      	str	r2, [sp, #24]
 8003b28:	f000 80a1 	beq.w	8003c6e <_dtoa_r+0xde2>
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	46a9      	mov	r9, r5
 8003b30:	7033      	strb	r3, [r6, #0]
 8003b32:	4645      	mov	r5, r8
 8003b34:	e5b9      	b.n	80036aa <_dtoa_r+0x81e>
 8003b36:	9a06      	ldr	r2, [sp, #24]
 8003b38:	3201      	adds	r2, #1
 8003b3a:	46a9      	mov	r9, r5
 8003b3c:	9206      	str	r2, [sp, #24]
 8003b3e:	4645      	mov	r5, r8
 8003b40:	e596      	b.n	8003670 <_dtoa_r+0x7e4>
 8003b42:	bf00      	nop
 8003b44:	080122f8 	.word	0x080122f8
 8003b48:	401c0000 	.word	0x401c0000
 8003b4c:	40140000 	.word	0x40140000
 8003b50:	08011970 	.word	0x08011970
 8003b54:	08011a60 	.word	0x08011a60
 8003b58:	7ff00000 	.word	0x7ff00000
 8003b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b60:	f002 fde8 	bl	8006734 <__aeabi_dmul>
 8003b64:	9b02      	ldr	r3, [sp, #8]
 8003b66:	701d      	strb	r5, [r3, #0]
 8003b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	e9cd 0100 	strd	r0, r1, [sp]
 8003b70:	d023      	beq.n	8003bba <_dtoa_r+0xd2e>
 8003b72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b74:	9a02      	ldr	r2, [sp, #8]
 8003b76:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8003b7a:	4413      	add	r3, r2
 8003b7c:	46c1      	mov	r9, r8
 8003b7e:	4698      	mov	r8, r3
 8003b80:	2200      	movs	r2, #0
 8003b82:	4b71      	ldr	r3, [pc, #452]	; (8003d48 <_dtoa_r+0xebc>)
 8003b84:	4630      	mov	r0, r6
 8003b86:	4639      	mov	r1, r7
 8003b88:	f002 fdd4 	bl	8006734 <__aeabi_dmul>
 8003b8c:	460f      	mov	r7, r1
 8003b8e:	4606      	mov	r6, r0
 8003b90:	f003 f880 	bl	8006c94 <__aeabi_d2iz>
 8003b94:	4605      	mov	r5, r0
 8003b96:	f002 fd63 	bl	8006660 <__aeabi_i2d>
 8003b9a:	3530      	adds	r5, #48	; 0x30
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	f002 fc0e 	bl	80063c4 <__aeabi_dsub>
 8003ba8:	f804 5b01 	strb.w	r5, [r4], #1
 8003bac:	4544      	cmp	r4, r8
 8003bae:	4606      	mov	r6, r0
 8003bb0:	460f      	mov	r7, r1
 8003bb2:	d1e5      	bne.n	8003b80 <_dtoa_r+0xcf4>
 8003bb4:	46c8      	mov	r8, r9
 8003bb6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003bba:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <_dtoa_r+0xec0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bc2:	f002 fc01 	bl	80063c8 <__adddf3>
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	463b      	mov	r3, r7
 8003bca:	f003 f825 	bl	8006c18 <__aeabi_dcmplt>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d152      	bne.n	8003c78 <_dtoa_r+0xdec>
 8003bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	495c      	ldr	r1, [pc, #368]	; (8003d4c <_dtoa_r+0xec0>)
 8003bda:	f002 fbf3 	bl	80063c4 <__aeabi_dsub>
 8003bde:	4632      	mov	r2, r6
 8003be0:	463b      	mov	r3, r7
 8003be2:	f003 f837 	bl	8006c54 <__aeabi_dcmpgt>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	f43f ab9f 	beq.w	800332a <_dtoa_r+0x49e>
 8003bec:	e000      	b.n	8003bf0 <_dtoa_r+0xd64>
 8003bee:	4614      	mov	r4, r2
 8003bf0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8003bf4:	2b30      	cmp	r3, #48	; 0x30
 8003bf6:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8003bfa:	d0f8      	beq.n	8003bee <_dtoa_r+0xd62>
 8003bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003bfe:	3301      	adds	r3, #1
 8003c00:	9306      	str	r3, [sp, #24]
 8003c02:	f7ff bb78 	b.w	80032f6 <_dtoa_r+0x46a>
 8003c06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c0c:	e6cb      	b.n	80039a6 <_dtoa_r+0xb1a>
 8003c0e:	2602      	movs	r6, #2
 8003c10:	f7ff babe 	b.w	8003190 <_dtoa_r+0x304>
 8003c14:	9b08      	ldr	r3, [sp, #32]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f43f aed3 	beq.w	80039c2 <_dtoa_r+0xb36>
 8003c1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8003c1e:	2f00      	cmp	r7, #0
 8003c20:	f77f ab83 	ble.w	800332a <_dtoa_r+0x49e>
 8003c24:	2200      	movs	r2, #0
 8003c26:	4b48      	ldr	r3, [pc, #288]	; (8003d48 <_dtoa_r+0xebc>)
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f002 fd82 	bl	8006734 <__aeabi_dmul>
 8003c30:	4604      	mov	r4, r0
 8003c32:	460d      	mov	r5, r1
 8003c34:	1c70      	adds	r0, r6, #1
 8003c36:	e9cd 4500 	strd	r4, r5, [sp]
 8003c3a:	f002 fd11 	bl	8006660 <__aeabi_i2d>
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f002 fd77 	bl	8006734 <__aeabi_dmul>
 8003c46:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <_dtoa_r+0xec4>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f002 fbbd 	bl	80063c8 <__adddf3>
 8003c4e:	9b06      	ldr	r3, [sp, #24]
 8003c50:	9710      	str	r7, [sp, #64]	; 0x40
 8003c52:	3b01      	subs	r3, #1
 8003c54:	4604      	mov	r4, r0
 8003c56:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003c5a:	9312      	str	r3, [sp, #72]	; 0x48
 8003c5c:	f7ff babb 	b.w	80031d6 <_dtoa_r+0x34a>
 8003c60:	9a06      	ldr	r2, [sp, #24]
 8003c62:	3201      	adds	r2, #1
 8003c64:	9206      	str	r2, [sp, #24]
 8003c66:	2231      	movs	r2, #49	; 0x31
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	f7ff bb44 	b.w	80032f6 <_dtoa_r+0x46a>
 8003c6e:	2239      	movs	r2, #57	; 0x39
 8003c70:	46a9      	mov	r9, r5
 8003c72:	7032      	strb	r2, [r6, #0]
 8003c74:	4645      	mov	r5, r8
 8003c76:	e50a      	b.n	800368e <_dtoa_r+0x802>
 8003c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	9306      	str	r3, [sp, #24]
 8003c7e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8003c82:	e410      	b.n	80034a6 <_dtoa_r+0x61a>
 8003c84:	f47f af23 	bne.w	8003ace <_dtoa_r+0xc42>
 8003c88:	07da      	lsls	r2, r3, #31
 8003c8a:	f57f af20 	bpl.w	8003ace <_dtoa_r+0xc42>
 8003c8e:	e719      	b.n	8003ac4 <_dtoa_r+0xc38>
 8003c90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c92:	3301      	adds	r3, #1
 8003c94:	46da      	mov	sl, fp
 8003c96:	9306      	str	r3, [sp, #24]
 8003c98:	f8dd b000 	ldr.w	fp, [sp]
 8003c9c:	e403      	b.n	80034a6 <_dtoa_r+0x61a>
 8003c9e:	9a06      	ldr	r2, [sp, #24]
 8003ca0:	2b39      	cmp	r3, #57	; 0x39
 8003ca2:	f102 0201 	add.w	r2, r2, #1
 8003ca6:	9206      	str	r2, [sp, #24]
 8003ca8:	f106 0401 	add.w	r4, r6, #1
 8003cac:	d0df      	beq.n	8003c6e <_dtoa_r+0xde2>
 8003cae:	f1b9 0f00 	cmp.w	r9, #0
 8003cb2:	f73f af0a 	bgt.w	8003aca <_dtoa_r+0xc3e>
 8003cb6:	e70a      	b.n	8003ace <_dtoa_r+0xc42>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	f73f ae25 	bgt.w	800390a <_dtoa_r+0xa7e>
 8003cc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cc4:	e5b4      	b.n	8003830 <_dtoa_r+0x9a4>
 8003cc6:	9b03      	ldr	r3, [sp, #12]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	f73f ae1e 	bgt.w	800390a <_dtoa_r+0xa7e>
 8003cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cd4:	9308      	str	r3, [sp, #32]
 8003cd6:	e52d      	b.n	8003734 <_dtoa_r+0x8a8>
 8003cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cda:	3301      	adds	r3, #1
 8003cdc:	9306      	str	r3, [sp, #24]
 8003cde:	f7ff bbe2 	b.w	80034a6 <_dtoa_r+0x61a>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <_dtoa_r+0xec8>)
 8003ce6:	481c      	ldr	r0, [pc, #112]	; (8003d58 <_dtoa_r+0xecc>)
 8003ce8:	21ea      	movs	r1, #234	; 0xea
 8003cea:	f001 ffd9 	bl	8005ca0 <__assert_func>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <_dtoa_r+0xed0>)
 8003cf2:	4819      	ldr	r0, [pc, #100]	; (8003d58 <_dtoa_r+0xecc>)
 8003cf4:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003cf8:	f001 ffd2 	bl	8005ca0 <__assert_func>
 8003cfc:	2400      	movs	r4, #0
 8003cfe:	6044      	str	r4, [r0, #4]
 8003d00:	4621      	mov	r1, r4
 8003d02:	4650      	mov	r0, sl
 8003d04:	f000 ff4c 	bl	8004ba0 <_Balloc>
 8003d08:	9002      	str	r0, [sp, #8]
 8003d0a:	b978      	cbnz	r0, 8003d2c <_dtoa_r+0xea0>
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <_dtoa_r+0xed0>)
 8003d0e:	4812      	ldr	r0, [pc, #72]	; (8003d58 <_dtoa_r+0xecc>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d16:	f001 ffc3 	bl	8005ca0 <__assert_func>
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <_dtoa_r+0xed4>)
 8003d1c:	9302      	str	r3, [sp, #8]
 8003d1e:	f7ff b8f7 	b.w	8002f10 <_dtoa_r+0x84>
 8003d22:	f43f ac6b 	beq.w	80035fc <_dtoa_r+0x770>
 8003d26:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8003d2a:	e462      	b.n	80035f2 <_dtoa_r+0x766>
 8003d2c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003d30:	9902      	ldr	r1, [sp, #8]
 8003d32:	6019      	str	r1, [r3, #0]
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d38:	2301      	movs	r3, #1
 8003d3a:	9208      	str	r2, [sp, #32]
 8003d3c:	940a      	str	r4, [sp, #40]	; 0x28
 8003d3e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d42:	f7ff baf6 	b.w	8003332 <_dtoa_r+0x4a6>
 8003d46:	bf00      	nop
 8003d48:	40240000 	.word	0x40240000
 8003d4c:	3fe00000 	.word	0x3fe00000
 8003d50:	401c0000 	.word	0x401c0000
 8003d54:	080122fc 	.word	0x080122fc
 8003d58:	08012314 	.word	0x08012314
 8003d5c:	08012348 	.word	0x08012348
 8003d60:	080122ec 	.word	0x080122ec

08003d64 <__sflush_r>:
 8003d64:	898b      	ldrh	r3, [r1, #12]
 8003d66:	071a      	lsls	r2, r3, #28
 8003d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	4680      	mov	r8, r0
 8003d70:	d441      	bmi.n	8003df6 <__sflush_r+0x92>
 8003d72:	684a      	ldr	r2, [r1, #4]
 8003d74:	2a00      	cmp	r2, #0
 8003d76:	dd59      	ble.n	8003e2c <__sflush_r+0xc8>
 8003d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d7a:	2e00      	cmp	r6, #0
 8003d7c:	d053      	beq.n	8003e26 <__sflush_r+0xc2>
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8d8 5000 	ldr.w	r5, [r8]
 8003d84:	6a21      	ldr	r1, [r4, #32]
 8003d86:	f8c8 2000 	str.w	r2, [r8]
 8003d8a:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8003d8e:	d151      	bne.n	8003e34 <__sflush_r+0xd0>
 8003d90:	2301      	movs	r3, #1
 8003d92:	4640      	mov	r0, r8
 8003d94:	47b0      	blx	r6
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	d05f      	beq.n	8003e5a <__sflush_r+0xf6>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d9e:	6a21      	ldr	r1, [r4, #32]
 8003da0:	075f      	lsls	r7, r3, #29
 8003da2:	d505      	bpl.n	8003db0 <__sflush_r+0x4c>
 8003da4:	6862      	ldr	r2, [r4, #4]
 8003da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003da8:	1a80      	subs	r0, r0, r2
 8003daa:	b10b      	cbz	r3, 8003db0 <__sflush_r+0x4c>
 8003dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dae:	1ac0      	subs	r0, r0, r3
 8003db0:	4602      	mov	r2, r0
 8003db2:	2300      	movs	r3, #0
 8003db4:	4640      	mov	r0, r8
 8003db6:	47b0      	blx	r6
 8003db8:	1c46      	adds	r6, r0, #1
 8003dba:	d145      	bne.n	8003e48 <__sflush_r+0xe4>
 8003dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8003dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d055      	beq.n	8003e74 <__sflush_r+0x110>
 8003dc8:	2b1d      	cmp	r3, #29
 8003dca:	d001      	beq.n	8003dd0 <__sflush_r+0x6c>
 8003dcc:	2b16      	cmp	r3, #22
 8003dce:	d15a      	bne.n	8003e86 <__sflush_r+0x122>
 8003dd0:	6923      	ldr	r3, [r4, #16]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	e9c4 3200 	strd	r3, r2, [r4]
 8003dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dda:	f8c8 5000 	str.w	r5, [r8]
 8003dde:	b311      	cbz	r1, 8003e26 <__sflush_r+0xc2>
 8003de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d002      	beq.n	8003dee <__sflush_r+0x8a>
 8003de8:	4640      	mov	r0, r8
 8003dea:	f001 fc03 	bl	80055f4 <_free_r>
 8003dee:	2000      	movs	r0, #0
 8003df0:	6360      	str	r0, [r4, #52]	; 0x34
 8003df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df6:	690e      	ldr	r6, [r1, #16]
 8003df8:	b1ae      	cbz	r6, 8003e26 <__sflush_r+0xc2>
 8003dfa:	680d      	ldr	r5, [r1, #0]
 8003dfc:	600e      	str	r6, [r1, #0]
 8003dfe:	0799      	lsls	r1, r3, #30
 8003e00:	bf0c      	ite	eq
 8003e02:	6963      	ldreq	r3, [r4, #20]
 8003e04:	2300      	movne	r3, #0
 8003e06:	1bad      	subs	r5, r5, r6
 8003e08:	60a3      	str	r3, [r4, #8]
 8003e0a:	e00a      	b.n	8003e22 <__sflush_r+0xbe>
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	4632      	mov	r2, r6
 8003e10:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003e12:	6a21      	ldr	r1, [r4, #32]
 8003e14:	4640      	mov	r0, r8
 8003e16:	47b8      	blx	r7
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	eba5 0500 	sub.w	r5, r5, r0
 8003e1e:	4406      	add	r6, r0
 8003e20:	dd0a      	ble.n	8003e38 <__sflush_r+0xd4>
 8003e22:	2d00      	cmp	r5, #0
 8003e24:	dcf2      	bgt.n	8003e0c <__sflush_r+0xa8>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e2c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003e2e:	2a00      	cmp	r2, #0
 8003e30:	dca2      	bgt.n	8003d78 <__sflush_r+0x14>
 8003e32:	e7f8      	b.n	8003e26 <__sflush_r+0xc2>
 8003e34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e36:	e7b3      	b.n	8003da0 <__sflush_r+0x3c>
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	6022      	str	r2, [r4, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	6062      	str	r2, [r4, #4]
 8003e52:	04da      	lsls	r2, r3, #19
 8003e54:	d5c0      	bpl.n	8003dd8 <__sflush_r+0x74>
 8003e56:	6560      	str	r0, [r4, #84]	; 0x54
 8003e58:	e7be      	b.n	8003dd8 <__sflush_r+0x74>
 8003e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d09b      	beq.n	8003d9a <__sflush_r+0x36>
 8003e62:	2b1d      	cmp	r3, #29
 8003e64:	d00c      	beq.n	8003e80 <__sflush_r+0x11c>
 8003e66:	2b16      	cmp	r3, #22
 8003e68:	d00a      	beq.n	8003e80 <__sflush_r+0x11c>
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	e7d9      	b.n	8003e28 <__sflush_r+0xc4>
 8003e74:	6921      	ldr	r1, [r4, #16]
 8003e76:	e9c4 1300 	strd	r1, r3, [r4]
 8003e7a:	04d3      	lsls	r3, r2, #19
 8003e7c:	d5ac      	bpl.n	8003dd8 <__sflush_r+0x74>
 8003e7e:	e7ea      	b.n	8003e56 <__sflush_r+0xf2>
 8003e80:	f8c8 5000 	str.w	r5, [r8]
 8003e84:	e7cf      	b.n	8003e26 <__sflush_r+0xc2>
 8003e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8a:	81a2      	strh	r2, [r4, #12]
 8003e8c:	e7cc      	b.n	8003e28 <__sflush_r+0xc4>
 8003e8e:	bf00      	nop

08003e90 <_fflush_r>:
 8003e90:	690b      	ldr	r3, [r1, #16]
 8003e92:	b323      	cbz	r3, 8003ede <_fflush_r+0x4e>
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4604      	mov	r4, r0
 8003e98:	b082      	sub	sp, #8
 8003e9a:	b108      	cbz	r0, 8003ea0 <_fflush_r+0x10>
 8003e9c:	6983      	ldr	r3, [r0, #24]
 8003e9e:	b1bb      	cbz	r3, 8003ed0 <_fflush_r+0x40>
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <_fflush_r+0x54>)
 8003ea2:	4299      	cmp	r1, r3
 8003ea4:	d012      	beq.n	8003ecc <_fflush_r+0x3c>
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <_fflush_r+0x58>)
 8003ea8:	4299      	cmp	r1, r3
 8003eaa:	d016      	beq.n	8003eda <_fflush_r+0x4a>
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <_fflush_r+0x5c>)
 8003eae:	4299      	cmp	r1, r3
 8003eb0:	bf08      	it	eq
 8003eb2:	68e1      	ldreq	r1, [r4, #12]
 8003eb4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8003eb8:	b12b      	cbz	r3, 8003ec6 <_fflush_r+0x36>
 8003eba:	4620      	mov	r0, r4
 8003ebc:	b002      	add	sp, #8
 8003ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec2:	f7ff bf4f 	b.w	8003d64 <__sflush_r>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd10      	pop	{r4, pc}
 8003ecc:	6861      	ldr	r1, [r4, #4]
 8003ece:	e7f1      	b.n	8003eb4 <_fflush_r+0x24>
 8003ed0:	9101      	str	r1, [sp, #4]
 8003ed2:	f000 f907 	bl	80040e4 <__sinit>
 8003ed6:	9901      	ldr	r1, [sp, #4]
 8003ed8:	e7e2      	b.n	8003ea0 <_fflush_r+0x10>
 8003eda:	68a1      	ldr	r1, [r4, #8]
 8003edc:	e7ea      	b.n	8003eb4 <_fflush_r+0x24>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	08011834 	.word	0x08011834
 8003ee8:	08011814 	.word	0x08011814
 8003eec:	080117f4 	.word	0x080117f4

08003ef0 <fflush>:
 8003ef0:	b120      	cbz	r0, 8003efc <fflush+0xc>
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <fflush+0x18>)
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	f7ff bfca 	b.w	8003e90 <_fflush_r>
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <fflush+0x1c>)
 8003efe:	4904      	ldr	r1, [pc, #16]	; (8003f10 <fflush+0x20>)
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	f000 b935 	b.w	8004170 <_fwalk_reent>
 8003f06:	bf00      	nop
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	08011698 	.word	0x08011698
 8003f10:	08003e91 	.word	0x08003e91

08003f14 <__fp_lock>:
 8003f14:	2000      	movs	r0, #0
 8003f16:	4770      	bx	lr

08003f18 <_cleanup_r>:
 8003f18:	4901      	ldr	r1, [pc, #4]	; (8003f20 <_cleanup_r+0x8>)
 8003f1a:	f000 b929 	b.w	8004170 <_fwalk_reent>
 8003f1e:	bf00      	nop
 8003f20:	08003e91 	.word	0x08003e91

08003f24 <__fp_unlock>:
 8003f24:	2000      	movs	r0, #0
 8003f26:	4770      	bx	lr

08003f28 <__sfmoreglue>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	1e4a      	subs	r2, r1, #1
 8003f2c:	2568      	movs	r5, #104	; 0x68
 8003f2e:	fb05 f502 	mul.w	r5, r5, r2
 8003f32:	460e      	mov	r6, r1
 8003f34:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f38:	f001 fbb2 	bl	80056a0 <_malloc_r>
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	b140      	cbz	r0, 8003f52 <__sfmoreglue+0x2a>
 8003f40:	2100      	movs	r1, #0
 8003f42:	300c      	adds	r0, #12
 8003f44:	6066      	str	r6, [r4, #4]
 8003f46:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f4a:	6021      	str	r1, [r4, #0]
 8003f4c:	60a0      	str	r0, [r4, #8]
 8003f4e:	f7fc fe25 	bl	8000b9c <memset>
 8003f52:	4620      	mov	r0, r4
 8003f54:	bd70      	pop	{r4, r5, r6, pc}
 8003f56:	bf00      	nop

08003f58 <__sfp>:
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <__sfp+0x7c>)
 8003f5a:	b570      	push	{r4, r5, r6, lr}
 8003f5c:	681d      	ldr	r5, [r3, #0]
 8003f5e:	69ab      	ldr	r3, [r5, #24]
 8003f60:	4606      	mov	r6, r0
 8003f62:	b343      	cbz	r3, 8003fb6 <__sfp+0x5e>
 8003f64:	3548      	adds	r5, #72	; 0x48
 8003f66:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	d505      	bpl.n	8003f7a <__sfp+0x22>
 8003f6e:	e01e      	b.n	8003fae <__sfp+0x56>
 8003f70:	3b01      	subs	r3, #1
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003f78:	d019      	beq.n	8003fae <__sfp+0x56>
 8003f7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d1f6      	bne.n	8003f70 <__sfp+0x18>
 8003f82:	2500      	movs	r5, #0
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <__sfp+0x80>)
 8003f86:	6665      	str	r5, [r4, #100]	; 0x64
 8003f88:	e9c4 5500 	strd	r5, r5, [r4]
 8003f8c:	60a5      	str	r5, [r4, #8]
 8003f8e:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f92:	61a5      	str	r5, [r4, #24]
 8003f94:	4629      	mov	r1, r5
 8003f96:	60e3      	str	r3, [r4, #12]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f9e:	f7fc fdfd 	bl	8000b9c <memset>
 8003fa2:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fa6:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003faa:	4620      	mov	r0, r4
 8003fac:	bd70      	pop	{r4, r5, r6, pc}
 8003fae:	682c      	ldr	r4, [r5, #0]
 8003fb0:	b12c      	cbz	r4, 8003fbe <__sfp+0x66>
 8003fb2:	4625      	mov	r5, r4
 8003fb4:	e7d7      	b.n	8003f66 <__sfp+0xe>
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f000 f810 	bl	8003fdc <__sinit.part.0>
 8003fbc:	e7d2      	b.n	8003f64 <__sfp+0xc>
 8003fbe:	2104      	movs	r1, #4
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f7ff ffb1 	bl	8003f28 <__sfmoreglue>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	6028      	str	r0, [r5, #0]
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d1f1      	bne.n	8003fb2 <__sfp+0x5a>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	6033      	str	r3, [r6, #0]
 8003fd2:	e7ea      	b.n	8003faa <__sfp+0x52>
 8003fd4:	08011698 	.word	0x08011698
 8003fd8:	ffff0001 	.word	0xffff0001

08003fdc <__sinit.part.0>:
 8003fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <__sinit.part.0+0xd4>)
 8003fe2:	4934      	ldr	r1, [pc, #208]	; (80040b4 <__sinit.part.0+0xd8>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	6281      	str	r1, [r0, #40]	; 0x28
 8003fe8:	4290      	cmp	r0, r2
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003ff2:	6503      	str	r3, [r0, #80]	; 0x50
 8003ff4:	bf04      	itt	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	6183      	streq	r3, [r0, #24]
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	f7ff ffac 	bl	8003f58 <__sfp>
 8004000:	6068      	str	r0, [r5, #4]
 8004002:	4628      	mov	r0, r5
 8004004:	f7ff ffa8 	bl	8003f58 <__sfp>
 8004008:	60a8      	str	r0, [r5, #8]
 800400a:	4628      	mov	r0, r5
 800400c:	f7ff ffa4 	bl	8003f58 <__sfp>
 8004010:	686e      	ldr	r6, [r5, #4]
 8004012:	60e8      	str	r0, [r5, #12]
 8004014:	2400      	movs	r4, #0
 8004016:	2304      	movs	r3, #4
 8004018:	60f3      	str	r3, [r6, #12]
 800401a:	6674      	str	r4, [r6, #100]	; 0x64
 800401c:	e9c6 4400 	strd	r4, r4, [r6]
 8004020:	60b4      	str	r4, [r6, #8]
 8004022:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8004026:	61b4      	str	r4, [r6, #24]
 8004028:	4621      	mov	r1, r4
 800402a:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800402e:	2208      	movs	r2, #8
 8004030:	f7fc fdb4 	bl	8000b9c <memset>
 8004034:	f8df b088 	ldr.w	fp, [pc, #136]	; 80040c0 <__sinit.part.0+0xe4>
 8004038:	68af      	ldr	r7, [r5, #8]
 800403a:	f8df a088 	ldr.w	sl, [pc, #136]	; 80040c4 <__sinit.part.0+0xe8>
 800403e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80040c8 <__sinit.part.0+0xec>
 8004042:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80040cc <__sinit.part.0+0xf0>
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <__sinit.part.0+0xdc>)
 8004048:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 800404c:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8004050:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 8004054:	4621      	mov	r1, r4
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	2208      	movs	r2, #8
 800405a:	667c      	str	r4, [r7, #100]	; 0x64
 800405c:	e9c7 4400 	strd	r4, r4, [r7]
 8004060:	60bc      	str	r4, [r7, #8]
 8004062:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8004066:	61bc      	str	r4, [r7, #24]
 8004068:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800406c:	f7fc fd96 	bl	8000b9c <memset>
 8004070:	68ee      	ldr	r6, [r5, #12]
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <__sinit.part.0+0xe0>)
 8004074:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8004078:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 800407c:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
 8004080:	4621      	mov	r1, r4
 8004082:	60f3      	str	r3, [r6, #12]
 8004084:	6674      	str	r4, [r6, #100]	; 0x64
 8004086:	e9c6 4400 	strd	r4, r4, [r6]
 800408a:	60b4      	str	r4, [r6, #8]
 800408c:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8004090:	61b4      	str	r4, [r6, #24]
 8004092:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8004096:	2208      	movs	r2, #8
 8004098:	f7fc fd80 	bl	8000b9c <memset>
 800409c:	2301      	movs	r3, #1
 800409e:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80040a2:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80040a6:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80040aa:	61ab      	str	r3, [r5, #24]
 80040ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b0:	08011698 	.word	0x08011698
 80040b4:	08003f19 	.word	0x08003f19
 80040b8:	00010009 	.word	0x00010009
 80040bc:	00020012 	.word	0x00020012
 80040c0:	08005b11 	.word	0x08005b11
 80040c4:	08005b39 	.word	0x08005b39
 80040c8:	08005b79 	.word	0x08005b79
 80040cc:	08005b99 	.word	0x08005b99

080040d0 <_cleanup>:
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <_cleanup+0xc>)
 80040d2:	4903      	ldr	r1, [pc, #12]	; (80040e0 <_cleanup+0x10>)
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	f000 b84b 	b.w	8004170 <_fwalk_reent>
 80040da:	bf00      	nop
 80040dc:	08011698 	.word	0x08011698
 80040e0:	08003e91 	.word	0x08003e91

080040e4 <__sinit>:
 80040e4:	6983      	ldr	r3, [r0, #24]
 80040e6:	b903      	cbnz	r3, 80040ea <__sinit+0x6>
 80040e8:	e778      	b.n	8003fdc <__sinit.part.0>
 80040ea:	4770      	bx	lr

080040ec <__sfp_lock_acquire>:
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop

080040f0 <__sfp_lock_release>:
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop

080040f4 <__sinit_lock_acquire>:
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop

080040f8 <__sinit_lock_release>:
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop

080040fc <__fp_lock_all>:
 80040fc:	4b02      	ldr	r3, [pc, #8]	; (8004108 <__fp_lock_all+0xc>)
 80040fe:	4903      	ldr	r1, [pc, #12]	; (800410c <__fp_lock_all+0x10>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	f000 b80f 	b.w	8004124 <_fwalk>
 8004106:	bf00      	nop
 8004108:	20000004 	.word	0x20000004
 800410c:	08003f15 	.word	0x08003f15

08004110 <__fp_unlock_all>:
 8004110:	4b02      	ldr	r3, [pc, #8]	; (800411c <__fp_unlock_all+0xc>)
 8004112:	4903      	ldr	r1, [pc, #12]	; (8004120 <__fp_unlock_all+0x10>)
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	f000 b805 	b.w	8004124 <_fwalk>
 800411a:	bf00      	nop
 800411c:	20000004 	.word	0x20000004
 8004120:	08003f25 	.word	0x08003f25

08004124 <_fwalk>:
 8004124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004128:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 800412c:	d01b      	beq.n	8004166 <_fwalk+0x42>
 800412e:	4688      	mov	r8, r1
 8004130:	2600      	movs	r6, #0
 8004132:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8004136:	3d01      	subs	r5, #1
 8004138:	d40f      	bmi.n	800415a <_fwalk+0x36>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004142:	d906      	bls.n	8004152 <_fwalk+0x2e>
 8004144:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004148:	3301      	adds	r3, #1
 800414a:	4620      	mov	r0, r4
 800414c:	d001      	beq.n	8004152 <_fwalk+0x2e>
 800414e:	47c0      	blx	r8
 8004150:	4306      	orrs	r6, r0
 8004152:	1c6b      	adds	r3, r5, #1
 8004154:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004158:	d1ef      	bne.n	800413a <_fwalk+0x16>
 800415a:	683f      	ldr	r7, [r7, #0]
 800415c:	2f00      	cmp	r7, #0
 800415e:	d1e8      	bne.n	8004132 <_fwalk+0xe>
 8004160:	4630      	mov	r0, r6
 8004162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004166:	463e      	mov	r6, r7
 8004168:	4630      	mov	r0, r6
 800416a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416e:	bf00      	nop

08004170 <_fwalk_reent>:
 8004170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004174:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 8004178:	d01f      	beq.n	80041ba <_fwalk_reent+0x4a>
 800417a:	4688      	mov	r8, r1
 800417c:	4606      	mov	r6, r0
 800417e:	f04f 0900 	mov.w	r9, #0
 8004182:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8004186:	3d01      	subs	r5, #1
 8004188:	d411      	bmi.n	80041ae <_fwalk_reent+0x3e>
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	2b01      	cmp	r3, #1
 800418e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004192:	d908      	bls.n	80041a6 <_fwalk_reent+0x36>
 8004194:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004198:	3301      	adds	r3, #1
 800419a:	4621      	mov	r1, r4
 800419c:	4630      	mov	r0, r6
 800419e:	d002      	beq.n	80041a6 <_fwalk_reent+0x36>
 80041a0:	47c0      	blx	r8
 80041a2:	ea49 0900 	orr.w	r9, r9, r0
 80041a6:	1c6b      	adds	r3, r5, #1
 80041a8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80041ac:	d1ed      	bne.n	800418a <_fwalk_reent+0x1a>
 80041ae:	683f      	ldr	r7, [r7, #0]
 80041b0:	2f00      	cmp	r7, #0
 80041b2:	d1e6      	bne.n	8004182 <_fwalk_reent+0x12>
 80041b4:	4648      	mov	r0, r9
 80041b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ba:	46b9      	mov	r9, r7
 80041bc:	4648      	mov	r0, r9
 80041be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c2:	bf00      	nop

080041c4 <rshift>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	6906      	ldr	r6, [r0, #16]
 80041ca:	114d      	asrs	r5, r1, #5
 80041cc:	42ae      	cmp	r6, r5
 80041ce:	dd2e      	ble.n	800422e <rshift+0x6a>
 80041d0:	f100 0714 	add.w	r7, r0, #20
 80041d4:	f011 011f 	ands.w	r1, r1, #31
 80041d8:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 80041dc:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80041e0:	d02b      	beq.n	800423a <rshift+0x76>
 80041e2:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 80041e6:	3304      	adds	r3, #4
 80041e8:	459c      	cmp	ip, r3
 80041ea:	fa22 f401 	lsr.w	r4, r2, r1
 80041ee:	f1c1 0820 	rsb	r8, r1, #32
 80041f2:	d918      	bls.n	8004226 <rshift+0x62>
 80041f4:	46be      	mov	lr, r7
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	fa02 f208 	lsl.w	r2, r2, r8
 80041fc:	4322      	orrs	r2, r4
 80041fe:	f84e 2b04 	str.w	r2, [lr], #4
 8004202:	f853 4b04 	ldr.w	r4, [r3], #4
 8004206:	459c      	cmp	ip, r3
 8004208:	fa24 f401 	lsr.w	r4, r4, r1
 800420c:	d8f3      	bhi.n	80041f6 <rshift+0x32>
 800420e:	1b73      	subs	r3, r6, r5
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3b05      	subs	r3, #5
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3301      	adds	r3, #1
 8004218:	eb07 0583 	add.w	r5, r7, r3, lsl #2
 800421c:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 8004220:	b1cc      	cbz	r4, 8004256 <rshift+0x92>
 8004222:	3504      	adds	r5, #4
 8004224:	e017      	b.n	8004256 <rshift+0x92>
 8004226:	6144      	str	r4, [r0, #20]
 8004228:	463d      	mov	r5, r7
 800422a:	2c00      	cmp	r4, #0
 800422c:	d1f9      	bne.n	8004222 <rshift+0x5e>
 800422e:	2300      	movs	r3, #0
 8004230:	6103      	str	r3, [r0, #16]
 8004232:	2300      	movs	r3, #0
 8004234:	6143      	str	r3, [r0, #20]
 8004236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800423a:	459c      	cmp	ip, r3
 800423c:	bf88      	it	hi
 800423e:	f100 0210 	addhi.w	r2, r0, #16
 8004242:	d9f4      	bls.n	800422e <rshift+0x6a>
 8004244:	f853 1b04 	ldr.w	r1, [r3], #4
 8004248:	f842 1f04 	str.w	r1, [r2, #4]!
 800424c:	459c      	cmp	ip, r3
 800424e:	d8f9      	bhi.n	8004244 <rshift+0x80>
 8004250:	1b75      	subs	r5, r6, r5
 8004252:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004256:	1beb      	subs	r3, r5, r7
 8004258:	109b      	asrs	r3, r3, #2
 800425a:	42bd      	cmp	r5, r7
 800425c:	6103      	str	r3, [r0, #16]
 800425e:	d0e8      	beq.n	8004232 <rshift+0x6e>
 8004260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004264 <__gethex>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	4cbc      	ldr	r4, [pc, #752]	; (800455c <__gethex+0x2f8>)
 800426a:	b08d      	sub	sp, #52	; 0x34
 800426c:	6824      	ldr	r4, [r4, #0]
 800426e:	9008      	str	r0, [sp, #32]
 8004270:	4689      	mov	r9, r1
 8004272:	4620      	mov	r0, r4
 8004274:	9205      	str	r2, [sp, #20]
 8004276:	930a      	str	r3, [sp, #40]	; 0x28
 8004278:	9406      	str	r4, [sp, #24]
 800427a:	f7fd fae1 	bl	8001840 <strlen>
 800427e:	f8d9 3000 	ldr.w	r3, [r9]
 8004282:	9004      	str	r0, [sp, #16]
 8004284:	1821      	adds	r1, r4, r0
 8004286:	789a      	ldrb	r2, [r3, #2]
 8004288:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800428c:	9101      	str	r1, [sp, #4]
 800428e:	2a30      	cmp	r2, #48	; 0x30
 8004290:	f040 81e5 	bne.w	800465e <__gethex+0x3fa>
 8004294:	f06f 0101 	mvn.w	r1, #1
 8004298:	1ac9      	subs	r1, r1, r3
 800429a:	3303      	adds	r3, #3
 800429c:	eb01 0a03 	add.w	sl, r1, r3
 80042a0:	461c      	mov	r4, r3
 80042a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042a6:	2a30      	cmp	r2, #48	; 0x30
 80042a8:	d0f8      	beq.n	800429c <__gethex+0x38>
 80042aa:	4fad      	ldr	r7, [pc, #692]	; (8004560 <__gethex+0x2fc>)
 80042ac:	5cbb      	ldrb	r3, [r7, r2]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80f9 	beq.w	80044a6 <__gethex+0x242>
 80042b4:	7823      	ldrb	r3, [r4, #0]
 80042b6:	f04f 0800 	mov.w	r8, #0
 80042ba:	5cfb      	ldrb	r3, [r7, r3]
 80042bc:	4645      	mov	r5, r8
 80042be:	4626      	mov	r6, r4
 80042c0:	b123      	cbz	r3, 80042cc <__gethex+0x68>
 80042c2:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80042c6:	5cfb      	ldrb	r3, [r7, r3]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1fa      	bne.n	80042c2 <__gethex+0x5e>
 80042cc:	9a04      	ldr	r2, [sp, #16]
 80042ce:	9906      	ldr	r1, [sp, #24]
 80042d0:	4630      	mov	r0, r6
 80042d2:	f001 fc65 	bl	8005ba0 <strncmp>
 80042d6:	9002      	str	r0, [sp, #8]
 80042d8:	2800      	cmp	r0, #0
 80042da:	f000 8099 	beq.w	8004410 <__gethex+0x1ac>
 80042de:	7833      	ldrb	r3, [r6, #0]
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	f040 8198 	bne.w	8004616 <__gethex+0x3b2>
 80042e6:	9502      	str	r5, [sp, #8]
 80042e8:	2b50      	cmp	r3, #80	; 0x50
 80042ea:	f000 809b 	beq.w	8004424 <__gethex+0x1c0>
 80042ee:	2b70      	cmp	r3, #112	; 0x70
 80042f0:	f000 8098 	beq.w	8004424 <__gethex+0x1c0>
 80042f4:	4635      	mov	r5, r6
 80042f6:	f8c9 6000 	str.w	r6, [r9]
 80042fa:	f1b8 0f00 	cmp.w	r8, #0
 80042fe:	f040 80c0 	bne.w	8004482 <__gethex+0x21e>
 8004302:	1b2b      	subs	r3, r5, r4
 8004304:	3b01      	subs	r3, #1
 8004306:	2b07      	cmp	r3, #7
 8004308:	4641      	mov	r1, r8
 800430a:	dd04      	ble.n	8004316 <__gethex+0xb2>
 800430c:	105b      	asrs	r3, r3, #1
 800430e:	2b07      	cmp	r3, #7
 8004310:	f101 0101 	add.w	r1, r1, #1
 8004314:	dcfa      	bgt.n	800430c <__gethex+0xa8>
 8004316:	9808      	ldr	r0, [sp, #32]
 8004318:	f000 fc42 	bl	8004ba0 <_Balloc>
 800431c:	9003      	str	r0, [sp, #12]
 800431e:	2800      	cmp	r0, #0
 8004320:	f000 823f 	beq.w	80047a2 <__gethex+0x53e>
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	42ac      	cmp	r4, r5
 8004328:	f103 0314 	add.w	r3, r3, #20
 800432c:	9309      	str	r3, [sp, #36]	; 0x24
 800432e:	f080 81c5 	bcs.w	80046bc <__gethex+0x458>
 8004332:	469b      	mov	fp, r3
 8004334:	9b04      	ldr	r3, [sp, #16]
 8004336:	2600      	movs	r6, #0
 8004338:	f1c3 0301 	rsb	r3, r3, #1
 800433c:	46b1      	mov	r9, r6
 800433e:	9307      	str	r3, [sp, #28]
 8004340:	e00f      	b.n	8004362 <__gethex+0xfe>
 8004342:	2e20      	cmp	r6, #32
 8004344:	f000 80a6 	beq.w	8004494 <__gethex+0x230>
 8004348:	4632      	mov	r2, r6
 800434a:	3604      	adds	r6, #4
 800434c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004350:	5cfb      	ldrb	r3, [r7, r3]
 8004352:	4655      	mov	r5, sl
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	4093      	lsls	r3, r2
 800435a:	42a5      	cmp	r5, r4
 800435c:	ea49 0903 	orr.w	r9, r9, r3
 8004360:	d918      	bls.n	8004394 <__gethex+0x130>
 8004362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004366:	9a01      	ldr	r2, [sp, #4]
 8004368:	4293      	cmp	r3, r2
 800436a:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 800436e:	f10b 0804 	add.w	r8, fp, #4
 8004372:	d1e6      	bne.n	8004342 <__gethex+0xde>
 8004374:	9b07      	ldr	r3, [sp, #28]
 8004376:	4453      	add	r3, sl
 8004378:	42a3      	cmp	r3, r4
 800437a:	d3e2      	bcc.n	8004342 <__gethex+0xde>
 800437c:	4618      	mov	r0, r3
 800437e:	9a04      	ldr	r2, [sp, #16]
 8004380:	9906      	ldr	r1, [sp, #24]
 8004382:	930b      	str	r3, [sp, #44]	; 0x2c
 8004384:	f001 fc0c 	bl	8005ba0 <strncmp>
 8004388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800438a:	2800      	cmp	r0, #0
 800438c:	d1d9      	bne.n	8004342 <__gethex+0xde>
 800438e:	461d      	mov	r5, r3
 8004390:	42a5      	cmp	r5, r4
 8004392:	d8e6      	bhi.n	8004362 <__gethex+0xfe>
 8004394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004396:	9a03      	ldr	r2, [sp, #12]
 8004398:	f8cb 9000 	str.w	r9, [fp]
 800439c:	eba8 0803 	sub.w	r8, r8, r3
 80043a0:	ea4f 03a8 	mov.w	r3, r8, asr #2
 80043a4:	6113      	str	r3, [r2, #16]
 80043a6:	4648      	mov	r0, r9
 80043a8:	ea4f 1843 	mov.w	r8, r3, lsl #5
 80043ac:	f000 fd04 	bl	8004db8 <__hi0bits>
 80043b0:	9b05      	ldr	r3, [sp, #20]
 80043b2:	681c      	ldr	r4, [r3, #0]
 80043b4:	eba8 0000 	sub.w	r0, r8, r0
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	f300 80ae 	bgt.w	800451a <__gethex+0x2b6>
 80043be:	f2c0 812e 	blt.w	800461e <__gethex+0x3ba>
 80043c2:	2600      	movs	r6, #0
 80043c4:	9b05      	ldr	r3, [sp, #20]
 80043c6:	9a02      	ldr	r2, [sp, #8]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	f2c0 816b 	blt.w	80046a6 <__gethex+0x442>
 80043d0:	9805      	ldr	r0, [sp, #20]
 80043d2:	9a02      	ldr	r2, [sp, #8]
 80043d4:	6843      	ldr	r3, [r0, #4]
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f340 8082 	ble.w	80044e0 <__gethex+0x27c>
 80043dc:	1a9d      	subs	r5, r3, r2
 80043de:	42ac      	cmp	r4, r5
 80043e0:	f300 80c0 	bgt.w	8004564 <__gethex+0x300>
 80043e4:	68c2      	ldr	r2, [r0, #12]
 80043e6:	2a02      	cmp	r2, #2
 80043e8:	f000 819d 	beq.w	8004726 <__gethex+0x4c2>
 80043ec:	2a03      	cmp	r2, #3
 80043ee:	f000 8195 	beq.w	800471c <__gethex+0x4b8>
 80043f2:	2a01      	cmp	r2, #1
 80043f4:	f000 8179 	beq.w	80046ea <__gethex+0x486>
 80043f8:	9808      	ldr	r0, [sp, #32]
 80043fa:	9903      	ldr	r1, [sp, #12]
 80043fc:	f000 fc10 	bl	8004c20 <_Bfree>
 8004400:	2550      	movs	r5, #80	; 0x50
 8004402:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004404:	2300      	movs	r3, #0
 8004406:	4628      	mov	r0, r5
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	b00d      	add	sp, #52	; 0x34
 800440c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004410:	2d00      	cmp	r5, #0
 8004412:	f000 8113 	beq.w	800463c <__gethex+0x3d8>
 8004416:	1bad      	subs	r5, r5, r6
 8004418:	00ab      	lsls	r3, r5, #2
 800441a:	9302      	str	r3, [sp, #8]
 800441c:	7833      	ldrb	r3, [r6, #0]
 800441e:	2b50      	cmp	r3, #80	; 0x50
 8004420:	f47f af65 	bne.w	80042ee <__gethex+0x8a>
 8004424:	7873      	ldrb	r3, [r6, #1]
 8004426:	2b2b      	cmp	r3, #43	; 0x2b
 8004428:	f000 80f3 	beq.w	8004612 <__gethex+0x3ae>
 800442c:	2b2d      	cmp	r3, #45	; 0x2d
 800442e:	d070      	beq.n	8004512 <__gethex+0x2ae>
 8004430:	1c71      	adds	r1, r6, #1
 8004432:	2500      	movs	r5, #0
 8004434:	5cfb      	ldrb	r3, [r7, r3]
 8004436:	1e5a      	subs	r2, r3, #1
 8004438:	2a18      	cmp	r2, #24
 800443a:	f63f af5b 	bhi.w	80042f4 <__gethex+0x90>
 800443e:	784a      	ldrb	r2, [r1, #1]
 8004440:	5cba      	ldrb	r2, [r7, r2]
 8004442:	1e50      	subs	r0, r2, #1
 8004444:	2818      	cmp	r0, #24
 8004446:	f1a3 0310 	sub.w	r3, r3, #16
 800444a:	f101 0101 	add.w	r1, r1, #1
 800444e:	d80b      	bhi.n	8004468 <__gethex+0x204>
 8004450:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004454:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004458:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800445c:	5c3a      	ldrb	r2, [r7, r0]
 800445e:	1e50      	subs	r0, r2, #1
 8004460:	2818      	cmp	r0, #24
 8004462:	f1a3 0310 	sub.w	r3, r3, #16
 8004466:	d9f3      	bls.n	8004450 <__gethex+0x1ec>
 8004468:	b105      	cbz	r5, 800446c <__gethex+0x208>
 800446a:	425b      	negs	r3, r3
 800446c:	9a02      	ldr	r2, [sp, #8]
 800446e:	4635      	mov	r5, r6
 8004470:	441a      	add	r2, r3
 8004472:	460e      	mov	r6, r1
 8004474:	9202      	str	r2, [sp, #8]
 8004476:	f8c9 6000 	str.w	r6, [r9]
 800447a:	f1b8 0f00 	cmp.w	r8, #0
 800447e:	f43f af40 	beq.w	8004302 <__gethex+0x9e>
 8004482:	f1ba 0f00 	cmp.w	sl, #0
 8004486:	bf14      	ite	ne
 8004488:	2500      	movne	r5, #0
 800448a:	2506      	moveq	r5, #6
 800448c:	4628      	mov	r0, r5
 800448e:	b00d      	add	sp, #52	; 0x34
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	465b      	mov	r3, fp
 8004496:	2200      	movs	r2, #0
 8004498:	f843 9b08 	str.w	r9, [r3], #8
 800449c:	46c3      	mov	fp, r8
 800449e:	4691      	mov	r9, r2
 80044a0:	4698      	mov	r8, r3
 80044a2:	2604      	movs	r6, #4
 80044a4:	e752      	b.n	800434c <__gethex+0xe8>
 80044a6:	9d04      	ldr	r5, [sp, #16]
 80044a8:	9906      	ldr	r1, [sp, #24]
 80044aa:	462a      	mov	r2, r5
 80044ac:	4620      	mov	r0, r4
 80044ae:	f001 fb77 	bl	8005ba0 <strncmp>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d174      	bne.n	80045a0 <__gethex+0x33c>
 80044b6:	5d62      	ldrb	r2, [r4, r5]
 80044b8:	5cbb      	ldrb	r3, [r7, r2]
 80044ba:	1966      	adds	r6, r4, r5
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d071      	beq.n	80045a4 <__gethex+0x340>
 80044c0:	2a30      	cmp	r2, #48	; 0x30
 80044c2:	4634      	mov	r4, r6
 80044c4:	d104      	bne.n	80044d0 <__gethex+0x26c>
 80044c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80044ca:	2b30      	cmp	r3, #48	; 0x30
 80044cc:	d0fb      	beq.n	80044c6 <__gethex+0x262>
 80044ce:	5cfb      	ldrb	r3, [r7, r3]
 80044d0:	fab3 f883 	clz	r8, r3
 80044d4:	4635      	mov	r5, r6
 80044d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80044da:	f04f 0a01 	mov.w	sl, #1
 80044de:	e6ee      	b.n	80042be <__gethex+0x5a>
 80044e0:	2501      	movs	r5, #1
 80044e2:	b156      	cbz	r6, 80044fa <__gethex+0x296>
 80044e4:	9b05      	ldr	r3, [sp, #20]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d062      	beq.n	80045b2 <__gethex+0x34e>
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d064      	beq.n	80045ba <__gethex+0x356>
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	f000 8085 	beq.w	8004600 <__gethex+0x39c>
 80044f6:	f045 0510 	orr.w	r5, r5, #16
 80044fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044fc:	461a      	mov	r2, r3
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004504:	461a      	mov	r2, r3
 8004506:	9b02      	ldr	r3, [sp, #8]
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4628      	mov	r0, r5
 800450c:	b00d      	add	sp, #52	; 0x34
 800450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004512:	2501      	movs	r5, #1
 8004514:	78b3      	ldrb	r3, [r6, #2]
 8004516:	1cb1      	adds	r1, r6, #2
 8004518:	e78c      	b.n	8004434 <__gethex+0x1d0>
 800451a:	9f03      	ldr	r7, [sp, #12]
 800451c:	1b05      	subs	r5, r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	4638      	mov	r0, r7
 8004522:	f001 f82d 	bl	8005580 <__any_on>
 8004526:	4606      	mov	r6, r0
 8004528:	b178      	cbz	r0, 800454a <__gethex+0x2e6>
 800452a:	1e6a      	subs	r2, r5, #1
 800452c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800452e:	1151      	asrs	r1, r2, #5
 8004530:	f002 031f 	and.w	r3, r2, #31
 8004534:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8004538:	2601      	movs	r6, #1
 800453a:	fa06 f303 	lsl.w	r3, r6, r3
 800453e:	420b      	tst	r3, r1
 8004540:	d003      	beq.n	800454a <__gethex+0x2e6>
 8004542:	42b2      	cmp	r2, r6
 8004544:	f300 80c8 	bgt.w	80046d8 <__gethex+0x474>
 8004548:	2602      	movs	r6, #2
 800454a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800454e:	4629      	mov	r1, r5
 8004550:	442b      	add	r3, r5
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	f7ff fe36 	bl	80041c4 <rshift>
 8004558:	e734      	b.n	80043c4 <__gethex+0x160>
 800455a:	bf00      	nop
 800455c:	08011954 	.word	0x08011954
 8004560:	08011854 	.word	0x08011854
 8004564:	1e6f      	subs	r7, r5, #1
 8004566:	2e00      	cmp	r6, #0
 8004568:	f040 80a6 	bne.w	80046b8 <__gethex+0x454>
 800456c:	2f00      	cmp	r7, #0
 800456e:	f040 80ad 	bne.w	80046cc <__gethex+0x468>
 8004572:	117b      	asrs	r3, r7, #5
 8004574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004576:	9803      	ldr	r0, [sp, #12]
 8004578:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800457c:	f007 071f 	and.w	r7, r7, #31
 8004580:	2301      	movs	r3, #1
 8004582:	fa03 f707 	lsl.w	r7, r3, r7
 8004586:	4217      	tst	r7, r2
 8004588:	4629      	mov	r1, r5
 800458a:	bf18      	it	ne
 800458c:	f046 0602 	orrne.w	r6, r6, #2
 8004590:	f7ff fe18 	bl	80041c4 <rshift>
 8004594:	9b05      	ldr	r3, [sp, #20]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	9302      	str	r3, [sp, #8]
 800459a:	1b64      	subs	r4, r4, r5
 800459c:	2502      	movs	r5, #2
 800459e:	e7a0      	b.n	80044e2 <__gethex+0x27e>
 80045a0:	7822      	ldrb	r2, [r4, #0]
 80045a2:	4626      	mov	r6, r4
 80045a4:	2a50      	cmp	r2, #80	; 0x50
 80045a6:	d05e      	beq.n	8004666 <__gethex+0x402>
 80045a8:	2a70      	cmp	r2, #112	; 0x70
 80045aa:	d05c      	beq.n	8004666 <__gethex+0x402>
 80045ac:	f8c9 6000 	str.w	r6, [r9]
 80045b0:	e767      	b.n	8004482 <__gethex+0x21e>
 80045b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045b4:	f1c3 0301 	rsb	r3, r3, #1
 80045b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80045ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d09a      	beq.n	80044f6 <__gethex+0x292>
 80045c0:	9b03      	ldr	r3, [sp, #12]
 80045c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80045c6:	691e      	ldr	r6, [r3, #16]
 80045c8:	00b7      	lsls	r7, r6, #2
 80045ca:	eb0c 0007 	add.w	r0, ip, r7
 80045ce:	4663      	mov	r3, ip
 80045d0:	2100      	movs	r1, #0
 80045d2:	e003      	b.n	80045dc <__gethex+0x378>
 80045d4:	4298      	cmp	r0, r3
 80045d6:	f843 1c04 	str.w	r1, [r3, #-4]
 80045da:	d949      	bls.n	8004670 <__gethex+0x40c>
 80045dc:	469e      	mov	lr, r3
 80045de:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80045e6:	d0f5      	beq.n	80045d4 <__gethex+0x370>
 80045e8:	3201      	adds	r2, #1
 80045ea:	2d02      	cmp	r5, #2
 80045ec:	f8ce 2000 	str.w	r2, [lr]
 80045f0:	f000 809e 	beq.w	8004730 <__gethex+0x4cc>
 80045f4:	f014 041f 	ands.w	r4, r4, #31
 80045f8:	f040 80bc 	bne.w	8004774 <__gethex+0x510>
 80045fc:	2521      	movs	r5, #33	; 0x21
 80045fe:	e77c      	b.n	80044fa <__gethex+0x296>
 8004600:	07b2      	lsls	r2, r6, #30
 8004602:	f57f af78 	bpl.w	80044f6 <__gethex+0x292>
 8004606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	431e      	orrs	r6, r3
 800460c:	07f3      	lsls	r3, r6, #31
 800460e:	d4d7      	bmi.n	80045c0 <__gethex+0x35c>
 8004610:	e771      	b.n	80044f6 <__gethex+0x292>
 8004612:	2500      	movs	r5, #0
 8004614:	e77e      	b.n	8004514 <__gethex+0x2b0>
 8004616:	1bad      	subs	r5, r5, r6
 8004618:	00aa      	lsls	r2, r5, #2
 800461a:	9202      	str	r2, [sp, #8]
 800461c:	e664      	b.n	80042e8 <__gethex+0x84>
 800461e:	1a25      	subs	r5, r4, r0
 8004620:	9903      	ldr	r1, [sp, #12]
 8004622:	9808      	ldr	r0, [sp, #32]
 8004624:	462a      	mov	r2, r5
 8004626:	f000 fd35 	bl	8005094 <__lshift>
 800462a:	9b02      	ldr	r3, [sp, #8]
 800462c:	9003      	str	r0, [sp, #12]
 800462e:	1b5b      	subs	r3, r3, r5
 8004630:	9302      	str	r3, [sp, #8]
 8004632:	4603      	mov	r3, r0
 8004634:	3314      	adds	r3, #20
 8004636:	9309      	str	r3, [sp, #36]	; 0x24
 8004638:	2600      	movs	r6, #0
 800463a:	e6c3      	b.n	80043c4 <__gethex+0x160>
 800463c:	9904      	ldr	r1, [sp, #16]
 800463e:	5c73      	ldrb	r3, [r6, r1]
 8004640:	5cfa      	ldrb	r2, [r7, r3]
 8004642:	1871      	adds	r1, r6, r1
 8004644:	460e      	mov	r6, r1
 8004646:	2a00      	cmp	r2, #0
 8004648:	f43f ae4e 	beq.w	80042e8 <__gethex+0x84>
 800464c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8004650:	5cfa      	ldrb	r2, [r7, r3]
 8004652:	2a00      	cmp	r2, #0
 8004654:	d1fa      	bne.n	800464c <__gethex+0x3e8>
 8004656:	1b89      	subs	r1, r1, r6
 8004658:	008a      	lsls	r2, r1, #2
 800465a:	9202      	str	r2, [sp, #8]
 800465c:	e644      	b.n	80042e8 <__gethex+0x84>
 800465e:	1c9c      	adds	r4, r3, #2
 8004660:	f04f 0a00 	mov.w	sl, #0
 8004664:	e621      	b.n	80042aa <__gethex+0x46>
 8004666:	2300      	movs	r3, #0
 8004668:	9302      	str	r3, [sp, #8]
 800466a:	f04f 0801 	mov.w	r8, #1
 800466e:	e6d9      	b.n	8004424 <__gethex+0x1c0>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	429e      	cmp	r6, r3
 8004676:	da62      	bge.n	800473e <__gethex+0x4da>
 8004678:	4633      	mov	r3, r6
 800467a:	9803      	ldr	r0, [sp, #12]
 800467c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8004680:	2101      	movs	r1, #1
 8004682:	3301      	adds	r3, #1
 8004684:	2d02      	cmp	r5, #2
 8004686:	6103      	str	r3, [r0, #16]
 8004688:	6151      	str	r1, [r2, #20]
 800468a:	d051      	beq.n	8004730 <__gethex+0x4cc>
 800468c:	429e      	cmp	r6, r3
 800468e:	dab1      	bge.n	80045f4 <__gethex+0x390>
 8004690:	2101      	movs	r1, #1
 8004692:	9803      	ldr	r0, [sp, #12]
 8004694:	f7ff fd96 	bl	80041c4 <rshift>
 8004698:	9b05      	ldr	r3, [sp, #20]
 800469a:	9a02      	ldr	r2, [sp, #8]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	3201      	adds	r2, #1
 80046a0:	4293      	cmp	r3, r2
 80046a2:	9202      	str	r2, [sp, #8]
 80046a4:	daaa      	bge.n	80045fc <__gethex+0x398>
 80046a6:	9903      	ldr	r1, [sp, #12]
 80046a8:	9808      	ldr	r0, [sp, #32]
 80046aa:	f000 fab9 	bl	8004c20 <_Bfree>
 80046ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80046b0:	2300      	movs	r3, #0
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	25a3      	movs	r5, #163	; 0xa3
 80046b6:	e6e9      	b.n	800448c <__gethex+0x228>
 80046b8:	2601      	movs	r6, #1
 80046ba:	e75a      	b.n	8004572 <__gethex+0x30e>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80046c2:	f103 0818 	add.w	r8, r3, #24
 80046c6:	f04f 0900 	mov.w	r9, #0
 80046ca:	e663      	b.n	8004394 <__gethex+0x130>
 80046cc:	4639      	mov	r1, r7
 80046ce:	9803      	ldr	r0, [sp, #12]
 80046d0:	f000 ff56 	bl	8005580 <__any_on>
 80046d4:	4606      	mov	r6, r0
 80046d6:	e74c      	b.n	8004572 <__gethex+0x30e>
 80046d8:	1ea9      	subs	r1, r5, #2
 80046da:	4638      	mov	r0, r7
 80046dc:	f000 ff50 	bl	8005580 <__any_on>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	f43f af31 	beq.w	8004548 <__gethex+0x2e4>
 80046e6:	2603      	movs	r6, #3
 80046e8:	e72f      	b.n	800454a <__gethex+0x2e6>
 80046ea:	42ac      	cmp	r4, r5
 80046ec:	f47f ae84 	bne.w	80043f8 <__gethex+0x194>
 80046f0:	2c01      	cmp	r4, #1
 80046f2:	d008      	beq.n	8004706 <__gethex+0x4a2>
 80046f4:	1e61      	subs	r1, r4, #1
 80046f6:	9803      	ldr	r0, [sp, #12]
 80046f8:	f000 ff42 	bl	8005580 <__any_on>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f43f ae7b 	beq.w	80043f8 <__gethex+0x194>
 8004702:	9b05      	ldr	r3, [sp, #20]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004708:	600b      	str	r3, [r1, #0]
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800470e:	2201      	movs	r2, #1
 8004710:	611a      	str	r2, [r3, #16]
 8004712:	600a      	str	r2, [r1, #0]
 8004714:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004716:	2562      	movs	r5, #98	; 0x62
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e6b7      	b.n	800448c <__gethex+0x228>
 800471c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800471e:	2a00      	cmp	r2, #0
 8004720:	f43f ae6a 	beq.w	80043f8 <__gethex+0x194>
 8004724:	e7ef      	b.n	8004706 <__gethex+0x4a2>
 8004726:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004728:	2a00      	cmp	r2, #0
 800472a:	f47f ae65 	bne.w	80043f8 <__gethex+0x194>
 800472e:	e7ea      	b.n	8004706 <__gethex+0x4a2>
 8004730:	9b05      	ldr	r3, [sp, #20]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	42a3      	cmp	r3, r4
 8004738:	d027      	beq.n	800478a <__gethex+0x526>
 800473a:	2522      	movs	r5, #34	; 0x22
 800473c:	e6dd      	b.n	80044fa <__gethex+0x296>
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	9808      	ldr	r0, [sp, #32]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	3101      	adds	r1, #1
 8004746:	f000 fa2b 	bl	8004ba0 <_Balloc>
 800474a:	4680      	mov	r8, r0
 800474c:	b378      	cbz	r0, 80047ae <__gethex+0x54a>
 800474e:	9903      	ldr	r1, [sp, #12]
 8004750:	690b      	ldr	r3, [r1, #16]
 8004752:	3302      	adds	r3, #2
 8004754:	009a      	lsls	r2, r3, #2
 8004756:	310c      	adds	r1, #12
 8004758:	300c      	adds	r0, #12
 800475a:	f7fc f985 	bl	8000a68 <memcpy>
 800475e:	9903      	ldr	r1, [sp, #12]
 8004760:	9808      	ldr	r0, [sp, #32]
 8004762:	f000 fa5d 	bl	8004c20 <_Bfree>
 8004766:	f8cd 800c 	str.w	r8, [sp, #12]
 800476a:	f108 0c14 	add.w	ip, r8, #20
 800476e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004772:	e782      	b.n	800467a <__gethex+0x416>
 8004774:	4467      	add	r7, ip
 8004776:	f1c4 0420 	rsb	r4, r4, #32
 800477a:	f857 0c04 	ldr.w	r0, [r7, #-4]
 800477e:	f000 fb1b 	bl	8004db8 <__hi0bits>
 8004782:	42a0      	cmp	r0, r4
 8004784:	f6bf af3a 	bge.w	80045fc <__gethex+0x398>
 8004788:	e782      	b.n	8004690 <__gethex+0x42c>
 800478a:	1163      	asrs	r3, r4, #5
 800478c:	f004 041f 	and.w	r4, r4, #31
 8004790:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8004794:	2301      	movs	r3, #1
 8004796:	40a3      	lsls	r3, r4
 8004798:	4213      	tst	r3, r2
 800479a:	bf0c      	ite	eq
 800479c:	2522      	moveq	r5, #34	; 0x22
 800479e:	2521      	movne	r5, #33	; 0x21
 80047a0:	e6ab      	b.n	80044fa <__gethex+0x296>
 80047a2:	4602      	mov	r2, r0
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <__gethex+0x558>)
 80047a6:	4806      	ldr	r0, [pc, #24]	; (80047c0 <__gethex+0x55c>)
 80047a8:	21de      	movs	r1, #222	; 0xde
 80047aa:	f001 fa79 	bl	8005ca0 <__assert_func>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b02      	ldr	r3, [pc, #8]	; (80047bc <__gethex+0x558>)
 80047b2:	4803      	ldr	r0, [pc, #12]	; (80047c0 <__gethex+0x55c>)
 80047b4:	2184      	movs	r1, #132	; 0x84
 80047b6:	f001 fa73 	bl	8005ca0 <__assert_func>
 80047ba:	bf00      	nop
 80047bc:	08012348 	.word	0x08012348
 80047c0:	0801235c 	.word	0x0801235c

080047c4 <__match>:
 80047c4:	b430      	push	{r4, r5}
 80047c6:	6804      	ldr	r4, [r0, #0]
 80047c8:	3401      	adds	r4, #1
 80047ca:	e008      	b.n	80047de <__match+0x1a>
 80047cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80047d0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 80047d4:	2d19      	cmp	r5, #25
 80047d6:	bf98      	it	ls
 80047d8:	3320      	addls	r3, #32
 80047da:	4293      	cmp	r3, r2
 80047dc:	d107      	bne.n	80047ee <__match+0x2a>
 80047de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d1f2      	bne.n	80047cc <__match+0x8>
 80047e6:	6004      	str	r4, [r0, #0]
 80047e8:	2001      	movs	r0, #1
 80047ea:	bc30      	pop	{r4, r5}
 80047ec:	4770      	bx	lr
 80047ee:	2000      	movs	r0, #0
 80047f0:	bc30      	pop	{r4, r5}
 80047f2:	4770      	bx	lr

080047f4 <__hexnan>:
 80047f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f8:	6809      	ldr	r1, [r1, #0]
 80047fa:	b085      	sub	sp, #20
 80047fc:	114b      	asrs	r3, r1, #5
 80047fe:	f011 011f 	ands.w	r1, r1, #31
 8004802:	9001      	str	r0, [sp, #4]
 8004804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004808:	9103      	str	r1, [sp, #12]
 800480a:	f040 8086 	bne.w	800491a <__hexnan+0x126>
 800480e:	1f1d      	subs	r5, r3, #4
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	9800      	ldr	r0, [sp, #0]
 8004814:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800498c <__hexnan+0x198>
 8004818:	9502      	str	r5, [sp, #8]
 800481a:	2300      	movs	r3, #0
 800481c:	f840 3c04 	str.w	r3, [r0, #-4]
 8004820:	4619      	mov	r1, r3
 8004822:	469a      	mov	sl, r3
 8004824:	461e      	mov	r6, r3
 8004826:	4698      	mov	r8, r3
 8004828:	9b01      	ldr	r3, [sp, #4]
 800482a:	f8d3 e000 	ldr.w	lr, [r3]
 800482e:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004832:	46ac      	mov	ip, r5
 8004834:	462b      	mov	r3, r5
 8004836:	4693      	mov	fp, r2
 8004838:	f10e 0001 	add.w	r0, lr, #1
 800483c:	b1b4      	cbz	r4, 800486c <__hexnan+0x78>
 800483e:	f819 5004 	ldrb.w	r5, [r9, r4]
 8004842:	2d00      	cmp	r5, #0
 8004844:	d14b      	bne.n	80048de <__hexnan+0xea>
 8004846:	2c20      	cmp	r4, #32
 8004848:	f200 808e 	bhi.w	8004968 <__hexnan+0x174>
 800484c:	4556      	cmp	r6, sl
 800484e:	dd06      	ble.n	800485e <__hexnan+0x6a>
 8004850:	4563      	cmp	r3, ip
 8004852:	d201      	bcs.n	8004858 <__hexnan+0x64>
 8004854:	2907      	cmp	r1, #7
 8004856:	dd74      	ble.n	8004942 <__hexnan+0x14e>
 8004858:	455b      	cmp	r3, fp
 800485a:	d855      	bhi.n	8004908 <__hexnan+0x114>
 800485c:	2108      	movs	r1, #8
 800485e:	4686      	mov	lr, r0
 8004860:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004864:	f10e 0001 	add.w	r0, lr, #1
 8004868:	2c00      	cmp	r4, #0
 800486a:	d1e8      	bne.n	800483e <__hexnan+0x4a>
 800486c:	9d02      	ldr	r5, [sp, #8]
 800486e:	465a      	mov	r2, fp
 8004870:	2e00      	cmp	r6, #0
 8004872:	d07d      	beq.n	8004970 <__hexnan+0x17c>
 8004874:	4563      	cmp	r3, ip
 8004876:	d213      	bcs.n	80048a0 <__hexnan+0xac>
 8004878:	2907      	cmp	r1, #7
 800487a:	dc11      	bgt.n	80048a0 <__hexnan+0xac>
 800487c:	f1c1 0108 	rsb	r1, r1, #8
 8004880:	0089      	lsls	r1, r1, #2
 8004882:	681e      	ldr	r6, [r3, #0]
 8004884:	f1c1 0e20 	rsb	lr, r1, #32
 8004888:	4618      	mov	r0, r3
 800488a:	6847      	ldr	r7, [r0, #4]
 800488c:	fa07 f40e 	lsl.w	r4, r7, lr
 8004890:	4334      	orrs	r4, r6
 8004892:	fa27 f601 	lsr.w	r6, r7, r1
 8004896:	6004      	str	r4, [r0, #0]
 8004898:	f840 6f04 	str.w	r6, [r0, #4]!
 800489c:	4584      	cmp	ip, r0
 800489e:	d8f4      	bhi.n	800488a <__hexnan+0x96>
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d93e      	bls.n	8004922 <__hexnan+0x12e>
 80048a4:	4611      	mov	r1, r2
 80048a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80048aa:	f841 0b04 	str.w	r0, [r1], #4
 80048ae:	429d      	cmp	r5, r3
 80048b0:	d2f9      	bcs.n	80048a6 <__hexnan+0xb2>
 80048b2:	2300      	movs	r3, #0
 80048b4:	f841 3b04 	str.w	r3, [r1], #4
 80048b8:	42a9      	cmp	r1, r5
 80048ba:	d9fb      	bls.n	80048b4 <__hexnan+0xc0>
 80048bc:	9b00      	ldr	r3, [sp, #0]
 80048be:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80048c2:	b121      	cbz	r1, 80048ce <__hexnan+0xda>
 80048c4:	e058      	b.n	8004978 <__hexnan+0x184>
 80048c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d154      	bne.n	8004978 <__hexnan+0x184>
 80048ce:	42aa      	cmp	r2, r5
 80048d0:	d1f9      	bne.n	80048c6 <__hexnan+0xd2>
 80048d2:	2301      	movs	r3, #1
 80048d4:	2005      	movs	r0, #5
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	b005      	add	sp, #20
 80048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048de:	3101      	adds	r1, #1
 80048e0:	2908      	cmp	r1, #8
 80048e2:	f106 0601 	add.w	r6, r6, #1
 80048e6:	dc07      	bgt.n	80048f8 <__hexnan+0x104>
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	0112      	lsls	r2, r2, #4
 80048ec:	f005 050f 	and.w	r5, r5, #15
 80048f0:	4315      	orrs	r5, r2
 80048f2:	601d      	str	r5, [r3, #0]
 80048f4:	4686      	mov	lr, r0
 80048f6:	e7b3      	b.n	8004860 <__hexnan+0x6c>
 80048f8:	455b      	cmp	r3, fp
 80048fa:	d9b0      	bls.n	800485e <__hexnan+0x6a>
 80048fc:	f843 8c04 	str.w	r8, [r3, #-4]
 8004900:	2200      	movs	r2, #0
 8004902:	3b04      	subs	r3, #4
 8004904:	2101      	movs	r1, #1
 8004906:	e7f1      	b.n	80048ec <__hexnan+0xf8>
 8004908:	f1a3 0c04 	sub.w	ip, r3, #4
 800490c:	f843 8c04 	str.w	r8, [r3, #-4]
 8004910:	46b2      	mov	sl, r6
 8004912:	4663      	mov	r3, ip
 8004914:	2100      	movs	r1, #0
 8004916:	4686      	mov	lr, r0
 8004918:	e7a2      	b.n	8004860 <__hexnan+0x6c>
 800491a:	1d19      	adds	r1, r3, #4
 800491c:	9100      	str	r1, [sp, #0]
 800491e:	461d      	mov	r5, r3
 8004920:	e777      	b.n	8004812 <__hexnan+0x1e>
 8004922:	9c00      	ldr	r4, [sp, #0]
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0c9      	beq.n	80048c2 <__hexnan+0xce>
 800492e:	f1c3 0320 	rsb	r3, r3, #32
 8004932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004936:	fa20 f303 	lsr.w	r3, r0, r3
 800493a:	4019      	ands	r1, r3
 800493c:	f844 1c04 	str.w	r1, [r4, #-4]
 8004940:	e7bf      	b.n	80048c2 <__hexnan+0xce>
 8004942:	f1c1 0108 	rsb	r1, r1, #8
 8004946:	0089      	lsls	r1, r1, #2
 8004948:	681f      	ldr	r7, [r3, #0]
 800494a:	f1c1 0e20 	rsb	lr, r1, #32
 800494e:	461c      	mov	r4, r3
 8004950:	6865      	ldr	r5, [r4, #4]
 8004952:	fa05 f20e 	lsl.w	r2, r5, lr
 8004956:	433a      	orrs	r2, r7
 8004958:	fa25 f701 	lsr.w	r7, r5, r1
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	f844 7f04 	str.w	r7, [r4, #4]!
 8004962:	45a4      	cmp	ip, r4
 8004964:	d8f4      	bhi.n	8004950 <__hexnan+0x15c>
 8004966:	e777      	b.n	8004858 <__hexnan+0x64>
 8004968:	2c29      	cmp	r4, #41	; 0x29
 800496a:	9d02      	ldr	r5, [sp, #8]
 800496c:	465a      	mov	r2, fp
 800496e:	d007      	beq.n	8004980 <__hexnan+0x18c>
 8004970:	2004      	movs	r0, #4
 8004972:	b005      	add	sp, #20
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004978:	2005      	movs	r0, #5
 800497a:	b005      	add	sp, #20
 800497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004980:	9c01      	ldr	r4, [sp, #4]
 8004982:	f10e 0002 	add.w	r0, lr, #2
 8004986:	6020      	str	r0, [r4, #0]
 8004988:	e772      	b.n	8004870 <__hexnan+0x7c>
 800498a:	bf00      	nop
 800498c:	08011854 	.word	0x08011854

08004990 <__localeconv_l>:
 8004990:	30f0      	adds	r0, #240	; 0xf0
 8004992:	4770      	bx	lr

08004994 <_localeconv_r>:
 8004994:	4800      	ldr	r0, [pc, #0]	; (8004998 <_localeconv_r+0x4>)
 8004996:	4770      	bx	lr
 8004998:	2000015c 	.word	0x2000015c

0800499c <localeconv>:
 800499c:	4800      	ldr	r0, [pc, #0]	; (80049a0 <localeconv+0x4>)
 800499e:	4770      	bx	lr
 80049a0:	2000015c 	.word	0x2000015c

080049a4 <__swhatbuf_r>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	460c      	mov	r4, r1
 80049a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ac:	2900      	cmp	r1, #0
 80049ae:	b096      	sub	sp, #88	; 0x58
 80049b0:	4616      	mov	r6, r2
 80049b2:	461d      	mov	r5, r3
 80049b4:	db13      	blt.n	80049de <__swhatbuf_r+0x3a>
 80049b6:	466a      	mov	r2, sp
 80049b8:	f001 f9ca 	bl	8005d50 <_fstat_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	db0e      	blt.n	80049de <__swhatbuf_r+0x3a>
 80049c0:	9a01      	ldr	r2, [sp, #4]
 80049c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 80049ca:	fab2 f282 	clz	r2, r2
 80049ce:	0952      	lsrs	r2, r2, #5
 80049d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d4:	2000      	movs	r0, #0
 80049d6:	602a      	str	r2, [r5, #0]
 80049d8:	6033      	str	r3, [r6, #0]
 80049da:	b016      	add	sp, #88	; 0x58
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	602a      	str	r2, [r5, #0]
 80049e6:	d504      	bpl.n	80049f2 <__swhatbuf_r+0x4e>
 80049e8:	2340      	movs	r3, #64	; 0x40
 80049ea:	2000      	movs	r0, #0
 80049ec:	6033      	str	r3, [r6, #0]
 80049ee:	b016      	add	sp, #88	; 0x58
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
 80049f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049f6:	2000      	movs	r0, #0
 80049f8:	6033      	str	r3, [r6, #0]
 80049fa:	b016      	add	sp, #88	; 0x58
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
 80049fe:	bf00      	nop

08004a00 <__smakebuf_r>:
 8004a00:	898a      	ldrh	r2, [r1, #12]
 8004a02:	0792      	lsls	r2, r2, #30
 8004a04:	460b      	mov	r3, r1
 8004a06:	d506      	bpl.n	8004a16 <__smakebuf_r+0x16>
 8004a08:	f101 0247 	add.w	r2, r1, #71	; 0x47
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e9c3 2104 	strd	r2, r1, [r3, #16]
 8004a14:	4770      	bx	lr
 8004a16:	b570      	push	{r4, r5, r6, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	ab01      	add	r3, sp, #4
 8004a1c:	466a      	mov	r2, sp
 8004a1e:	460c      	mov	r4, r1
 8004a20:	4606      	mov	r6, r0
 8004a22:	f7ff ffbf 	bl	80049a4 <__swhatbuf_r>
 8004a26:	9900      	ldr	r1, [sp, #0]
 8004a28:	4605      	mov	r5, r0
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f000 fe38 	bl	80056a0 <_malloc_r>
 8004a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a34:	b170      	cbz	r0, 8004a54 <__smakebuf_r+0x54>
 8004a36:	4916      	ldr	r1, [pc, #88]	; (8004a90 <__smakebuf_r+0x90>)
 8004a38:	62b1      	str	r1, [r6, #40]	; 0x28
 8004a3a:	9a01      	ldr	r2, [sp, #4]
 8004a3c:	9900      	ldr	r1, [sp, #0]
 8004a3e:	6020      	str	r0, [r4, #0]
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8004a4a:	b98a      	cbnz	r2, 8004a70 <__smakebuf_r+0x70>
 8004a4c:	432b      	orrs	r3, r5
 8004a4e:	81a3      	strh	r3, [r4, #12]
 8004a50:	b002      	add	sp, #8
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	059a      	lsls	r2, r3, #22
 8004a56:	d4fb      	bmi.n	8004a50 <__smakebuf_r+0x50>
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	2101      	movs	r1, #1
 8004a66:	81a3      	strh	r3, [r4, #12]
 8004a68:	6022      	str	r2, [r4, #0]
 8004a6a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8004a6e:	e7ef      	b.n	8004a50 <__smakebuf_r+0x50>
 8004a70:	4630      	mov	r0, r6
 8004a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a76:	f001 fb03 	bl	8006080 <_isatty_r>
 8004a7a:	b910      	cbnz	r0, 8004a82 <__smakebuf_r+0x82>
 8004a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a80:	e7e4      	b.n	8004a4c <__smakebuf_r+0x4c>
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	f023 0303 	bic.w	r3, r3, #3
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	e7dd      	b.n	8004a4c <__smakebuf_r+0x4c>
 8004a90:	08003f19 	.word	0x08003f19

08004a94 <malloc>:
 8004a94:	4b02      	ldr	r3, [pc, #8]	; (8004aa0 <malloc+0xc>)
 8004a96:	4601      	mov	r1, r0
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	f000 be01 	b.w	80056a0 <_malloc_r>
 8004a9e:	bf00      	nop
 8004aa0:	20000004 	.word	0x20000004

08004aa4 <free>:
 8004aa4:	4b02      	ldr	r3, [pc, #8]	; (8004ab0 <free+0xc>)
 8004aa6:	4601      	mov	r1, r0
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	f000 bda3 	b.w	80055f4 <_free_r>
 8004aae:	bf00      	nop
 8004ab0:	20000004 	.word	0x20000004

08004ab4 <_mbtowc_r>:
 8004ab4:	b410      	push	{r4}
 8004ab6:	4c03      	ldr	r4, [pc, #12]	; (8004ac4 <_mbtowc_r+0x10>)
 8004ab8:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8004abc:	46a4      	mov	ip, r4
 8004abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ac2:	4760      	bx	ip
 8004ac4:	2000006c 	.word	0x2000006c

08004ac8 <__ascii_mbtowc>:
 8004ac8:	b082      	sub	sp, #8
 8004aca:	b149      	cbz	r1, 8004ae0 <__ascii_mbtowc+0x18>
 8004acc:	b15a      	cbz	r2, 8004ae6 <__ascii_mbtowc+0x1e>
 8004ace:	b16b      	cbz	r3, 8004aec <__ascii_mbtowc+0x24>
 8004ad0:	7813      	ldrb	r3, [r2, #0]
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	1c10      	adds	r0, r2, #0
 8004ad8:	bf18      	it	ne
 8004ada:	2001      	movne	r0, #1
 8004adc:	b002      	add	sp, #8
 8004ade:	4770      	bx	lr
 8004ae0:	a901      	add	r1, sp, #4
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	d1f3      	bne.n	8004ace <__ascii_mbtowc+0x6>
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	b002      	add	sp, #8
 8004aea:	4770      	bx	lr
 8004aec:	f06f 0001 	mvn.w	r0, #1
 8004af0:	e7f4      	b.n	8004adc <__ascii_mbtowc+0x14>
 8004af2:	bf00      	nop
	...

08004b00 <memchr>:
 8004b00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004b04:	2a10      	cmp	r2, #16
 8004b06:	db2b      	blt.n	8004b60 <memchr+0x60>
 8004b08:	f010 0f07 	tst.w	r0, #7
 8004b0c:	d008      	beq.n	8004b20 <memchr+0x20>
 8004b0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004b12:	3a01      	subs	r2, #1
 8004b14:	428b      	cmp	r3, r1
 8004b16:	d02d      	beq.n	8004b74 <memchr+0x74>
 8004b18:	f010 0f07 	tst.w	r0, #7
 8004b1c:	b342      	cbz	r2, 8004b70 <memchr+0x70>
 8004b1e:	d1f6      	bne.n	8004b0e <memchr+0xe>
 8004b20:	b4f0      	push	{r4, r5, r6, r7}
 8004b22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004b26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8004b2a:	f022 0407 	bic.w	r4, r2, #7
 8004b2e:	f07f 0700 	mvns.w	r7, #0
 8004b32:	2300      	movs	r3, #0
 8004b34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004b38:	3c08      	subs	r4, #8
 8004b3a:	ea85 0501 	eor.w	r5, r5, r1
 8004b3e:	ea86 0601 	eor.w	r6, r6, r1
 8004b42:	fa85 f547 	uadd8	r5, r5, r7
 8004b46:	faa3 f587 	sel	r5, r3, r7
 8004b4a:	fa86 f647 	uadd8	r6, r6, r7
 8004b4e:	faa5 f687 	sel	r6, r5, r7
 8004b52:	b98e      	cbnz	r6, 8004b78 <memchr+0x78>
 8004b54:	d1ee      	bne.n	8004b34 <memchr+0x34>
 8004b56:	bcf0      	pop	{r4, r5, r6, r7}
 8004b58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004b5c:	f002 0207 	and.w	r2, r2, #7
 8004b60:	b132      	cbz	r2, 8004b70 <memchr+0x70>
 8004b62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004b66:	3a01      	subs	r2, #1
 8004b68:	ea83 0301 	eor.w	r3, r3, r1
 8004b6c:	b113      	cbz	r3, 8004b74 <memchr+0x74>
 8004b6e:	d1f8      	bne.n	8004b62 <memchr+0x62>
 8004b70:	2000      	movs	r0, #0
 8004b72:	4770      	bx	lr
 8004b74:	3801      	subs	r0, #1
 8004b76:	4770      	bx	lr
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	bf06      	itte	eq
 8004b7c:	4635      	moveq	r5, r6
 8004b7e:	3803      	subeq	r0, #3
 8004b80:	3807      	subne	r0, #7
 8004b82:	f015 0f01 	tst.w	r5, #1
 8004b86:	d107      	bne.n	8004b98 <memchr+0x98>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004b8e:	bf02      	ittt	eq
 8004b90:	3001      	addeq	r0, #1
 8004b92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004b96:	3001      	addeq	r0, #1
 8004b98:	bcf0      	pop	{r4, r5, r6, r7}
 8004b9a:	3801      	subs	r0, #1
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop

08004ba0 <_Balloc>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ba4:	4606      	mov	r6, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	b15c      	cbz	r4, 8004bc2 <_Balloc+0x22>
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	b1a3      	cbz	r3, 8004bd8 <_Balloc+0x38>
 8004bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bb2:	b1e8      	cbz	r0, 8004bf0 <_Balloc+0x50>
 8004bb4:	6802      	ldr	r2, [r0, #0]
 8004bb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	2010      	movs	r0, #16
 8004bc4:	f7ff ff66 	bl	8004a94 <malloc>
 8004bc8:	4604      	mov	r4, r0
 8004bca:	6270      	str	r0, [r6, #36]	; 0x24
 8004bcc:	b1e8      	cbz	r0, 8004c0a <_Balloc+0x6a>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8004bd4:	6003      	str	r3, [r0, #0]
 8004bd6:	60c3      	str	r3, [r0, #12]
 8004bd8:	2221      	movs	r2, #33	; 0x21
 8004bda:	2104      	movs	r1, #4
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 fcfb 	bl	80055d8 <_calloc_r>
 8004be2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004be4:	60e0      	str	r0, [r4, #12]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e0      	bne.n	8004bae <_Balloc+0xe>
 8004bec:	2000      	movs	r0, #0
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f405 	lsl.w	r4, r1, r5
 8004bf6:	1d62      	adds	r2, r4, #5
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	0092      	lsls	r2, r2, #2
 8004bfc:	f000 fcec 	bl	80055d8 <_calloc_r>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d0f3      	beq.n	8004bec <_Balloc+0x4c>
 8004c04:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8004c08:	e7d7      	b.n	8004bba <_Balloc+0x1a>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <_Balloc+0x78>)
 8004c0e:	4803      	ldr	r0, [pc, #12]	; (8004c1c <_Balloc+0x7c>)
 8004c10:	2166      	movs	r1, #102	; 0x66
 8004c12:	f001 f845 	bl	8005ca0 <__assert_func>
 8004c16:	bf00      	nop
 8004c18:	080122fc 	.word	0x080122fc
 8004c1c:	080123a8 	.word	0x080123a8

08004c20 <_Bfree>:
 8004c20:	b530      	push	{r4, r5, lr}
 8004c22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c24:	b083      	sub	sp, #12
 8004c26:	4604      	mov	r4, r0
 8004c28:	b155      	cbz	r5, 8004c40 <_Bfree+0x20>
 8004c2a:	b139      	cbz	r1, 8004c3c <_Bfree+0x1c>
 8004c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c2e:	684a      	ldr	r2, [r1, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c36:	6008      	str	r0, [r1, #0]
 8004c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004c3c:	b003      	add	sp, #12
 8004c3e:	bd30      	pop	{r4, r5, pc}
 8004c40:	2010      	movs	r0, #16
 8004c42:	9101      	str	r1, [sp, #4]
 8004c44:	f7ff ff26 	bl	8004a94 <malloc>
 8004c48:	9901      	ldr	r1, [sp, #4]
 8004c4a:	6260      	str	r0, [r4, #36]	; 0x24
 8004c4c:	b120      	cbz	r0, 8004c58 <_Bfree+0x38>
 8004c4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c52:	6005      	str	r5, [r0, #0]
 8004c54:	60c5      	str	r5, [r0, #12]
 8004c56:	e7e8      	b.n	8004c2a <_Bfree+0xa>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <_Bfree+0x44>)
 8004c5c:	4802      	ldr	r0, [pc, #8]	; (8004c68 <_Bfree+0x48>)
 8004c5e:	218a      	movs	r1, #138	; 0x8a
 8004c60:	f001 f81e 	bl	8005ca0 <__assert_func>
 8004c64:	080122fc 	.word	0x080122fc
 8004c68:	080123a8 	.word	0x080123a8

08004c6c <__multadd>:
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	690c      	ldr	r4, [r1, #16]
 8004c70:	b083      	sub	sp, #12
 8004c72:	460d      	mov	r5, r1
 8004c74:	4606      	mov	r6, r0
 8004c76:	f101 0c14 	add.w	ip, r1, #20
 8004c7a:	2700      	movs	r7, #0
 8004c7c:	f8dc 0000 	ldr.w	r0, [ip]
 8004c80:	b281      	uxth	r1, r0
 8004c82:	fb02 3301 	mla	r3, r2, r1, r3
 8004c86:	0c19      	lsrs	r1, r3, #16
 8004c88:	0c00      	lsrs	r0, r0, #16
 8004c8a:	fb02 1000 	mla	r0, r2, r0, r1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3701      	adds	r7, #1
 8004c92:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8004c96:	42bc      	cmp	r4, r7
 8004c98:	f84c 3b04 	str.w	r3, [ip], #4
 8004c9c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8004ca0:	dcec      	bgt.n	8004c7c <__multadd+0x10>
 8004ca2:	b13b      	cbz	r3, 8004cb4 <__multadd+0x48>
 8004ca4:	68aa      	ldr	r2, [r5, #8]
 8004ca6:	42a2      	cmp	r2, r4
 8004ca8:	dd07      	ble.n	8004cba <__multadd+0x4e>
 8004caa:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004cae:	3401      	adds	r4, #1
 8004cb0:	6153      	str	r3, [r2, #20]
 8004cb2:	612c      	str	r4, [r5, #16]
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	b003      	add	sp, #12
 8004cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cba:	6869      	ldr	r1, [r5, #4]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	3101      	adds	r1, #1
 8004cc2:	f7ff ff6d 	bl	8004ba0 <_Balloc>
 8004cc6:	9b01      	ldr	r3, [sp, #4]
 8004cc8:	4607      	mov	r7, r0
 8004cca:	b1a0      	cbz	r0, 8004cf6 <__multadd+0x8a>
 8004ccc:	692a      	ldr	r2, [r5, #16]
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	3202      	adds	r2, #2
 8004cd2:	0092      	lsls	r2, r2, #2
 8004cd4:	f105 010c 	add.w	r1, r5, #12
 8004cd8:	300c      	adds	r0, #12
 8004cda:	f7fb fec5 	bl	8000a68 <memcpy>
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	463d      	mov	r5, r7
 8004ce4:	f7ff ff9c 	bl	8004c20 <_Bfree>
 8004ce8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004cec:	9b01      	ldr	r3, [sp, #4]
 8004cee:	6153      	str	r3, [r2, #20]
 8004cf0:	3401      	adds	r4, #1
 8004cf2:	612c      	str	r4, [r5, #16]
 8004cf4:	e7de      	b.n	8004cb4 <__multadd+0x48>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	4b02      	ldr	r3, [pc, #8]	; (8004d04 <__multadd+0x98>)
 8004cfa:	4803      	ldr	r0, [pc, #12]	; (8004d08 <__multadd+0x9c>)
 8004cfc:	21b5      	movs	r1, #181	; 0xb5
 8004cfe:	f000 ffcf 	bl	8005ca0 <__assert_func>
 8004d02:	bf00      	nop
 8004d04:	08012348 	.word	0x08012348
 8004d08:	080123a8 	.word	0x080123a8

08004d0c <__s2b>:
 8004d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d10:	4c26      	ldr	r4, [pc, #152]	; (8004dac <__s2b+0xa0>)
 8004d12:	9e08      	ldr	r6, [sp, #32]
 8004d14:	461d      	mov	r5, r3
 8004d16:	3308      	adds	r3, #8
 8004d18:	fb84 4c03 	smull	r4, ip, r4, r3
 8004d1c:	2d09      	cmp	r5, #9
 8004d1e:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8004d22:	4690      	mov	r8, r2
 8004d24:	4607      	mov	r7, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	ebc3 026c 	rsb	r2, r3, ip, asr #1
 8004d2c:	dd36      	ble.n	8004d9c <__s2b+0x90>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	2100      	movs	r1, #0
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f101 0101 	add.w	r1, r1, #1
 8004d3a:	dcfa      	bgt.n	8004d32 <__s2b+0x26>
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f7ff ff2f 	bl	8004ba0 <_Balloc>
 8004d42:	b368      	cbz	r0, 8004da0 <__s2b+0x94>
 8004d44:	2301      	movs	r3, #1
 8004d46:	f1b8 0f09 	cmp.w	r8, #9
 8004d4a:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d4e:	dc13      	bgt.n	8004d78 <__s2b+0x6c>
 8004d50:	340a      	adds	r4, #10
 8004d52:	f04f 0809 	mov.w	r8, #9
 8004d56:	4545      	cmp	r5, r8
 8004d58:	dd0c      	ble.n	8004d74 <__s2b+0x68>
 8004d5a:	eba5 0508 	sub.w	r5, r5, r8
 8004d5e:	4425      	add	r5, r4
 8004d60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004d64:	4601      	mov	r1, r0
 8004d66:	3b30      	subs	r3, #48	; 0x30
 8004d68:	220a      	movs	r2, #10
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7ff ff7e 	bl	8004c6c <__multadd>
 8004d70:	42a5      	cmp	r5, r4
 8004d72:	d1f5      	bne.n	8004d60 <__s2b+0x54>
 8004d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d78:	f104 0909 	add.w	r9, r4, #9
 8004d7c:	464e      	mov	r6, r9
 8004d7e:	4444      	add	r4, r8
 8004d80:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004d84:	4601      	mov	r1, r0
 8004d86:	3b30      	subs	r3, #48	; 0x30
 8004d88:	220a      	movs	r2, #10
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f7ff ff6e 	bl	8004c6c <__multadd>
 8004d90:	42b4      	cmp	r4, r6
 8004d92:	d1f5      	bne.n	8004d80 <__s2b+0x74>
 8004d94:	f1a8 0408 	sub.w	r4, r8, #8
 8004d98:	444c      	add	r4, r9
 8004d9a:	e7dc      	b.n	8004d56 <__s2b+0x4a>
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	e7cd      	b.n	8004d3c <__s2b+0x30>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <__s2b+0xa4>)
 8004da4:	4803      	ldr	r0, [pc, #12]	; (8004db4 <__s2b+0xa8>)
 8004da6:	21ce      	movs	r1, #206	; 0xce
 8004da8:	f000 ff7a 	bl	8005ca0 <__assert_func>
 8004dac:	38e38e39 	.word	0x38e38e39
 8004db0:	08012348 	.word	0x08012348
 8004db4:	080123a8 	.word	0x080123a8

08004db8 <__hi0bits>:
 8004db8:	0c02      	lsrs	r2, r0, #16
 8004dba:	0412      	lsls	r2, r2, #16
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	b9ca      	cbnz	r2, 8004df4 <__hi0bits+0x3c>
 8004dc0:	0403      	lsls	r3, r0, #16
 8004dc2:	2010      	movs	r0, #16
 8004dc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004dc8:	bf04      	itt	eq
 8004dca:	021b      	lsleq	r3, r3, #8
 8004dcc:	3008      	addeq	r0, #8
 8004dce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004dd2:	bf04      	itt	eq
 8004dd4:	011b      	lsleq	r3, r3, #4
 8004dd6:	3004      	addeq	r0, #4
 8004dd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004ddc:	bf04      	itt	eq
 8004dde:	009b      	lsleq	r3, r3, #2
 8004de0:	3002      	addeq	r0, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	db05      	blt.n	8004df2 <__hi0bits+0x3a>
 8004de6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004dea:	f100 0001 	add.w	r0, r0, #1
 8004dee:	bf08      	it	eq
 8004df0:	2020      	moveq	r0, #32
 8004df2:	4770      	bx	lr
 8004df4:	2000      	movs	r0, #0
 8004df6:	e7e5      	b.n	8004dc4 <__hi0bits+0xc>

08004df8 <__lo0bits>:
 8004df8:	6803      	ldr	r3, [r0, #0]
 8004dfa:	f013 0207 	ands.w	r2, r3, #7
 8004dfe:	4601      	mov	r1, r0
 8004e00:	d007      	beq.n	8004e12 <__lo0bits+0x1a>
 8004e02:	07da      	lsls	r2, r3, #31
 8004e04:	d420      	bmi.n	8004e48 <__lo0bits+0x50>
 8004e06:	0798      	lsls	r0, r3, #30
 8004e08:	d522      	bpl.n	8004e50 <__lo0bits+0x58>
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	600b      	str	r3, [r1, #0]
 8004e0e:	2001      	movs	r0, #1
 8004e10:	4770      	bx	lr
 8004e12:	b298      	uxth	r0, r3
 8004e14:	b9b0      	cbnz	r0, 8004e44 <__lo0bits+0x4c>
 8004e16:	0c1b      	lsrs	r3, r3, #16
 8004e18:	2010      	movs	r0, #16
 8004e1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004e1e:	bf04      	itt	eq
 8004e20:	0a1b      	lsreq	r3, r3, #8
 8004e22:	3008      	addeq	r0, #8
 8004e24:	071a      	lsls	r2, r3, #28
 8004e26:	bf04      	itt	eq
 8004e28:	091b      	lsreq	r3, r3, #4
 8004e2a:	3004      	addeq	r0, #4
 8004e2c:	079a      	lsls	r2, r3, #30
 8004e2e:	bf04      	itt	eq
 8004e30:	089b      	lsreq	r3, r3, #2
 8004e32:	3002      	addeq	r0, #2
 8004e34:	07da      	lsls	r2, r3, #31
 8004e36:	d403      	bmi.n	8004e40 <__lo0bits+0x48>
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	f100 0001 	add.w	r0, r0, #1
 8004e3e:	d005      	beq.n	8004e4c <__lo0bits+0x54>
 8004e40:	600b      	str	r3, [r1, #0]
 8004e42:	4770      	bx	lr
 8004e44:	4610      	mov	r0, r2
 8004e46:	e7e8      	b.n	8004e1a <__lo0bits+0x22>
 8004e48:	2000      	movs	r0, #0
 8004e4a:	4770      	bx	lr
 8004e4c:	2020      	movs	r0, #32
 8004e4e:	4770      	bx	lr
 8004e50:	089b      	lsrs	r3, r3, #2
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	2002      	movs	r0, #2
 8004e56:	4770      	bx	lr

08004e58 <__i2b>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	f7ff fe9f 	bl	8004ba0 <_Balloc>
 8004e62:	4602      	mov	r2, r0
 8004e64:	b118      	cbz	r0, 8004e6e <__i2b+0x16>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e9c0 3404 	strd	r3, r4, [r0, #16]
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <__i2b+0x24>)
 8004e70:	4803      	ldr	r0, [pc, #12]	; (8004e80 <__i2b+0x28>)
 8004e72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e76:	f000 ff13 	bl	8005ca0 <__assert_func>
 8004e7a:	bf00      	nop
 8004e7c:	08012348 	.word	0x08012348
 8004e80:	080123a8 	.word	0x080123a8

08004e84 <__multiply>:
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	690e      	ldr	r6, [r1, #16]
 8004e8a:	6917      	ldr	r7, [r2, #16]
 8004e8c:	42be      	cmp	r6, r7
 8004e8e:	b083      	sub	sp, #12
 8004e90:	460c      	mov	r4, r1
 8004e92:	4615      	mov	r5, r2
 8004e94:	db05      	blt.n	8004ea2 <__multiply+0x1e>
 8004e96:	463a      	mov	r2, r7
 8004e98:	462b      	mov	r3, r5
 8004e9a:	4637      	mov	r7, r6
 8004e9c:	460d      	mov	r5, r1
 8004e9e:	4616      	mov	r6, r2
 8004ea0:	461c      	mov	r4, r3
 8004ea2:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
 8004ea6:	eb07 0806 	add.w	r8, r7, r6
 8004eaa:	4543      	cmp	r3, r8
 8004eac:	bfb8      	it	lt
 8004eae:	3101      	addlt	r1, #1
 8004eb0:	f7ff fe76 	bl	8004ba0 <_Balloc>
 8004eb4:	9000      	str	r0, [sp, #0]
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d07f      	beq.n	8004fba <__multiply+0x136>
 8004eba:	9b00      	ldr	r3, [sp, #0]
 8004ebc:	f103 0a14 	add.w	sl, r3, #20
 8004ec0:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
 8004ec4:	45ca      	cmp	sl, r9
 8004ec6:	d205      	bcs.n	8004ed4 <__multiply+0x50>
 8004ec8:	4653      	mov	r3, sl
 8004eca:	2100      	movs	r1, #0
 8004ecc:	f843 1b04 	str.w	r1, [r3], #4
 8004ed0:	4599      	cmp	r9, r3
 8004ed2:	d8fb      	bhi.n	8004ecc <__multiply+0x48>
 8004ed4:	f104 0e14 	add.w	lr, r4, #20
 8004ed8:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
 8004edc:	f105 0314 	add.w	r3, r5, #20
 8004ee0:	45de      	cmp	lr, fp
 8004ee2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ee6:	d253      	bcs.n	8004f90 <__multiply+0x10c>
 8004ee8:	f8cd 8004 	str.w	r8, [sp, #4]
 8004eec:	4698      	mov	r8, r3
 8004eee:	e005      	b.n	8004efc <__multiply+0x78>
 8004ef0:	0c09      	lsrs	r1, r1, #16
 8004ef2:	d128      	bne.n	8004f46 <__multiply+0xc2>
 8004ef4:	45f3      	cmp	fp, lr
 8004ef6:	f10a 0a04 	add.w	sl, sl, #4
 8004efa:	d947      	bls.n	8004f8c <__multiply+0x108>
 8004efc:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004f00:	b28e      	uxth	r6, r1
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	d0f4      	beq.n	8004ef0 <__multiply+0x6c>
 8004f06:	4645      	mov	r5, r8
 8004f08:	4654      	mov	r4, sl
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f855 1b04 	ldr.w	r1, [r5], #4
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	b28a      	uxth	r2, r1
 8004f14:	fa1f fc80 	uxth.w	ip, r0
 8004f18:	fb06 c202 	mla	r2, r6, r2, ip
 8004f1c:	0c09      	lsrs	r1, r1, #16
 8004f1e:	0c00      	lsrs	r0, r0, #16
 8004f20:	4413      	add	r3, r2
 8004f22:	fb06 0201 	mla	r2, r6, r1, r0
 8004f26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f30:	42af      	cmp	r7, r5
 8004f32:	f844 3b04 	str.w	r3, [r4], #4
 8004f36:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8004f3a:	d8e7      	bhi.n	8004f0c <__multiply+0x88>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8004f42:	0c09      	lsrs	r1, r1, #16
 8004f44:	d0d6      	beq.n	8004ef4 <__multiply+0x70>
 8004f46:	f8da 3000 	ldr.w	r3, [sl]
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4654      	mov	r4, sl
 8004f50:	f04f 0c00 	mov.w	ip, #0
 8004f54:	8805      	ldrh	r5, [r0, #0]
 8004f56:	0c12      	lsrs	r2, r2, #16
 8004f58:	fb01 2205 	mla	r2, r1, r5, r2
 8004f5c:	4494      	add	ip, r2
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8004f64:	f844 3b04 	str.w	r3, [r4], #4
 8004f68:	f850 3b04 	ldr.w	r3, [r0], #4
 8004f6c:	6822      	ldr	r2, [r4, #0]
 8004f6e:	0c1b      	lsrs	r3, r3, #16
 8004f70:	b295      	uxth	r5, r2
 8004f72:	fb01 5303 	mla	r3, r1, r3, r5
 8004f76:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 8004f7a:	4287      	cmp	r7, r0
 8004f7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8004f80:	d8e8      	bhi.n	8004f54 <__multiply+0xd0>
 8004f82:	45f3      	cmp	fp, lr
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	f10a 0a04 	add.w	sl, sl, #4
 8004f8a:	d8b7      	bhi.n	8004efc <__multiply+0x78>
 8004f8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004f90:	f1b8 0f00 	cmp.w	r8, #0
 8004f94:	dd0b      	ble.n	8004fae <__multiply+0x12a>
 8004f96:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8004f9a:	f1a9 0904 	sub.w	r9, r9, #4
 8004f9e:	b11b      	cbz	r3, 8004fa8 <__multiply+0x124>
 8004fa0:	e005      	b.n	8004fae <__multiply+0x12a>
 8004fa2:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8004fa6:	b913      	cbnz	r3, 8004fae <__multiply+0x12a>
 8004fa8:	f1b8 0801 	subs.w	r8, r8, #1
 8004fac:	d1f9      	bne.n	8004fa2 <__multiply+0x11e>
 8004fae:	9800      	ldr	r0, [sp, #0]
 8004fb0:	f8c0 8010 	str.w	r8, [r0, #16]
 8004fb4:	b003      	add	sp, #12
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <__multiply+0x144>)
 8004fbe:	4803      	ldr	r0, [pc, #12]	; (8004fcc <__multiply+0x148>)
 8004fc0:	f240 115d 	movw	r1, #349	; 0x15d
 8004fc4:	f000 fe6c 	bl	8005ca0 <__assert_func>
 8004fc8:	08012348 	.word	0x08012348
 8004fcc:	080123a8 	.word	0x080123a8

08004fd0 <__pow5mult>:
 8004fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	f012 0303 	ands.w	r3, r2, #3
 8004fd8:	b083      	sub	sp, #12
 8004fda:	4614      	mov	r4, r2
 8004fdc:	4607      	mov	r7, r0
 8004fde:	d12d      	bne.n	800503c <__pow5mult+0x6c>
 8004fe0:	460e      	mov	r6, r1
 8004fe2:	10a4      	asrs	r4, r4, #2
 8004fe4:	d01c      	beq.n	8005020 <__pow5mult+0x50>
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	b38a      	cbz	r2, 800504e <__pow5mult+0x7e>
 8004fea:	6895      	ldr	r5, [r2, #8]
 8004fec:	2d00      	cmp	r5, #0
 8004fee:	d039      	beq.n	8005064 <__pow5mult+0x94>
 8004ff0:	07e3      	lsls	r3, r4, #31
 8004ff2:	f04f 0900 	mov.w	r9, #0
 8004ff6:	d406      	bmi.n	8005006 <__pow5mult+0x36>
 8004ff8:	1064      	asrs	r4, r4, #1
 8004ffa:	d011      	beq.n	8005020 <__pow5mult+0x50>
 8004ffc:	6828      	ldr	r0, [r5, #0]
 8004ffe:	b198      	cbz	r0, 8005028 <__pow5mult+0x58>
 8005000:	4605      	mov	r5, r0
 8005002:	07e3      	lsls	r3, r4, #31
 8005004:	d5f8      	bpl.n	8004ff8 <__pow5mult+0x28>
 8005006:	4631      	mov	r1, r6
 8005008:	462a      	mov	r2, r5
 800500a:	4638      	mov	r0, r7
 800500c:	f7ff ff3a 	bl	8004e84 <__multiply>
 8005010:	4631      	mov	r1, r6
 8005012:	4680      	mov	r8, r0
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff fe03 	bl	8004c20 <_Bfree>
 800501a:	1064      	asrs	r4, r4, #1
 800501c:	4646      	mov	r6, r8
 800501e:	d1ed      	bne.n	8004ffc <__pow5mult+0x2c>
 8005020:	4630      	mov	r0, r6
 8005022:	b003      	add	sp, #12
 8005024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005028:	462a      	mov	r2, r5
 800502a:	4629      	mov	r1, r5
 800502c:	4638      	mov	r0, r7
 800502e:	f7ff ff29 	bl	8004e84 <__multiply>
 8005032:	6028      	str	r0, [r5, #0]
 8005034:	f8c0 9000 	str.w	r9, [r0]
 8005038:	4605      	mov	r5, r0
 800503a:	e7e2      	b.n	8005002 <__pow5mult+0x32>
 800503c:	3b01      	subs	r3, #1
 800503e:	4a12      	ldr	r2, [pc, #72]	; (8005088 <__pow5mult+0xb8>)
 8005040:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005044:	2300      	movs	r3, #0
 8005046:	f7ff fe11 	bl	8004c6c <__multadd>
 800504a:	4606      	mov	r6, r0
 800504c:	e7c9      	b.n	8004fe2 <__pow5mult+0x12>
 800504e:	2010      	movs	r0, #16
 8005050:	f7ff fd20 	bl	8004a94 <malloc>
 8005054:	4602      	mov	r2, r0
 8005056:	6278      	str	r0, [r7, #36]	; 0x24
 8005058:	b180      	cbz	r0, 800507c <__pow5mult+0xac>
 800505a:	2300      	movs	r3, #0
 800505c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005060:	6003      	str	r3, [r0, #0]
 8005062:	60c3      	str	r3, [r0, #12]
 8005064:	f240 2171 	movw	r1, #625	; 0x271
 8005068:	4638      	mov	r0, r7
 800506a:	9201      	str	r2, [sp, #4]
 800506c:	f7ff fef4 	bl	8004e58 <__i2b>
 8005070:	9a01      	ldr	r2, [sp, #4]
 8005072:	2300      	movs	r3, #0
 8005074:	6090      	str	r0, [r2, #8]
 8005076:	4605      	mov	r5, r0
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	e7b9      	b.n	8004ff0 <__pow5mult+0x20>
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <__pow5mult+0xbc>)
 800507e:	4804      	ldr	r0, [pc, #16]	; (8005090 <__pow5mult+0xc0>)
 8005080:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005084:	f000 fe0c 	bl	8005ca0 <__assert_func>
 8005088:	08011960 	.word	0x08011960
 800508c:	080122fc 	.word	0x080122fc
 8005090:	080123a8 	.word	0x080123a8

08005094 <__lshift>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	690e      	ldr	r6, [r1, #16]
 800509a:	460d      	mov	r5, r1
 800509c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050a0:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 80050a4:	4456      	add	r6, sl
 80050a6:	1c74      	adds	r4, r6, #1
 80050a8:	429c      	cmp	r4, r3
 80050aa:	4691      	mov	r9, r2
 80050ac:	4607      	mov	r7, r0
 80050ae:	dd04      	ble.n	80050ba <__lshift+0x26>
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	429c      	cmp	r4, r3
 80050b4:	f101 0101 	add.w	r1, r1, #1
 80050b8:	dcfa      	bgt.n	80050b0 <__lshift+0x1c>
 80050ba:	4638      	mov	r0, r7
 80050bc:	f7ff fd70 	bl	8004ba0 <_Balloc>
 80050c0:	4680      	mov	r8, r0
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d03f      	beq.n	8005146 <__lshift+0xb2>
 80050c6:	f1ba 0f00 	cmp.w	sl, #0
 80050ca:	f100 0014 	add.w	r0, r0, #20
 80050ce:	dd0e      	ble.n	80050ee <__lshift+0x5a>
 80050d0:	f10a 0a05 	add.w	sl, sl, #5
 80050d4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80050d8:	eb08 010a 	add.w	r1, r8, sl
 80050dc:	4603      	mov	r3, r0
 80050de:	2200      	movs	r2, #0
 80050e0:	f843 2b04 	str.w	r2, [r3], #4
 80050e4:	428b      	cmp	r3, r1
 80050e6:	d1fb      	bne.n	80050e0 <__lshift+0x4c>
 80050e8:	f1aa 0a14 	sub.w	sl, sl, #20
 80050ec:	4450      	add	r0, sl
 80050ee:	6929      	ldr	r1, [r5, #16]
 80050f0:	f105 0314 	add.w	r3, r5, #20
 80050f4:	f019 091f 	ands.w	r9, r9, #31
 80050f8:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 80050fc:	d01b      	beq.n	8005136 <__lshift+0xa2>
 80050fe:	f1c9 0e20 	rsb	lr, r9, #32
 8005102:	2200      	movs	r2, #0
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	fa01 f109 	lsl.w	r1, r1, r9
 800510a:	4311      	orrs	r1, r2
 800510c:	f840 1b04 	str.w	r1, [r0], #4
 8005110:	f853 2b04 	ldr.w	r2, [r3], #4
 8005114:	459c      	cmp	ip, r3
 8005116:	fa22 f20e 	lsr.w	r2, r2, lr
 800511a:	d8f3      	bhi.n	8005104 <__lshift+0x70>
 800511c:	6002      	str	r2, [r0, #0]
 800511e:	2a00      	cmp	r2, #0
 8005120:	bf18      	it	ne
 8005122:	4626      	movne	r6, r4
 8005124:	4638      	mov	r0, r7
 8005126:	f8c8 6010 	str.w	r6, [r8, #16]
 800512a:	4629      	mov	r1, r5
 800512c:	f7ff fd78 	bl	8004c20 <_Bfree>
 8005130:	4640      	mov	r0, r8
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	3804      	subs	r0, #4
 8005138:	f853 2b04 	ldr.w	r2, [r3], #4
 800513c:	f840 2f04 	str.w	r2, [r0, #4]!
 8005140:	459c      	cmp	ip, r3
 8005142:	d8f9      	bhi.n	8005138 <__lshift+0xa4>
 8005144:	e7ee      	b.n	8005124 <__lshift+0x90>
 8005146:	4602      	mov	r2, r0
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <__lshift+0xc0>)
 800514a:	4803      	ldr	r0, [pc, #12]	; (8005158 <__lshift+0xc4>)
 800514c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005150:	f000 fda6 	bl	8005ca0 <__assert_func>
 8005154:	08012348 	.word	0x08012348
 8005158:	080123a8 	.word	0x080123a8

0800515c <__mcmp>:
 800515c:	b430      	push	{r4, r5}
 800515e:	690b      	ldr	r3, [r1, #16]
 8005160:	4605      	mov	r5, r0
 8005162:	6900      	ldr	r0, [r0, #16]
 8005164:	1ac0      	subs	r0, r0, r3
 8005166:	d110      	bne.n	800518a <__mcmp+0x2e>
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	3514      	adds	r5, #20
 800516c:	3114      	adds	r1, #20
 800516e:	4419      	add	r1, r3
 8005170:	442b      	add	r3, r5
 8005172:	e001      	b.n	8005178 <__mcmp+0x1c>
 8005174:	429d      	cmp	r5, r3
 8005176:	d208      	bcs.n	800518a <__mcmp+0x2e>
 8005178:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800517c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005180:	4294      	cmp	r4, r2
 8005182:	d0f7      	beq.n	8005174 <__mcmp+0x18>
 8005184:	d203      	bcs.n	800518e <__mcmp+0x32>
 8005186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800518a:	bc30      	pop	{r4, r5}
 800518c:	4770      	bx	lr
 800518e:	2001      	movs	r0, #1
 8005190:	bc30      	pop	{r4, r5}
 8005192:	4770      	bx	lr

08005194 <__mdiff>:
 8005194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005198:	4616      	mov	r6, r2
 800519a:	690b      	ldr	r3, [r1, #16]
 800519c:	6912      	ldr	r2, [r2, #16]
 800519e:	eba3 0802 	sub.w	r8, r3, r2
 80051a2:	f1b8 0f00 	cmp.w	r8, #0
 80051a6:	460d      	mov	r5, r1
 80051a8:	d167      	bne.n	800527a <__mdiff+0xe6>
 80051aa:	0092      	lsls	r2, r2, #2
 80051ac:	f101 0714 	add.w	r7, r1, #20
 80051b0:	f106 0114 	add.w	r1, r6, #20
 80051b4:	18bb      	adds	r3, r7, r2
 80051b6:	4411      	add	r1, r2
 80051b8:	e001      	b.n	80051be <__mdiff+0x2a>
 80051ba:	429f      	cmp	r7, r3
 80051bc:	d261      	bcs.n	8005282 <__mdiff+0xee>
 80051be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80051c2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80051c6:	42a2      	cmp	r2, r4
 80051c8:	d0f7      	beq.n	80051ba <__mdiff+0x26>
 80051ca:	d350      	bcc.n	800526e <__mdiff+0xda>
 80051cc:	6869      	ldr	r1, [r5, #4]
 80051ce:	f7ff fce7 	bl	8004ba0 <_Balloc>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d05f      	beq.n	8005296 <__mdiff+0x102>
 80051d6:	692f      	ldr	r7, [r5, #16]
 80051d8:	6933      	ldr	r3, [r6, #16]
 80051da:	f8c0 800c 	str.w	r8, [r0, #12]
 80051de:	f106 0214 	add.w	r2, r6, #20
 80051e2:	3514      	adds	r5, #20
 80051e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80051e8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80051ec:	f100 0614 	add.w	r6, r0, #20
 80051f0:	2100      	movs	r1, #0
 80051f2:	e000      	b.n	80051f6 <__mdiff+0x62>
 80051f4:	4626      	mov	r6, r4
 80051f6:	f852 4b04 	ldr.w	r4, [r2], #4
 80051fa:	f855 8b04 	ldr.w	r8, [r5], #4
 80051fe:	fa1f f984 	uxth.w	r9, r4
 8005202:	fa11 f388 	uxtah	r3, r1, r8
 8005206:	0c21      	lsrs	r1, r4, #16
 8005208:	eba3 0309 	sub.w	r3, r3, r9
 800520c:	ebc1 4118 	rsb	r1, r1, r8, lsr #16
 8005210:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8005214:	4634      	mov	r4, r6
 8005216:	b29b      	uxth	r3, r3
 8005218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800521c:	4596      	cmp	lr, r2
 800521e:	ea4f 4121 	mov.w	r1, r1, asr #16
 8005222:	f844 3b04 	str.w	r3, [r4], #4
 8005226:	46a8      	mov	r8, r5
 8005228:	d8e4      	bhi.n	80051f4 <__mdiff+0x60>
 800522a:	45ac      	cmp	ip, r5
 800522c:	d916      	bls.n	800525c <__mdiff+0xc8>
 800522e:	4626      	mov	r6, r4
 8005230:	f858 2b04 	ldr.w	r2, [r8], #4
 8005234:	fa11 f382 	uxtah	r3, r1, r2
 8005238:	1419      	asrs	r1, r3, #16
 800523a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800523e:	b29b      	uxth	r3, r3
 8005240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005244:	45c4      	cmp	ip, r8
 8005246:	f846 3b04 	str.w	r3, [r6], #4
 800524a:	ea4f 4121 	mov.w	r1, r1, asr #16
 800524e:	d8ef      	bhi.n	8005230 <__mdiff+0x9c>
 8005250:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8005254:	1b76      	subs	r6, r6, r5
 8005256:	f026 0603 	bic.w	r6, r6, #3
 800525a:	4426      	add	r6, r4
 800525c:	b923      	cbnz	r3, 8005268 <__mdiff+0xd4>
 800525e:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8005262:	3f01      	subs	r7, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0fa      	beq.n	800525e <__mdiff+0xca>
 8005268:	6107      	str	r7, [r0, #16]
 800526a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526e:	462b      	mov	r3, r5
 8005270:	f04f 0801 	mov.w	r8, #1
 8005274:	4635      	mov	r5, r6
 8005276:	461e      	mov	r6, r3
 8005278:	e7a8      	b.n	80051cc <__mdiff+0x38>
 800527a:	dbf8      	blt.n	800526e <__mdiff+0xda>
 800527c:	f04f 0800 	mov.w	r8, #0
 8005280:	e7a4      	b.n	80051cc <__mdiff+0x38>
 8005282:	2100      	movs	r1, #0
 8005284:	f7ff fc8c 	bl	8004ba0 <_Balloc>
 8005288:	b160      	cbz	r0, 80052a4 <__mdiff+0x110>
 800528a:	2201      	movs	r2, #1
 800528c:	2300      	movs	r3, #0
 800528e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005296:	4602      	mov	r2, r0
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <__mdiff+0x120>)
 800529a:	4807      	ldr	r0, [pc, #28]	; (80052b8 <__mdiff+0x124>)
 800529c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80052a0:	f000 fcfe 	bl	8005ca0 <__assert_func>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <__mdiff+0x120>)
 80052a8:	4803      	ldr	r0, [pc, #12]	; (80052b8 <__mdiff+0x124>)
 80052aa:	f240 2132 	movw	r1, #562	; 0x232
 80052ae:	f000 fcf7 	bl	8005ca0 <__assert_func>
 80052b2:	bf00      	nop
 80052b4:	08012348 	.word	0x08012348
 80052b8:	080123a8 	.word	0x080123a8

080052bc <__ulp>:
 80052bc:	4b12      	ldr	r3, [pc, #72]	; (8005308 <__ulp+0x4c>)
 80052be:	ee10 2a90 	vmov	r2, s1
 80052c2:	401a      	ands	r2, r3
 80052c4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dd04      	ble.n	80052d6 <__ulp+0x1a>
 80052cc:	2000      	movs	r0, #0
 80052ce:	4619      	mov	r1, r3
 80052d0:	ec41 0b10 	vmov	d0, r0, r1
 80052d4:	4770      	bx	lr
 80052d6:	425b      	negs	r3, r3
 80052d8:	151b      	asrs	r3, r3, #20
 80052da:	2b13      	cmp	r3, #19
 80052dc:	dc07      	bgt.n	80052ee <__ulp+0x32>
 80052de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80052e2:	2000      	movs	r0, #0
 80052e4:	fa42 f103 	asr.w	r1, r2, r3
 80052e8:	ec41 0b10 	vmov	d0, r0, r1
 80052ec:	4770      	bx	lr
 80052ee:	3b14      	subs	r3, #20
 80052f0:	2b1e      	cmp	r3, #30
 80052f2:	bfda      	itte	le
 80052f4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80052f8:	fa22 f303 	lsrle.w	r3, r2, r3
 80052fc:	2301      	movgt	r3, #1
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	ec41 0b10 	vmov	d0, r0, r1
 8005306:	4770      	bx	lr
 8005308:	7ff00000 	.word	0x7ff00000

0800530c <__b2d>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	6904      	ldr	r4, [r0, #16]
 8005310:	f100 0614 	add.w	r6, r0, #20
 8005314:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005318:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800531c:	4628      	mov	r0, r5
 800531e:	f7ff fd4b 	bl	8004db8 <__hi0bits>
 8005322:	f1c0 0320 	rsb	r3, r0, #32
 8005326:	280a      	cmp	r0, #10
 8005328:	600b      	str	r3, [r1, #0]
 800532a:	f1a4 0104 	sub.w	r1, r4, #4
 800532e:	dd31      	ble.n	8005394 <__b2d+0x88>
 8005330:	428e      	cmp	r6, r1
 8005332:	f1a0 000b 	sub.w	r0, r0, #11
 8005336:	d21a      	bcs.n	800536e <__b2d+0x62>
 8005338:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800533c:	b310      	cbz	r0, 8005384 <__b2d+0x78>
 800533e:	f1c0 0720 	rsb	r7, r0, #32
 8005342:	4085      	lsls	r5, r0
 8005344:	fa21 f307 	lsr.w	r3, r1, r7
 8005348:	431d      	orrs	r5, r3
 800534a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800534e:	f1a4 0508 	sub.w	r5, r4, #8
 8005352:	42ae      	cmp	r6, r5
 8005354:	fa01 f000 	lsl.w	r0, r1, r0
 8005358:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800535c:	d203      	bcs.n	8005366 <__b2d+0x5a>
 800535e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 8005362:	40f9      	lsrs	r1, r7
 8005364:	4308      	orrs	r0, r1
 8005366:	4602      	mov	r2, r0
 8005368:	ec43 2b10 	vmov	d0, r2, r3
 800536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536e:	b140      	cbz	r0, 8005382 <__b2d+0x76>
 8005370:	fa05 f000 	lsl.w	r0, r5, r0
 8005374:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8005378:	2000      	movs	r0, #0
 800537a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800537e:	4602      	mov	r2, r0
 8005380:	e7f2      	b.n	8005368 <__b2d+0x5c>
 8005382:	4601      	mov	r1, r0
 8005384:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005388:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800538c:	460a      	mov	r2, r1
 800538e:	ec43 2b10 	vmov	d0, r2, r3
 8005392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005394:	428e      	cmp	r6, r1
 8005396:	f1c0 070b 	rsb	r7, r0, #11
 800539a:	bf38      	it	cc
 800539c:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 80053a0:	fa25 fc07 	lsr.w	ip, r5, r7
 80053a4:	f100 0015 	add.w	r0, r0, #21
 80053a8:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
 80053ac:	bf34      	ite	cc
 80053ae:	40f9      	lsrcc	r1, r7
 80053b0:	2100      	movcs	r1, #0
 80053b2:	fa05 f000 	lsl.w	r0, r5, r0
 80053b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053ba:	ea40 0201 	orr.w	r2, r0, r1
 80053be:	ec43 2b10 	vmov	d0, r2, r3
 80053c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053c4 <__d2b>:
 80053c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053c8:	4688      	mov	r8, r1
 80053ca:	b083      	sub	sp, #12
 80053cc:	2101      	movs	r1, #1
 80053ce:	4615      	mov	r5, r2
 80053d0:	ec57 6b10 	vmov	r6, r7, d0
 80053d4:	f7ff fbe4 	bl	8004ba0 <_Balloc>
 80053d8:	4604      	mov	r4, r0
 80053da:	2800      	cmp	r0, #0
 80053dc:	d050      	beq.n	8005480 <__d2b+0xbc>
 80053de:	f3c7 590a 	ubfx	r9, r7, #20, #11
 80053e2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053e6:	f1b9 0f00 	cmp.w	r9, #0
 80053ea:	d001      	beq.n	80053f0 <__d2b+0x2c>
 80053ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	d025      	beq.n	8005442 <__d2b+0x7e>
 80053f6:	4668      	mov	r0, sp
 80053f8:	9600      	str	r6, [sp, #0]
 80053fa:	f7ff fcfd 	bl	8004df8 <__lo0bits>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d03a      	beq.n	8005478 <__d2b+0xb4>
 8005402:	e9dd 1300 	ldrd	r1, r3, [sp]
 8005406:	f1c0 0220 	rsb	r2, r0, #32
 800540a:	fa03 f202 	lsl.w	r2, r3, r2
 800540e:	430a      	orrs	r2, r1
 8005410:	40c3      	lsrs	r3, r0
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	6162      	str	r2, [r4, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf14      	ite	ne
 800541a:	2102      	movne	r1, #2
 800541c:	2101      	moveq	r1, #1
 800541e:	61a3      	str	r3, [r4, #24]
 8005420:	6121      	str	r1, [r4, #16]
 8005422:	f1b9 0f00 	cmp.w	r9, #0
 8005426:	d017      	beq.n	8005458 <__d2b+0x94>
 8005428:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 800542c:	eb09 0300 	add.w	r3, r9, r0
 8005430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005434:	f8c8 3000 	str.w	r3, [r8]
 8005438:	6028      	str	r0, [r5, #0]
 800543a:	4620      	mov	r0, r4
 800543c:	b003      	add	sp, #12
 800543e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005442:	a801      	add	r0, sp, #4
 8005444:	f7ff fcd8 	bl	8004df8 <__lo0bits>
 8005448:	9b01      	ldr	r3, [sp, #4]
 800544a:	6163      	str	r3, [r4, #20]
 800544c:	2101      	movs	r1, #1
 800544e:	3020      	adds	r0, #32
 8005450:	6121      	str	r1, [r4, #16]
 8005452:	f1b9 0f00 	cmp.w	r9, #0
 8005456:	d1e7      	bne.n	8005428 <__d2b+0x64>
 8005458:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800545c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005460:	f8c8 0000 	str.w	r0, [r8]
 8005464:	6918      	ldr	r0, [r3, #16]
 8005466:	f7ff fca7 	bl	8004db8 <__hi0bits>
 800546a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800546e:	6028      	str	r0, [r5, #0]
 8005470:	4620      	mov	r0, r4
 8005472:	b003      	add	sp, #12
 8005474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800547c:	6162      	str	r2, [r4, #20]
 800547e:	e7ca      	b.n	8005416 <__d2b+0x52>
 8005480:	4602      	mov	r2, r0
 8005482:	4b03      	ldr	r3, [pc, #12]	; (8005490 <__d2b+0xcc>)
 8005484:	4803      	ldr	r0, [pc, #12]	; (8005494 <__d2b+0xd0>)
 8005486:	f240 310a 	movw	r1, #778	; 0x30a
 800548a:	f000 fc09 	bl	8005ca0 <__assert_func>
 800548e:	bf00      	nop
 8005490:	08012348 	.word	0x08012348
 8005494:	080123a8 	.word	0x080123a8

08005498 <__ratio>:
 8005498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800549c:	b083      	sub	sp, #12
 800549e:	4688      	mov	r8, r1
 80054a0:	4669      	mov	r1, sp
 80054a2:	4681      	mov	r9, r0
 80054a4:	f7ff ff32 	bl	800530c <__b2d>
 80054a8:	4640      	mov	r0, r8
 80054aa:	a901      	add	r1, sp, #4
 80054ac:	ec55 4b10 	vmov	r4, r5, d0
 80054b0:	f7ff ff2c 	bl	800530c <__b2d>
 80054b4:	e9dd 1300 	ldrd	r1, r3, [sp]
 80054b8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80054bc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80054c0:	1acb      	subs	r3, r1, r3
 80054c2:	1a12      	subs	r2, r2, r0
 80054c4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	ec57 6b10 	vmov	r6, r7, d0
 80054ce:	dd0d      	ble.n	80054ec <__ratio+0x54>
 80054d0:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 80054d4:	464d      	mov	r5, r9
 80054d6:	4632      	mov	r2, r6
 80054d8:	463b      	mov	r3, r7
 80054da:	4620      	mov	r0, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	f001 fa53 	bl	8006988 <__aeabi_ddiv>
 80054e2:	ec41 0b10 	vmov	d0, r0, r1
 80054e6:	b003      	add	sp, #12
 80054e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054ec:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 80054f0:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 80054f4:	460f      	mov	r7, r1
 80054f6:	e7ee      	b.n	80054d6 <__ratio+0x3e>

080054f8 <_mprec_log10>:
 80054f8:	2817      	cmp	r0, #23
 80054fa:	b5d0      	push	{r4, r6, r7, lr}
 80054fc:	4604      	mov	r4, r0
 80054fe:	dd0c      	ble.n	800551a <_mprec_log10+0x22>
 8005500:	490a      	ldr	r1, [pc, #40]	; (800552c <_mprec_log10+0x34>)
 8005502:	4f0b      	ldr	r7, [pc, #44]	; (8005530 <_mprec_log10+0x38>)
 8005504:	2000      	movs	r0, #0
 8005506:	2600      	movs	r6, #0
 8005508:	4632      	mov	r2, r6
 800550a:	463b      	mov	r3, r7
 800550c:	f001 f912 	bl	8006734 <__aeabi_dmul>
 8005510:	3c01      	subs	r4, #1
 8005512:	d1f9      	bne.n	8005508 <_mprec_log10+0x10>
 8005514:	ec41 0b10 	vmov	d0, r0, r1
 8005518:	bdd0      	pop	{r4, r6, r7, pc}
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <_mprec_log10+0x3c>)
 800551c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8005520:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8005524:	ec41 0b10 	vmov	d0, r0, r1
 8005528:	bdd0      	pop	{r4, r6, r7, pc}
 800552a:	bf00      	nop
 800552c:	3ff00000 	.word	0x3ff00000
 8005530:	40240000 	.word	0x40240000
 8005534:	08011960 	.word	0x08011960

08005538 <__copybits>:
 8005538:	b470      	push	{r4, r5, r6}
 800553a:	6914      	ldr	r4, [r2, #16]
 800553c:	1e4e      	subs	r6, r1, #1
 800553e:	f102 0314 	add.w	r3, r2, #20
 8005542:	1176      	asrs	r6, r6, #5
 8005544:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8005548:	3601      	adds	r6, #1
 800554a:	428b      	cmp	r3, r1
 800554c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005550:	d20c      	bcs.n	800556c <__copybits+0x34>
 8005552:	1f04      	subs	r4, r0, #4
 8005554:	f853 5b04 	ldr.w	r5, [r3], #4
 8005558:	f844 5f04 	str.w	r5, [r4, #4]!
 800555c:	4299      	cmp	r1, r3
 800555e:	d8f9      	bhi.n	8005554 <__copybits+0x1c>
 8005560:	1a8b      	subs	r3, r1, r2
 8005562:	3b15      	subs	r3, #21
 8005564:	f023 0303 	bic.w	r3, r3, #3
 8005568:	3304      	adds	r3, #4
 800556a:	4418      	add	r0, r3
 800556c:	4286      	cmp	r6, r0
 800556e:	d904      	bls.n	800557a <__copybits+0x42>
 8005570:	2300      	movs	r3, #0
 8005572:	f840 3b04 	str.w	r3, [r0], #4
 8005576:	4286      	cmp	r6, r0
 8005578:	d8fb      	bhi.n	8005572 <__copybits+0x3a>
 800557a:	bc70      	pop	{r4, r5, r6}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop

08005580 <__any_on>:
 8005580:	6903      	ldr	r3, [r0, #16]
 8005582:	114a      	asrs	r2, r1, #5
 8005584:	4293      	cmp	r3, r2
 8005586:	b410      	push	{r4}
 8005588:	f100 0414 	add.w	r4, r0, #20
 800558c:	da10      	bge.n	80055b0 <__any_on+0x30>
 800558e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005592:	429c      	cmp	r4, r3
 8005594:	d21e      	bcs.n	80055d4 <__any_on+0x54>
 8005596:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800559a:	3b04      	subs	r3, #4
 800559c:	b118      	cbz	r0, 80055a6 <__any_on+0x26>
 800559e:	e015      	b.n	80055cc <__any_on+0x4c>
 80055a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80055a4:	b992      	cbnz	r2, 80055cc <__any_on+0x4c>
 80055a6:	429c      	cmp	r4, r3
 80055a8:	d3fa      	bcc.n	80055a0 <__any_on+0x20>
 80055aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055b4:	dded      	ble.n	8005592 <__any_on+0x12>
 80055b6:	f011 011f 	ands.w	r1, r1, #31
 80055ba:	d0ea      	beq.n	8005592 <__any_on+0x12>
 80055bc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 80055c0:	fa20 f201 	lsr.w	r2, r0, r1
 80055c4:	fa02 f101 	lsl.w	r1, r2, r1
 80055c8:	4288      	cmp	r0, r1
 80055ca:	d0e2      	beq.n	8005592 <__any_on+0x12>
 80055cc:	2001      	movs	r0, #1
 80055ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	2000      	movs	r0, #0
 80055d6:	e7e8      	b.n	80055aa <__any_on+0x2a>

080055d8 <_calloc_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	fb02 f401 	mul.w	r4, r2, r1
 80055de:	4621      	mov	r1, r4
 80055e0:	f000 f85e 	bl	80056a0 <_malloc_r>
 80055e4:	4605      	mov	r5, r0
 80055e6:	b118      	cbz	r0, 80055f0 <_calloc_r+0x18>
 80055e8:	4622      	mov	r2, r4
 80055ea:	2100      	movs	r1, #0
 80055ec:	f7fb fad6 	bl	8000b9c <memset>
 80055f0:	4628      	mov	r0, r5
 80055f2:	bd38      	pop	{r3, r4, r5, pc}

080055f4 <_free_r>:
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d03c      	beq.n	8005672 <_free_r+0x7e>
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fe:	1f0c      	subs	r4, r1, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	bfb8      	it	lt
 8005604:	18e4      	addlt	r4, r4, r3
 8005606:	4605      	mov	r5, r0
 8005608:	f000 fdca 	bl	80061a0 <__malloc_lock>
 800560c:	4b23      	ldr	r3, [pc, #140]	; (800569c <_free_r+0xa8>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	b12a      	cbz	r2, 800561e <_free_r+0x2a>
 8005612:	42a2      	cmp	r2, r4
 8005614:	d90d      	bls.n	8005632 <_free_r+0x3e>
 8005616:	6821      	ldr	r1, [r4, #0]
 8005618:	1860      	adds	r0, r4, r1
 800561a:	4282      	cmp	r2, r0
 800561c:	d023      	beq.n	8005666 <_free_r+0x72>
 800561e:	6062      	str	r2, [r4, #4]
 8005620:	4628      	mov	r0, r5
 8005622:	601c      	str	r4, [r3, #0]
 8005624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005628:	f000 bdbc 	b.w	80061a4 <__malloc_unlock>
 800562c:	42a3      	cmp	r3, r4
 800562e:	d803      	bhi.n	8005638 <_free_r+0x44>
 8005630:	461a      	mov	r2, r3
 8005632:	6853      	ldr	r3, [r2, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f9      	bne.n	800562c <_free_r+0x38>
 8005638:	6811      	ldr	r1, [r2, #0]
 800563a:	1850      	adds	r0, r2, r1
 800563c:	42a0      	cmp	r0, r4
 800563e:	d019      	beq.n	8005674 <_free_r+0x80>
 8005640:	d824      	bhi.n	800568c <_free_r+0x98>
 8005642:	6821      	ldr	r1, [r4, #0]
 8005644:	1860      	adds	r0, r4, r1
 8005646:	4283      	cmp	r3, r0
 8005648:	d006      	beq.n	8005658 <_free_r+0x64>
 800564a:	6063      	str	r3, [r4, #4]
 800564c:	6054      	str	r4, [r2, #4]
 800564e:	4628      	mov	r0, r5
 8005650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005654:	f000 bda6 	b.w	80061a4 <__malloc_unlock>
 8005658:	e9d3 0300 	ldrd	r0, r3, [r3]
 800565c:	4401      	add	r1, r0
 800565e:	6063      	str	r3, [r4, #4]
 8005660:	6021      	str	r1, [r4, #0]
 8005662:	6054      	str	r4, [r2, #4]
 8005664:	e7f3      	b.n	800564e <_free_r+0x5a>
 8005666:	e9d2 0200 	ldrd	r0, r2, [r2]
 800566a:	4401      	add	r1, r0
 800566c:	6062      	str	r2, [r4, #4]
 800566e:	6021      	str	r1, [r4, #0]
 8005670:	e7d6      	b.n	8005620 <_free_r+0x2c>
 8005672:	4770      	bx	lr
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	4401      	add	r1, r0
 8005678:	1850      	adds	r0, r2, r1
 800567a:	4283      	cmp	r3, r0
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	d1e6      	bne.n	800564e <_free_r+0x5a>
 8005680:	e9d3 0300 	ldrd	r0, r3, [r3]
 8005684:	4401      	add	r1, r0
 8005686:	6053      	str	r3, [r2, #4]
 8005688:	6011      	str	r1, [r2, #0]
 800568a:	e7e0      	b.n	800564e <_free_r+0x5a>
 800568c:	230c      	movs	r3, #12
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	4628      	mov	r0, r5
 8005692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005696:	f000 bd85 	b.w	80061a4 <__malloc_unlock>
 800569a:	bf00      	nop
 800569c:	20000244 	.word	0x20000244

080056a0 <_malloc_r>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	1ccd      	adds	r5, r1, #3
 80056a4:	f025 0503 	bic.w	r5, r5, #3
 80056a8:	3508      	adds	r5, #8
 80056aa:	2d0c      	cmp	r5, #12
 80056ac:	bf38      	it	cc
 80056ae:	250c      	movcc	r5, #12
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	4606      	mov	r6, r0
 80056b4:	db33      	blt.n	800571e <_malloc_r+0x7e>
 80056b6:	42a9      	cmp	r1, r5
 80056b8:	d831      	bhi.n	800571e <_malloc_r+0x7e>
 80056ba:	4f2a      	ldr	r7, [pc, #168]	; (8005764 <_malloc_r+0xc4>)
 80056bc:	f000 fd70 	bl	80061a0 <__malloc_lock>
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	b152      	cbz	r2, 80056da <_malloc_r+0x3a>
 80056c4:	6813      	ldr	r3, [r2, #0]
 80056c6:	1b5b      	subs	r3, r3, r5
 80056c8:	d404      	bmi.n	80056d4 <_malloc_r+0x34>
 80056ca:	e03f      	b.n	800574c <_malloc_r+0xac>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	1b5b      	subs	r3, r3, r5
 80056d0:	d529      	bpl.n	8005726 <_malloc_r+0x86>
 80056d2:	4622      	mov	r2, r4
 80056d4:	6854      	ldr	r4, [r2, #4]
 80056d6:	2c00      	cmp	r4, #0
 80056d8:	d1f8      	bne.n	80056cc <_malloc_r+0x2c>
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	2900      	cmp	r1, #0
 80056de:	d03b      	beq.n	8005758 <_malloc_r+0xb8>
 80056e0:	4629      	mov	r1, r5
 80056e2:	4630      	mov	r0, r6
 80056e4:	f000 f9fc 	bl	8005ae0 <_sbrk_r>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d028      	beq.n	800573e <_malloc_r+0x9e>
 80056ec:	1cc4      	adds	r4, r0, #3
 80056ee:	f024 0403 	bic.w	r4, r4, #3
 80056f2:	42a0      	cmp	r0, r4
 80056f4:	d005      	beq.n	8005702 <_malloc_r+0x62>
 80056f6:	1a21      	subs	r1, r4, r0
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 f9f1 	bl	8005ae0 <_sbrk_r>
 80056fe:	3001      	adds	r0, #1
 8005700:	d01d      	beq.n	800573e <_malloc_r+0x9e>
 8005702:	6025      	str	r5, [r4, #0]
 8005704:	4630      	mov	r0, r6
 8005706:	f000 fd4d 	bl	80061a4 <__malloc_unlock>
 800570a:	f104 000b 	add.w	r0, r4, #11
 800570e:	f020 0007 	bic.w	r0, r0, #7
 8005712:	1d23      	adds	r3, r4, #4
 8005714:	1ac2      	subs	r2, r0, r3
 8005716:	d001      	beq.n	800571c <_malloc_r+0x7c>
 8005718:	1a1b      	subs	r3, r3, r0
 800571a:	50a3      	str	r3, [r4, r2]
 800571c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800571e:	220c      	movs	r2, #12
 8005720:	6032      	str	r2, [r6, #0]
 8005722:	2000      	movs	r0, #0
 8005724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005726:	2b0b      	cmp	r3, #11
 8005728:	d805      	bhi.n	8005736 <_malloc_r+0x96>
 800572a:	42a2      	cmp	r2, r4
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	d011      	beq.n	8005754 <_malloc_r+0xb4>
 8005730:	6053      	str	r3, [r2, #4]
 8005732:	e7e7      	b.n	8005704 <_malloc_r+0x64>
 8005734:	4614      	mov	r4, r2
 8005736:	6023      	str	r3, [r4, #0]
 8005738:	441c      	add	r4, r3
 800573a:	6025      	str	r5, [r4, #0]
 800573c:	e7e2      	b.n	8005704 <_malloc_r+0x64>
 800573e:	230c      	movs	r3, #12
 8005740:	4630      	mov	r0, r6
 8005742:	6033      	str	r3, [r6, #0]
 8005744:	f000 fd2e 	bl	80061a4 <__malloc_unlock>
 8005748:	2000      	movs	r0, #0
 800574a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800574c:	2b0b      	cmp	r3, #11
 800574e:	d8f1      	bhi.n	8005734 <_malloc_r+0x94>
 8005750:	6853      	ldr	r3, [r2, #4]
 8005752:	4614      	mov	r4, r2
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	e7d5      	b.n	8005704 <_malloc_r+0x64>
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f9c1 	bl	8005ae0 <_sbrk_r>
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	e7be      	b.n	80056e0 <_malloc_r+0x40>
 8005762:	bf00      	nop
 8005764:	20000244 	.word	0x20000244

08005768 <__sfputc_r>:
 8005768:	6893      	ldr	r3, [r2, #8]
 800576a:	3b01      	subs	r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	6093      	str	r3, [r2, #8]
 8005770:	da11      	bge.n	8005796 <__sfputc_r+0x2e>
 8005772:	b410      	push	{r4}
 8005774:	6994      	ldr	r4, [r2, #24]
 8005776:	42a3      	cmp	r3, r4
 8005778:	db09      	blt.n	800578e <__sfputc_r+0x26>
 800577a:	290a      	cmp	r1, #10
 800577c:	d007      	beq.n	800578e <__sfputc_r+0x26>
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	1c58      	adds	r0, r3, #1
 8005782:	6010      	str	r0, [r2, #0]
 8005784:	7019      	strb	r1, [r3, #0]
 8005786:	4608      	mov	r0, r1
 8005788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005792:	f7fd ba07 	b.w	8002ba4 <__swbuf_r>
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	1c58      	adds	r0, r3, #1
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	7019      	strb	r1, [r3, #0]
 800579e:	4608      	mov	r0, r1
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <__sfputs_r>:
 80057a4:	b19b      	cbz	r3, 80057ce <__sfputs_r+0x2a>
 80057a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a8:	4413      	add	r3, r2
 80057aa:	460f      	mov	r7, r1
 80057ac:	4606      	mov	r6, r0
 80057ae:	1e5d      	subs	r5, r3, #1
 80057b0:	1e54      	subs	r4, r2, #1
 80057b2:	e001      	b.n	80057b8 <__sfputs_r+0x14>
 80057b4:	42ac      	cmp	r4, r5
 80057b6:	d008      	beq.n	80057ca <__sfputs_r+0x26>
 80057b8:	463a      	mov	r2, r7
 80057ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80057be:	4630      	mov	r0, r6
 80057c0:	f7ff ffd2 	bl	8005768 <__sfputc_r>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d1f5      	bne.n	80057b4 <__sfputs_r+0x10>
 80057c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ca:	2000      	movs	r0, #0
 80057cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ce:	2000      	movs	r0, #0
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop

080057d4 <__sprint_r>:
 80057d4:	6893      	ldr	r3, [r2, #8]
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4614      	mov	r4, r2
 80057da:	b913      	cbnz	r3, 80057e2 <__sprint_r+0xe>
 80057dc:	6053      	str	r3, [r2, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	f000 fac9 	bl	8005d78 <__sfvwrite_r>
 80057e6:	2300      	movs	r3, #0
 80057e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	bf00      	nop

080057f0 <_vfiprintf_r>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	b09f      	sub	sp, #124	; 0x7c
 80057f6:	468b      	mov	fp, r1
 80057f8:	4690      	mov	r8, r2
 80057fa:	461c      	mov	r4, r3
 80057fc:	9003      	str	r0, [sp, #12]
 80057fe:	b118      	cbz	r0, 8005808 <_vfiprintf_r+0x18>
 8005800:	6983      	ldr	r3, [r0, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80b7 	beq.w	8005976 <_vfiprintf_r+0x186>
 8005808:	4ba2      	ldr	r3, [pc, #648]	; (8005a94 <_vfiprintf_r+0x2a4>)
 800580a:	459b      	cmp	fp, r3
 800580c:	f000 80b9 	beq.w	8005982 <_vfiprintf_r+0x192>
 8005810:	4ba1      	ldr	r3, [pc, #644]	; (8005a98 <_vfiprintf_r+0x2a8>)
 8005812:	459b      	cmp	fp, r3
 8005814:	f000 80c7 	beq.w	80059a6 <_vfiprintf_r+0x1b6>
 8005818:	4ba0      	ldr	r3, [pc, #640]	; (8005a9c <_vfiprintf_r+0x2ac>)
 800581a:	459b      	cmp	fp, r3
 800581c:	bf04      	itt	eq
 800581e:	9b03      	ldreq	r3, [sp, #12]
 8005820:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
 8005824:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005828:	0718      	lsls	r0, r3, #28
 800582a:	f140 80b2 	bpl.w	8005992 <_vfiprintf_r+0x1a2>
 800582e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 80ad 	beq.w	8005992 <_vfiprintf_r+0x1a2>
 8005838:	2330      	movs	r3, #48	; 0x30
 800583a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 800583e:	f898 3000 	ldrb.w	r3, [r8]
 8005842:	9405      	str	r4, [sp, #20]
 8005844:	2100      	movs	r1, #0
 8005846:	2220      	movs	r2, #32
 8005848:	910b      	str	r1, [sp, #44]	; 0x2c
 800584a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800584e:	4e94      	ldr	r6, [pc, #592]	; (8005aa0 <_vfiprintf_r+0x2b0>)
 8005850:	2701      	movs	r7, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8087 	beq.w	8005966 <_vfiprintf_r+0x176>
 8005858:	2b25      	cmp	r3, #37	; 0x25
 800585a:	f000 8115 	beq.w	8005a88 <_vfiprintf_r+0x298>
 800585e:	4645      	mov	r5, r8
 8005860:	e003      	b.n	800586a <_vfiprintf_r+0x7a>
 8005862:	2b25      	cmp	r3, #37	; 0x25
 8005864:	f000 80a3 	beq.w	80059ae <_vfiprintf_r+0x1be>
 8005868:	4625      	mov	r5, r4
 800586a:	786b      	ldrb	r3, [r5, #1]
 800586c:	1c6c      	adds	r4, r5, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f7      	bne.n	8005862 <_vfiprintf_r+0x72>
 8005872:	ebb4 0a08 	subs.w	sl, r4, r8
 8005876:	d076      	beq.n	8005966 <_vfiprintf_r+0x176>
 8005878:	4642      	mov	r2, r8
 800587a:	4653      	mov	r3, sl
 800587c:	4659      	mov	r1, fp
 800587e:	9803      	ldr	r0, [sp, #12]
 8005880:	f7ff ff90 	bl	80057a4 <__sfputs_r>
 8005884:	3001      	adds	r0, #1
 8005886:	d06e      	beq.n	8005966 <_vfiprintf_r+0x176>
 8005888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800588a:	786a      	ldrb	r2, [r5, #1]
 800588c:	4453      	add	r3, sl
 800588e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005890:	2a00      	cmp	r2, #0
 8005892:	d068      	beq.n	8005966 <_vfiprintf_r+0x176>
 8005894:	2300      	movs	r3, #0
 8005896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800589a:	3401      	adds	r4, #1
 800589c:	9306      	str	r3, [sp, #24]
 800589e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80058a2:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80058a6:	931c      	str	r3, [sp, #112]	; 0x70
 80058a8:	9207      	str	r2, [sp, #28]
 80058aa:	e005      	b.n	80058b8 <_vfiprintf_r+0xc8>
 80058ac:	9a06      	ldr	r2, [sp, #24]
 80058ae:	fa07 f303 	lsl.w	r3, r7, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	462c      	mov	r4, r5
 80058b6:	9306      	str	r3, [sp, #24]
 80058b8:	4625      	mov	r5, r4
 80058ba:	2205      	movs	r2, #5
 80058bc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80058c0:	4630      	mov	r0, r6
 80058c2:	f7ff f91d 	bl	8004b00 <memchr>
 80058c6:	46aa      	mov	sl, r5
 80058c8:	1b83      	subs	r3, r0, r6
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d1ee      	bne.n	80058ac <_vfiprintf_r+0xbc>
 80058ce:	9b06      	ldr	r3, [sp, #24]
 80058d0:	06d9      	lsls	r1, r3, #27
 80058d2:	bf44      	itt	mi
 80058d4:	2220      	movmi	r2, #32
 80058d6:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 80058da:	7821      	ldrb	r1, [r4, #0]
 80058dc:	071a      	lsls	r2, r3, #28
 80058de:	bf44      	itt	mi
 80058e0:	222b      	movmi	r2, #43	; 0x2b
 80058e2:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 80058e6:	292a      	cmp	r1, #42	; 0x2a
 80058e8:	d166      	bne.n	80059b8 <_vfiprintf_r+0x1c8>
 80058ea:	9a05      	ldr	r2, [sp, #20]
 80058ec:	6811      	ldr	r1, [r2, #0]
 80058ee:	3204      	adds	r2, #4
 80058f0:	2900      	cmp	r1, #0
 80058f2:	9205      	str	r2, [sp, #20]
 80058f4:	f2c0 809d 	blt.w	8005a32 <_vfiprintf_r+0x242>
 80058f8:	9109      	str	r1, [sp, #36]	; 0x24
 80058fa:	7861      	ldrb	r1, [r4, #1]
 80058fc:	1ca5      	adds	r5, r4, #2
 80058fe:	292e      	cmp	r1, #46	; 0x2e
 8005900:	d073      	beq.n	80059ea <_vfiprintf_r+0x1fa>
 8005902:	4c68      	ldr	r4, [pc, #416]	; (8005aa4 <_vfiprintf_r+0x2b4>)
 8005904:	2203      	movs	r2, #3
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff f8fa 	bl	8004b00 <memchr>
 800590c:	2800      	cmp	r0, #0
 800590e:	f000 8086 	beq.w	8005a1e <_vfiprintf_r+0x22e>
 8005912:	1b00      	subs	r0, r0, r4
 8005914:	9b06      	ldr	r3, [sp, #24]
 8005916:	2440      	movs	r4, #64	; 0x40
 8005918:	fa04 f000 	lsl.w	r0, r4, r0
 800591c:	4303      	orrs	r3, r0
 800591e:	9306      	str	r3, [sp, #24]
 8005920:	f105 0801 	add.w	r8, r5, #1
 8005924:	7829      	ldrb	r1, [r5, #0]
 8005926:	4860      	ldr	r0, [pc, #384]	; (8005aa8 <_vfiprintf_r+0x2b8>)
 8005928:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 800592c:	2206      	movs	r2, #6
 800592e:	f7ff f8e7 	bl	8004b00 <memchr>
 8005932:	2800      	cmp	r0, #0
 8005934:	f000 8083 	beq.w	8005a3e <_vfiprintf_r+0x24e>
 8005938:	4b5c      	ldr	r3, [pc, #368]	; (8005aac <_vfiprintf_r+0x2bc>)
 800593a:	2b00      	cmp	r3, #0
 800593c:	d072      	beq.n	8005a24 <_vfiprintf_r+0x234>
 800593e:	ab05      	add	r3, sp, #20
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	465a      	mov	r2, fp
 8005944:	4b5a      	ldr	r3, [pc, #360]	; (8005ab0 <_vfiprintf_r+0x2c0>)
 8005946:	9803      	ldr	r0, [sp, #12]
 8005948:	a906      	add	r1, sp, #24
 800594a:	f7fb fa3b 	bl	8000dc4 <_printf_float>
 800594e:	4681      	mov	r9, r0
 8005950:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005954:	d007      	beq.n	8005966 <_vfiprintf_r+0x176>
 8005956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005958:	444b      	add	r3, r9
 800595a:	930b      	str	r3, [sp, #44]	; 0x2c
 800595c:	f898 3000 	ldrb.w	r3, [r8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f47f af79 	bne.w	8005858 <_vfiprintf_r+0x68>
 8005966:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800596a:	065b      	lsls	r3, r3, #25
 800596c:	d418      	bmi.n	80059a0 <_vfiprintf_r+0x1b0>
 800596e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005970:	b01f      	add	sp, #124	; 0x7c
 8005972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005976:	f7fe fbb5 	bl	80040e4 <__sinit>
 800597a:	4b46      	ldr	r3, [pc, #280]	; (8005a94 <_vfiprintf_r+0x2a4>)
 800597c:	459b      	cmp	fp, r3
 800597e:	f47f af47 	bne.w	8005810 <_vfiprintf_r+0x20>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8005988:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800598c:	0718      	lsls	r0, r3, #28
 800598e:	f53f af4e 	bmi.w	800582e <_vfiprintf_r+0x3e>
 8005992:	4659      	mov	r1, fp
 8005994:	9803      	ldr	r0, [sp, #12]
 8005996:	f7fd f965 	bl	8002c64 <__swsetup_r>
 800599a:	2800      	cmp	r0, #0
 800599c:	f43f af4c 	beq.w	8005838 <_vfiprintf_r+0x48>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a4:	e7e4      	b.n	8005970 <_vfiprintf_r+0x180>
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80059ac:	e73a      	b.n	8005824 <_vfiprintf_r+0x34>
 80059ae:	ebb4 0a08 	subs.w	sl, r4, r8
 80059b2:	f43f af6f 	beq.w	8005894 <_vfiprintf_r+0xa4>
 80059b6:	e75f      	b.n	8005878 <_vfiprintf_r+0x88>
 80059b8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80059bc:	2a09      	cmp	r2, #9
 80059be:	bf88      	it	hi
 80059c0:	46a2      	movhi	sl, r4
 80059c2:	d89c      	bhi.n	80058fe <_vfiprintf_r+0x10e>
 80059c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c6:	e001      	b.n	80059cc <_vfiprintf_r+0x1dc>
 80059c8:	462c      	mov	r4, r5
 80059ca:	3501      	adds	r5, #1
 80059cc:	7829      	ldrb	r1, [r5, #0]
 80059ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80059d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80059da:	2a09      	cmp	r2, #9
 80059dc:	46aa      	mov	sl, r5
 80059de:	d9f3      	bls.n	80059c8 <_vfiprintf_r+0x1d8>
 80059e0:	292e      	cmp	r1, #46	; 0x2e
 80059e2:	f104 0502 	add.w	r5, r4, #2
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	d18b      	bne.n	8005902 <_vfiprintf_r+0x112>
 80059ea:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80059ee:	292a      	cmp	r1, #42	; 0x2a
 80059f0:	d12f      	bne.n	8005a52 <_vfiprintf_r+0x262>
 80059f2:	9b05      	ldr	r3, [sp, #20]
 80059f4:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	9207      	str	r2, [sp, #28]
 80059fc:	3304      	adds	r3, #4
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	9305      	str	r3, [sp, #20]
 8005a02:	f10a 0503 	add.w	r5, sl, #3
 8005a06:	f10a 0302 	add.w	r3, sl, #2
 8005a0a:	db38      	blt.n	8005a7e <_vfiprintf_r+0x28e>
 8005a0c:	4c25      	ldr	r4, [pc, #148]	; (8005aa4 <_vfiprintf_r+0x2b4>)
 8005a0e:	2203      	movs	r2, #3
 8005a10:	4620      	mov	r0, r4
 8005a12:	469a      	mov	sl, r3
 8005a14:	f7ff f874 	bl	8004b00 <memchr>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f47f af7a 	bne.w	8005912 <_vfiprintf_r+0x122>
 8005a1e:	46a8      	mov	r8, r5
 8005a20:	4655      	mov	r5, sl
 8005a22:	e77f      	b.n	8005924 <_vfiprintf_r+0x134>
 8005a24:	9b05      	ldr	r3, [sp, #20]
 8005a26:	3307      	adds	r3, #7
 8005a28:	f023 0307 	bic.w	r3, r3, #7
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	9305      	str	r3, [sp, #20]
 8005a30:	e791      	b.n	8005956 <_vfiprintf_r+0x166>
 8005a32:	4249      	negs	r1, r1
 8005a34:	f043 0302 	orr.w	r3, r3, #2
 8005a38:	9109      	str	r1, [sp, #36]	; 0x24
 8005a3a:	9306      	str	r3, [sp, #24]
 8005a3c:	e75d      	b.n	80058fa <_vfiprintf_r+0x10a>
 8005a3e:	ab05      	add	r3, sp, #20
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	465a      	mov	r2, fp
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <_vfiprintf_r+0x2c0>)
 8005a46:	9803      	ldr	r0, [sp, #12]
 8005a48:	a906      	add	r1, sp, #24
 8005a4a:	f7fb fce9 	bl	8001420 <_printf_i>
 8005a4e:	4681      	mov	r9, r0
 8005a50:	e77e      	b.n	8005950 <_vfiprintf_r+0x160>
 8005a52:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005a56:	2300      	movs	r3, #0
 8005a58:	2a09      	cmp	r2, #9
 8005a5a:	9307      	str	r3, [sp, #28]
 8005a5c:	d901      	bls.n	8005a62 <_vfiprintf_r+0x272>
 8005a5e:	e015      	b.n	8005a8c <_vfiprintf_r+0x29c>
 8005a60:	4655      	mov	r5, sl
 8005a62:	7869      	ldrb	r1, [r5, #1]
 8005a64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005a6c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005a70:	2a09      	cmp	r2, #9
 8005a72:	f105 0a01 	add.w	sl, r5, #1
 8005a76:	d9f3      	bls.n	8005a60 <_vfiprintf_r+0x270>
 8005a78:	3502      	adds	r5, #2
 8005a7a:	9307      	str	r3, [sp, #28]
 8005a7c:	e741      	b.n	8005902 <_vfiprintf_r+0x112>
 8005a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a82:	469a      	mov	sl, r3
 8005a84:	9207      	str	r2, [sp, #28]
 8005a86:	e73c      	b.n	8005902 <_vfiprintf_r+0x112>
 8005a88:	4644      	mov	r4, r8
 8005a8a:	e703      	b.n	8005894 <_vfiprintf_r+0xa4>
 8005a8c:	46aa      	mov	sl, r5
 8005a8e:	3501      	adds	r5, #1
 8005a90:	e737      	b.n	8005902 <_vfiprintf_r+0x112>
 8005a92:	bf00      	nop
 8005a94:	08011834 	.word	0x08011834
 8005a98:	08011814 	.word	0x08011814
 8005a9c:	080117f4 	.word	0x080117f4
 8005aa0:	080123dc 	.word	0x080123dc
 8005aa4:	080123e4 	.word	0x080123e4
 8005aa8:	080123e8 	.word	0x080123e8
 8005aac:	08000dc5 	.word	0x08000dc5
 8005ab0:	080057a5 	.word	0x080057a5

08005ab4 <vfiprintf>:
 8005ab4:	b410      	push	{r4}
 8005ab6:	4c04      	ldr	r4, [pc, #16]	; (8005ac8 <vfiprintf+0x14>)
 8005ab8:	4613      	mov	r3, r2
 8005aba:	460a      	mov	r2, r1
 8005abc:	4601      	mov	r1, r0
 8005abe:	6820      	ldr	r0, [r4, #0]
 8005ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ac4:	f7ff be94 	b.w	80057f0 <_vfiprintf_r>
 8005ac8:	20000004 	.word	0x20000004
 8005acc:	00000000 	.word	0x00000000

08005ad0 <nan>:
 8005ad0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ad8 <nan+0x8>
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	7ff80000 	.word	0x7ff80000

08005ae0 <_sbrk_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4c07      	ldr	r4, [pc, #28]	; (8005b00 <_sbrk_r+0x20>)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	f006 f982 	bl	800bdf4 <_sbrk>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d000      	beq.n	8005af6 <_sbrk_r+0x16>
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0fb      	beq.n	8005af4 <_sbrk_r+0x14>
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	20009540 	.word	0x20009540

08005b04 <nanf>:
 8005b04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b0c <nanf+0x8>
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	7fc00000 	.word	0x7fc00000

08005b10 <__sread>:
 8005b10:	b510      	push	{r4, lr}
 8005b12:	460c      	mov	r4, r1
 8005b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b18:	f000 fb6c 	bl	80061f4 <_read_r>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	db03      	blt.n	8005b28 <__sread+0x18>
 8005b20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b22:	4403      	add	r3, r0
 8005b24:	6563      	str	r3, [r4, #84]	; 0x54
 8005b26:	bd10      	pop	{r4, pc}
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	bf00      	nop

08005b34 <__seofread>:
 8005b34:	2000      	movs	r0, #0
 8005b36:	4770      	bx	lr

08005b38 <__swrite>:
 8005b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b42:	461f      	mov	r7, r3
 8005b44:	05d3      	lsls	r3, r2, #23
 8005b46:	460c      	mov	r4, r1
 8005b48:	4605      	mov	r5, r0
 8005b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4e:	d409      	bmi.n	8005b64 <__swrite+0x2c>
 8005b50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b54:	81a2      	strh	r2, [r4, #12]
 8005b56:	463b      	mov	r3, r7
 8005b58:	4632      	mov	r2, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b60:	f000 b888 	b.w	8005c74 <_write_r>
 8005b64:	2200      	movs	r2, #0
 8005b66:	2302      	movs	r3, #2
 8005b68:	f000 fa9c 	bl	80060a4 <_lseek_r>
 8005b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b74:	e7ec      	b.n	8005b50 <__swrite+0x18>
 8005b76:	bf00      	nop

08005b78 <__sseek>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b80:	f000 fa90 	bl	80060a4 <_lseek_r>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	1c42      	adds	r2, r0, #1
 8005b88:	bf0e      	itee	eq
 8005b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b92:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b94:	81a3      	strh	r3, [r4, #12]
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <__sclose>:
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	f000 b8a4 	b.w	8005ce8 <_close_r>

08005ba0 <strncmp>:
 8005ba0:	2a00      	cmp	r2, #0
 8005ba2:	d046      	beq.n	8005c32 <strncmp+0x92>
 8005ba4:	ea40 0301 	orr.w	r3, r0, r1
 8005ba8:	f013 0303 	ands.w	r3, r3, #3
 8005bac:	b4f0      	push	{r4, r5, r6, r7}
 8005bae:	d125      	bne.n	8005bfc <strncmp+0x5c>
 8005bb0:	2a03      	cmp	r2, #3
 8005bb2:	d923      	bls.n	8005bfc <strncmp+0x5c>
 8005bb4:	6804      	ldr	r4, [r0, #0]
 8005bb6:	680d      	ldr	r5, [r1, #0]
 8005bb8:	42ac      	cmp	r4, r5
 8005bba:	d13c      	bne.n	8005c36 <strncmp+0x96>
 8005bbc:	3a04      	subs	r2, #4
 8005bbe:	d035      	beq.n	8005c2c <strncmp+0x8c>
 8005bc0:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8005bc4:	ea25 0404 	bic.w	r4, r5, r4
 8005bc8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8005bcc:	d12e      	bne.n	8005c2c <strncmp+0x8c>
 8005bce:	1d07      	adds	r7, r0, #4
 8005bd0:	1d0d      	adds	r5, r1, #4
 8005bd2:	e00d      	b.n	8005bf0 <strncmp+0x50>
 8005bd4:	f857 3b04 	ldr.w	r3, [r7], #4
 8005bd8:	680e      	ldr	r6, [r1, #0]
 8005bda:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8005bde:	42b3      	cmp	r3, r6
 8005be0:	ea24 0403 	bic.w	r4, r4, r3
 8005be4:	d127      	bne.n	8005c36 <strncmp+0x96>
 8005be6:	3a04      	subs	r2, #4
 8005be8:	d020      	beq.n	8005c2c <strncmp+0x8c>
 8005bea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8005bee:	d11d      	bne.n	8005c2c <strncmp+0x8c>
 8005bf0:	2a03      	cmp	r2, #3
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f105 0504 	add.w	r5, r5, #4
 8005bfa:	d8eb      	bhi.n	8005bd4 <strncmp+0x34>
 8005bfc:	7803      	ldrb	r3, [r0, #0]
 8005bfe:	780d      	ldrb	r5, [r1, #0]
 8005c00:	429d      	cmp	r5, r3
 8005c02:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8005c06:	d10e      	bne.n	8005c26 <strncmp+0x86>
 8005c08:	b186      	cbz	r6, 8005c2c <strncmp+0x8c>
 8005c0a:	b17b      	cbz	r3, 8005c2c <strncmp+0x8c>
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	e002      	b.n	8005c16 <strncmp+0x76>
 8005c10:	1882      	adds	r2, r0, r2
 8005c12:	d00b      	beq.n	8005c2c <strncmp+0x8c>
 8005c14:	b153      	cbz	r3, 8005c2c <strncmp+0x8c>
 8005c16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005c1a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005c1e:	42ab      	cmp	r3, r5
 8005c20:	eba6 0204 	sub.w	r2, r6, r4
 8005c24:	d0f4      	beq.n	8005c10 <strncmp+0x70>
 8005c26:	1b58      	subs	r0, r3, r5
 8005c28:	bcf0      	pop	{r4, r5, r6, r7}
 8005c2a:	4770      	bx	lr
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	bcf0      	pop	{r4, r5, r6, r7}
 8005c30:	4770      	bx	lr
 8005c32:	4610      	mov	r0, r2
 8005c34:	4770      	bx	lr
 8005c36:	7803      	ldrb	r3, [r0, #0]
 8005c38:	780d      	ldrb	r5, [r1, #0]
 8005c3a:	429d      	cmp	r5, r3
 8005c3c:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8005c40:	d0e3      	beq.n	8005c0a <strncmp+0x6a>
 8005c42:	e7f0      	b.n	8005c26 <strncmp+0x86>

08005c44 <_wctomb_r>:
 8005c44:	b410      	push	{r4}
 8005c46:	4c03      	ldr	r4, [pc, #12]	; (8005c54 <_wctomb_r+0x10>)
 8005c48:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8005c4c:	46a4      	mov	ip, r4
 8005c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c52:	4760      	bx	ip
 8005c54:	2000006c 	.word	0x2000006c

08005c58 <__ascii_wctomb>:
 8005c58:	b149      	cbz	r1, 8005c6e <__ascii_wctomb+0x16>
 8005c5a:	2aff      	cmp	r2, #255	; 0xff
 8005c5c:	d802      	bhi.n	8005c64 <__ascii_wctomb+0xc>
 8005c5e:	700a      	strb	r2, [r1, #0]
 8005c60:	2001      	movs	r0, #1
 8005c62:	4770      	bx	lr
 8005c64:	238a      	movs	r3, #138	; 0x8a
 8005c66:	6003      	str	r3, [r0, #0]
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c6c:	4770      	bx	lr
 8005c6e:	4608      	mov	r0, r1
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop

08005c74 <_write_r>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	460d      	mov	r5, r1
 8005c78:	4c08      	ldr	r4, [pc, #32]	; (8005c9c <_write_r+0x28>)
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4628      	mov	r0, r5
 8005c82:	2300      	movs	r3, #0
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	f006 f864 	bl	800bd52 <_write>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d000      	beq.n	8005c90 <_write_r+0x1c>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0fb      	beq.n	8005c8e <_write_r+0x1a>
 8005c96:	6033      	str	r3, [r6, #0]
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20009540 	.word	0x20009540

08005ca0 <__assert_func>:
 8005ca0:	b500      	push	{lr}
 8005ca2:	4c0a      	ldr	r4, [pc, #40]	; (8005ccc <__assert_func+0x2c>)
 8005ca4:	6826      	ldr	r6, [r4, #0]
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	b085      	sub	sp, #20
 8005caa:	461c      	mov	r4, r3
 8005cac:	68f0      	ldr	r0, [r6, #12]
 8005cae:	b152      	cbz	r2, 8005cc6 <__assert_func+0x26>
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <__assert_func+0x30>)
 8005cb2:	9100      	str	r1, [sp, #0]
 8005cb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cb8:	4906      	ldr	r1, [pc, #24]	; (8005cd4 <__assert_func+0x34>)
 8005cba:	462b      	mov	r3, r5
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	f000 f833 	bl	8005d28 <fiprintf>
 8005cc2:	f000 faad 	bl	8006220 <abort>
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <__assert_func+0x38>)
 8005cc8:	461a      	mov	r2, r3
 8005cca:	e7f2      	b.n	8005cb2 <__assert_func+0x12>
 8005ccc:	20000004 	.word	0x20000004
 8005cd0:	080123f0 	.word	0x080123f0
 8005cd4:	08012400 	.word	0x08012400
 8005cd8:	080123fc 	.word	0x080123fc

08005cdc <__assert>:
 8005cdc:	b508      	push	{r3, lr}
 8005cde:	4613      	mov	r3, r2
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f7ff ffdd 	bl	8005ca0 <__assert_func>
 8005ce6:	bf00      	nop

08005ce8 <_close_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4c07      	ldr	r4, [pc, #28]	; (8005d08 <_close_r+0x20>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4605      	mov	r5, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	f006 f849 	bl	800bd8a <_close>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d000      	beq.n	8005cfe <_close_r+0x16>
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0fb      	beq.n	8005cfc <_close_r+0x14>
 8005d04:	602b      	str	r3, [r5, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20009540 	.word	0x20009540

08005d0c <_fiprintf_r>:
 8005d0c:	b40c      	push	{r2, r3}
 8005d0e:	b500      	push	{lr}
 8005d10:	b083      	sub	sp, #12
 8005d12:	ab04      	add	r3, sp, #16
 8005d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	f7ff fd69 	bl	80057f0 <_vfiprintf_r>
 8005d1e:	b003      	add	sp, #12
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b002      	add	sp, #8
 8005d26:	4770      	bx	lr

08005d28 <fiprintf>:
 8005d28:	b40e      	push	{r1, r2, r3}
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	ab05      	add	r3, sp, #20
 8005d30:	4c06      	ldr	r4, [pc, #24]	; (8005d4c <fiprintf+0x24>)
 8005d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	4601      	mov	r1, r0
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	f7ff fd58 	bl	80057f0 <_vfiprintf_r>
 8005d40:	b003      	add	sp, #12
 8005d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d46:	b003      	add	sp, #12
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000004 	.word	0x20000004

08005d50 <_fstat_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	460b      	mov	r3, r1
 8005d54:	4c07      	ldr	r4, [pc, #28]	; (8005d74 <_fstat_r+0x24>)
 8005d56:	4605      	mov	r5, r0
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	f006 f81f 	bl	800bda2 <_fstat>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d000      	beq.n	8005d6a <_fstat_r+0x1a>
 8005d68:	bd38      	pop	{r3, r4, r5, pc}
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0fb      	beq.n	8005d68 <_fstat_r+0x18>
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20009540 	.word	0x20009540

08005d78 <__sfvwrite_r>:
 8005d78:	6893      	ldr	r3, [r2, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8102 	beq.w	8005f84 <__sfvwrite_r+0x20c>
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	0719      	lsls	r1, r3, #28
 8005d8e:	b083      	sub	sp, #12
 8005d90:	4682      	mov	sl, r0
 8005d92:	4690      	mov	r8, r2
 8005d94:	d535      	bpl.n	8005e02 <__sfvwrite_r+0x8a>
 8005d96:	6922      	ldr	r2, [r4, #16]
 8005d98:	b39a      	cbz	r2, 8005e02 <__sfvwrite_r+0x8a>
 8005d9a:	f013 0202 	ands.w	r2, r3, #2
 8005d9e:	f8d8 6000 	ldr.w	r6, [r8]
 8005da2:	d03d      	beq.n	8005e20 <__sfvwrite_r+0xa8>
 8005da4:	2700      	movs	r7, #0
 8005da6:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8005daa:	f8d4 c020 	ldr.w	ip, [r4, #32]
 8005dae:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800607c <__sfvwrite_r+0x304>
 8005db2:	463d      	mov	r5, r7
 8005db4:	454d      	cmp	r5, r9
 8005db6:	462b      	mov	r3, r5
 8005db8:	463a      	mov	r2, r7
 8005dba:	bf28      	it	cs
 8005dbc:	464b      	movcs	r3, r9
 8005dbe:	4661      	mov	r1, ip
 8005dc0:	4650      	mov	r0, sl
 8005dc2:	b1d5      	cbz	r5, 8005dfa <__sfvwrite_r+0x82>
 8005dc4:	47d8      	blx	fp
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f340 80d2 	ble.w	8005f70 <__sfvwrite_r+0x1f8>
 8005dcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005dd0:	1a1b      	subs	r3, r3, r0
 8005dd2:	4407      	add	r7, r0
 8005dd4:	1a2d      	subs	r5, r5, r0
 8005dd6:	f8c8 3008 	str.w	r3, [r8, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80b7 	beq.w	8005f4e <__sfvwrite_r+0x1d6>
 8005de0:	f8d4 c020 	ldr.w	ip, [r4, #32]
 8005de4:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8005de8:	454d      	cmp	r5, r9
 8005dea:	462b      	mov	r3, r5
 8005dec:	463a      	mov	r2, r7
 8005dee:	bf28      	it	cs
 8005df0:	464b      	movcs	r3, r9
 8005df2:	4661      	mov	r1, ip
 8005df4:	4650      	mov	r0, sl
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	d1e4      	bne.n	8005dc4 <__sfvwrite_r+0x4c>
 8005dfa:	e9d6 7500 	ldrd	r7, r5, [r6]
 8005dfe:	3608      	adds	r6, #8
 8005e00:	e7d8      	b.n	8005db4 <__sfvwrite_r+0x3c>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4650      	mov	r0, sl
 8005e06:	f7fc ff2d 	bl	8002c64 <__swsetup_r>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	f040 8130 	bne.w	8006070 <__sfvwrite_r+0x2f8>
 8005e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e14:	f8d8 6000 	ldr.w	r6, [r8]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f013 0202 	ands.w	r2, r3, #2
 8005e1e:	d1c1      	bne.n	8005da4 <__sfvwrite_r+0x2c>
 8005e20:	f013 0901 	ands.w	r9, r3, #1
 8005e24:	f040 80b0 	bne.w	8005f88 <__sfvwrite_r+0x210>
 8005e28:	68a7      	ldr	r7, [r4, #8]
 8005e2a:	6820      	ldr	r0, [r4, #0]
 8005e2c:	464d      	mov	r5, r9
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	d054      	beq.n	8005edc <__sfvwrite_r+0x164>
 8005e32:	059a      	lsls	r2, r3, #22
 8005e34:	f140 80bc 	bpl.w	8005fb0 <__sfvwrite_r+0x238>
 8005e38:	42af      	cmp	r7, r5
 8005e3a:	46bb      	mov	fp, r7
 8005e3c:	f200 80e7 	bhi.w	800600e <__sfvwrite_r+0x296>
 8005e40:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8005e44:	d02f      	beq.n	8005ea6 <__sfvwrite_r+0x12e>
 8005e46:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 8005e4a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005e4e:	eba0 0b01 	sub.w	fp, r0, r1
 8005e52:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005e56:	1c68      	adds	r0, r5, #1
 8005e58:	107f      	asrs	r7, r7, #1
 8005e5a:	4458      	add	r0, fp
 8005e5c:	42b8      	cmp	r0, r7
 8005e5e:	463a      	mov	r2, r7
 8005e60:	bf84      	itt	hi
 8005e62:	4607      	movhi	r7, r0
 8005e64:	463a      	movhi	r2, r7
 8005e66:	055b      	lsls	r3, r3, #21
 8005e68:	f140 80e9 	bpl.w	800603e <__sfvwrite_r+0x2c6>
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4650      	mov	r0, sl
 8005e70:	f7ff fc16 	bl	80056a0 <_malloc_r>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f000 80f5 	beq.w	8006064 <__sfvwrite_r+0x2ec>
 8005e7a:	465a      	mov	r2, fp
 8005e7c:	6921      	ldr	r1, [r4, #16]
 8005e7e:	9001      	str	r0, [sp, #4]
 8005e80:	f7fa fdf2 	bl	8000a68 <memcpy>
 8005e84:	89a2      	ldrh	r2, [r4, #12]
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e90:	81a2      	strh	r2, [r4, #12]
 8005e92:	eba7 020b 	sub.w	r2, r7, fp
 8005e96:	eb03 000b 	add.w	r0, r3, fp
 8005e9a:	6167      	str	r7, [r4, #20]
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	6020      	str	r0, [r4, #0]
 8005ea0:	60a2      	str	r2, [r4, #8]
 8005ea2:	462f      	mov	r7, r5
 8005ea4:	46ab      	mov	fp, r5
 8005ea6:	465a      	mov	r2, fp
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f000 f911 	bl	80060d0 <memmove>
 8005eae:	68a2      	ldr	r2, [r4, #8]
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	1bd2      	subs	r2, r2, r7
 8005eb4:	445b      	add	r3, fp
 8005eb6:	462f      	mov	r7, r5
 8005eb8:	60a2      	str	r2, [r4, #8]
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ec2:	1bdb      	subs	r3, r3, r7
 8005ec4:	44b9      	add	r9, r7
 8005ec6:	f8c8 3008 	str.w	r3, [r8, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d03f      	beq.n	8005f4e <__sfvwrite_r+0x1d6>
 8005ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed2:	68a7      	ldr	r7, [r4, #8]
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	d1aa      	bne.n	8005e32 <__sfvwrite_r+0xba>
 8005edc:	e9d6 9500 	ldrd	r9, r5, [r6]
 8005ee0:	3608      	adds	r6, #8
 8005ee2:	e7a4      	b.n	8005e2e <__sfvwrite_r+0xb6>
 8005ee4:	f10b 0308 	add.w	r3, fp, #8
 8005ee8:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8005eec:	469b      	mov	fp, r3
 8005eee:	3308      	adds	r3, #8
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	d0f9      	beq.n	8005ee8 <__sfvwrite_r+0x170>
 8005ef4:	463a      	mov	r2, r7
 8005ef6:	210a      	movs	r1, #10
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7fe fe01 	bl	8004b00 <memchr>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d053      	beq.n	8005faa <__sfvwrite_r+0x232>
 8005f02:	3001      	adds	r0, #1
 8005f04:	eba0 0906 	sub.w	r9, r0, r6
 8005f08:	464b      	mov	r3, r9
 8005f0a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8005f0e:	6820      	ldr	r0, [r4, #0]
 8005f10:	42bb      	cmp	r3, r7
 8005f12:	bf28      	it	cs
 8005f14:	463b      	movcs	r3, r7
 8005f16:	4288      	cmp	r0, r1
 8005f18:	d903      	bls.n	8005f22 <__sfvwrite_r+0x1aa>
 8005f1a:	68a5      	ldr	r5, [r4, #8]
 8005f1c:	4415      	add	r5, r2
 8005f1e:	42ab      	cmp	r3, r5
 8005f20:	dc19      	bgt.n	8005f56 <__sfvwrite_r+0x1de>
 8005f22:	429a      	cmp	r2, r3
 8005f24:	dc7d      	bgt.n	8006022 <__sfvwrite_r+0x2aa>
 8005f26:	4613      	mov	r3, r2
 8005f28:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005f2a:	6a21      	ldr	r1, [r4, #32]
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4650      	mov	r0, sl
 8005f30:	47a8      	blx	r5
 8005f32:	1e05      	subs	r5, r0, #0
 8005f34:	dd1c      	ble.n	8005f70 <__sfvwrite_r+0x1f8>
 8005f36:	ebb9 0905 	subs.w	r9, r9, r5
 8005f3a:	d06b      	beq.n	8006014 <__sfvwrite_r+0x29c>
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f42:	1b5b      	subs	r3, r3, r5
 8005f44:	442e      	add	r6, r5
 8005f46:	1b7f      	subs	r7, r7, r5
 8005f48:	f8c8 3008 	str.w	r3, [r8, #8]
 8005f4c:	bb13      	cbnz	r3, 8005f94 <__sfvwrite_r+0x21c>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	b003      	add	sp, #12
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	4631      	mov	r1, r6
 8005f58:	462a      	mov	r2, r5
 8005f5a:	f000 f8b9 	bl	80060d0 <memmove>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	442b      	add	r3, r5
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	4621      	mov	r1, r4
 8005f66:	4650      	mov	r0, sl
 8005f68:	f7fd ff92 	bl	8003e90 <_fflush_r>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d0e2      	beq.n	8005f36 <__sfvwrite_r+0x1be>
 8005f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	b003      	add	sp, #12
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	2000      	movs	r0, #0
 8005f86:	4770      	bx	lr
 8005f88:	4633      	mov	r3, r6
 8005f8a:	4691      	mov	r9, r2
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4617      	mov	r7, r2
 8005f90:	464e      	mov	r6, r9
 8005f92:	469b      	mov	fp, r3
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	d0a5      	beq.n	8005ee4 <__sfvwrite_r+0x16c>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d1b5      	bne.n	8005f08 <__sfvwrite_r+0x190>
 8005f9c:	463a      	mov	r2, r7
 8005f9e:	210a      	movs	r1, #10
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7fe fdad 	bl	8004b00 <memchr>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d1ab      	bne.n	8005f02 <__sfvwrite_r+0x18a>
 8005faa:	1c7b      	adds	r3, r7, #1
 8005fac:	4699      	mov	r9, r3
 8005fae:	e7ac      	b.n	8005f0a <__sfvwrite_r+0x192>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	4283      	cmp	r3, r0
 8005fb4:	d315      	bcc.n	8005fe2 <__sfvwrite_r+0x26a>
 8005fb6:	6961      	ldr	r1, [r4, #20]
 8005fb8:	42a9      	cmp	r1, r5
 8005fba:	d812      	bhi.n	8005fe2 <__sfvwrite_r+0x26a>
 8005fbc:	4b2e      	ldr	r3, [pc, #184]	; (8006078 <__sfvwrite_r+0x300>)
 8005fbe:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005fc0:	429d      	cmp	r5, r3
 8005fc2:	bf94      	ite	ls
 8005fc4:	462b      	movls	r3, r5
 8005fc6:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8005fca:	464a      	mov	r2, r9
 8005fcc:	fb93 f3f1 	sdiv	r3, r3, r1
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	6a21      	ldr	r1, [r4, #32]
 8005fd8:	47b8      	blx	r7
 8005fda:	1e07      	subs	r7, r0, #0
 8005fdc:	ddc8      	ble.n	8005f70 <__sfvwrite_r+0x1f8>
 8005fde:	1bed      	subs	r5, r5, r7
 8005fe0:	e76d      	b.n	8005ebe <__sfvwrite_r+0x146>
 8005fe2:	42af      	cmp	r7, r5
 8005fe4:	bf28      	it	cs
 8005fe6:	462f      	movcs	r7, r5
 8005fe8:	463a      	mov	r2, r7
 8005fea:	4649      	mov	r1, r9
 8005fec:	f000 f870 	bl	80060d0 <memmove>
 8005ff0:	68a3      	ldr	r3, [r4, #8]
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	1bdb      	subs	r3, r3, r7
 8005ff6:	443a      	add	r2, r7
 8005ff8:	60a3      	str	r3, [r4, #8]
 8005ffa:	6022      	str	r2, [r4, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1ee      	bne.n	8005fde <__sfvwrite_r+0x266>
 8006000:	4621      	mov	r1, r4
 8006002:	4650      	mov	r0, sl
 8006004:	f7fd ff44 	bl	8003e90 <_fflush_r>
 8006008:	2800      	cmp	r0, #0
 800600a:	d0e8      	beq.n	8005fde <__sfvwrite_r+0x266>
 800600c:	e7b0      	b.n	8005f70 <__sfvwrite_r+0x1f8>
 800600e:	462f      	mov	r7, r5
 8006010:	46ab      	mov	fp, r5
 8006012:	e748      	b.n	8005ea6 <__sfvwrite_r+0x12e>
 8006014:	4621      	mov	r1, r4
 8006016:	4650      	mov	r0, sl
 8006018:	f7fd ff3a 	bl	8003e90 <_fflush_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	d08e      	beq.n	8005f3e <__sfvwrite_r+0x1c6>
 8006020:	e7a6      	b.n	8005f70 <__sfvwrite_r+0x1f8>
 8006022:	461a      	mov	r2, r3
 8006024:	4631      	mov	r1, r6
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	f000 f852 	bl	80060d0 <memmove>
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	68a1      	ldr	r1, [r4, #8]
 8006030:	6822      	ldr	r2, [r4, #0]
 8006032:	1ac9      	subs	r1, r1, r3
 8006034:	441a      	add	r2, r3
 8006036:	60a1      	str	r1, [r4, #8]
 8006038:	6022      	str	r2, [r4, #0]
 800603a:	461d      	mov	r5, r3
 800603c:	e77b      	b.n	8005f36 <__sfvwrite_r+0x1be>
 800603e:	4650      	mov	r0, sl
 8006040:	f000 f8b2 	bl	80061a8 <_realloc_r>
 8006044:	4603      	mov	r3, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	f47f af23 	bne.w	8005e92 <__sfvwrite_r+0x11a>
 800604c:	6921      	ldr	r1, [r4, #16]
 800604e:	4650      	mov	r0, sl
 8006050:	f7ff fad0 	bl	80055f4 <_free_r>
 8006054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006058:	220c      	movs	r2, #12
 800605a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605e:	f8ca 2000 	str.w	r2, [sl]
 8006062:	e787      	b.n	8005f74 <__sfvwrite_r+0x1fc>
 8006064:	230c      	movs	r3, #12
 8006066:	f8ca 3000 	str.w	r3, [sl]
 800606a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606e:	e781      	b.n	8005f74 <__sfvwrite_r+0x1fc>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006074:	e76c      	b.n	8005f50 <__sfvwrite_r+0x1d8>
 8006076:	bf00      	nop
 8006078:	7ffffffe 	.word	0x7ffffffe
 800607c:	7ffffc00 	.word	0x7ffffc00

08006080 <_isatty_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4c07      	ldr	r4, [pc, #28]	; (80060a0 <_isatty_r+0x20>)
 8006084:	2300      	movs	r3, #0
 8006086:	4605      	mov	r5, r0
 8006088:	4608      	mov	r0, r1
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	f005 fe99 	bl	800bdc2 <_isatty>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d000      	beq.n	8006096 <_isatty_r+0x16>
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0fb      	beq.n	8006094 <_isatty_r+0x14>
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	20009540 	.word	0x20009540

080060a4 <_lseek_r>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	460d      	mov	r5, r1
 80060a8:	4c08      	ldr	r4, [pc, #32]	; (80060cc <_lseek_r+0x28>)
 80060aa:	4611      	mov	r1, r2
 80060ac:	4606      	mov	r6, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	4628      	mov	r0, r5
 80060b2:	2300      	movs	r3, #0
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	f005 fe8f 	bl	800bdd8 <_lseek>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d000      	beq.n	80060c0 <_lseek_r+0x1c>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0fb      	beq.n	80060be <_lseek_r+0x1a>
 80060c6:	6033      	str	r3, [r6, #0]
 80060c8:	bd70      	pop	{r4, r5, r6, pc}
 80060ca:	bf00      	nop
 80060cc:	20009540 	.word	0x20009540

080060d0 <memmove>:
 80060d0:	4288      	cmp	r0, r1
 80060d2:	b4f0      	push	{r4, r5, r6, r7}
 80060d4:	d90d      	bls.n	80060f2 <memmove+0x22>
 80060d6:	188b      	adds	r3, r1, r2
 80060d8:	4283      	cmp	r3, r0
 80060da:	d90a      	bls.n	80060f2 <memmove+0x22>
 80060dc:	1884      	adds	r4, r0, r2
 80060de:	b132      	cbz	r2, 80060ee <memmove+0x1e>
 80060e0:	4622      	mov	r2, r4
 80060e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ea:	4299      	cmp	r1, r3
 80060ec:	d1f9      	bne.n	80060e2 <memmove+0x12>
 80060ee:	bcf0      	pop	{r4, r5, r6, r7}
 80060f0:	4770      	bx	lr
 80060f2:	2a0f      	cmp	r2, #15
 80060f4:	d80e      	bhi.n	8006114 <memmove+0x44>
 80060f6:	4603      	mov	r3, r0
 80060f8:	1e54      	subs	r4, r2, #1
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d0f7      	beq.n	80060ee <memmove+0x1e>
 80060fe:	3401      	adds	r4, #1
 8006100:	440c      	add	r4, r1
 8006102:	3b01      	subs	r3, #1
 8006104:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006108:	f803 2f01 	strb.w	r2, [r3, #1]!
 800610c:	42a1      	cmp	r1, r4
 800610e:	d1f9      	bne.n	8006104 <memmove+0x34>
 8006110:	bcf0      	pop	{r4, r5, r6, r7}
 8006112:	4770      	bx	lr
 8006114:	ea40 0301 	orr.w	r3, r0, r1
 8006118:	079b      	lsls	r3, r3, #30
 800611a:	d13b      	bne.n	8006194 <memmove+0xc4>
 800611c:	f1a2 0710 	sub.w	r7, r2, #16
 8006120:	093f      	lsrs	r7, r7, #4
 8006122:	f101 0620 	add.w	r6, r1, #32
 8006126:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800612a:	f101 0310 	add.w	r3, r1, #16
 800612e:	f100 0410 	add.w	r4, r0, #16
 8006132:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8006136:	f844 5c10 	str.w	r5, [r4, #-16]
 800613a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800613e:	f844 5c0c 	str.w	r5, [r4, #-12]
 8006142:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8006146:	f844 5c08 	str.w	r5, [r4, #-8]
 800614a:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800614e:	f844 5c04 	str.w	r5, [r4, #-4]
 8006152:	3310      	adds	r3, #16
 8006154:	42b3      	cmp	r3, r6
 8006156:	f104 0410 	add.w	r4, r4, #16
 800615a:	d1ea      	bne.n	8006132 <memmove+0x62>
 800615c:	1c7b      	adds	r3, r7, #1
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	f012 0f0c 	tst.w	r2, #12
 8006164:	4419      	add	r1, r3
 8006166:	f002 050f 	and.w	r5, r2, #15
 800616a:	4403      	add	r3, r0
 800616c:	d015      	beq.n	800619a <memmove+0xca>
 800616e:	3d04      	subs	r5, #4
 8006170:	08ad      	lsrs	r5, r5, #2
 8006172:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 8006176:	1f1c      	subs	r4, r3, #4
 8006178:	460e      	mov	r6, r1
 800617a:	f856 7b04 	ldr.w	r7, [r6], #4
 800617e:	f844 7f04 	str.w	r7, [r4, #4]!
 8006182:	4564      	cmp	r4, ip
 8006184:	d1f9      	bne.n	800617a <memmove+0xaa>
 8006186:	3501      	adds	r5, #1
 8006188:	00ad      	lsls	r5, r5, #2
 800618a:	442b      	add	r3, r5
 800618c:	4429      	add	r1, r5
 800618e:	f002 0203 	and.w	r2, r2, #3
 8006192:	e7b1      	b.n	80060f8 <memmove+0x28>
 8006194:	1e54      	subs	r4, r2, #1
 8006196:	4603      	mov	r3, r0
 8006198:	e7b1      	b.n	80060fe <memmove+0x2e>
 800619a:	462a      	mov	r2, r5
 800619c:	e7ac      	b.n	80060f8 <memmove+0x28>
 800619e:	bf00      	nop

080061a0 <__malloc_lock>:
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop

080061a4 <__malloc_unlock>:
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop

080061a8 <_realloc_r>:
 80061a8:	b309      	cbz	r1, 80061ee <_realloc_r+0x46>
 80061aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ac:	4614      	mov	r4, r2
 80061ae:	b1ca      	cbz	r2, 80061e4 <_realloc_r+0x3c>
 80061b0:	4606      	mov	r6, r0
 80061b2:	460d      	mov	r5, r1
 80061b4:	f000 f83c 	bl	8006230 <_malloc_usable_size_r>
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d302      	bcc.n	80061c2 <_realloc_r+0x1a>
 80061bc:	462f      	mov	r7, r5
 80061be:	4638      	mov	r0, r7
 80061c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c2:	4621      	mov	r1, r4
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff fa6b 	bl	80056a0 <_malloc_r>
 80061ca:	4607      	mov	r7, r0
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d0f6      	beq.n	80061be <_realloc_r+0x16>
 80061d0:	4622      	mov	r2, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa fc48 	bl	8000a68 <memcpy>
 80061d8:	4630      	mov	r0, r6
 80061da:	4629      	mov	r1, r5
 80061dc:	f7ff fa0a 	bl	80055f4 <_free_r>
 80061e0:	4638      	mov	r0, r7
 80061e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e4:	4627      	mov	r7, r4
 80061e6:	f7ff fa05 	bl	80055f4 <_free_r>
 80061ea:	4638      	mov	r0, r7
 80061ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ee:	4611      	mov	r1, r2
 80061f0:	f7ff ba56 	b.w	80056a0 <_malloc_r>

080061f4 <_read_r>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	460d      	mov	r5, r1
 80061f8:	4c08      	ldr	r4, [pc, #32]	; (800621c <_read_r+0x28>)
 80061fa:	4611      	mov	r1, r2
 80061fc:	4606      	mov	r6, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	4628      	mov	r0, r5
 8006202:	2300      	movs	r3, #0
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	f005 fd87 	bl	800bd18 <_read>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d000      	beq.n	8006210 <_read_r+0x1c>
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0fb      	beq.n	800620e <_read_r+0x1a>
 8006216:	6033      	str	r3, [r6, #0]
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	bf00      	nop
 800621c:	20009540 	.word	0x20009540

08006220 <abort>:
 8006220:	b508      	push	{r3, lr}
 8006222:	2006      	movs	r0, #6
 8006224:	f000 f892 	bl	800634c <raise>
 8006228:	2001      	movs	r0, #1
 800622a:	f005 fd6b 	bl	800bd04 <_exit>
 800622e:	bf00      	nop

08006230 <_malloc_usable_size_r>:
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f18      	subs	r0, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfbc      	itt	lt
 800623a:	580b      	ldrlt	r3, [r1, r0]
 800623c:	18c0      	addlt	r0, r0, r3
 800623e:	4770      	bx	lr

08006240 <_init_signal_r.part.0>:
 8006240:	b510      	push	{r4, lr}
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	4604      	mov	r4, r0
 8006246:	f7ff fa2b 	bl	80056a0 <_malloc_r>
 800624a:	6460      	str	r0, [r4, #68]	; 0x44
 800624c:	b140      	cbz	r0, 8006260 <_init_signal_r.part.0+0x20>
 800624e:	1f03      	subs	r3, r0, #4
 8006250:	2200      	movs	r2, #0
 8006252:	307c      	adds	r0, #124	; 0x7c
 8006254:	f843 2f04 	str.w	r2, [r3, #4]!
 8006258:	4283      	cmp	r3, r0
 800625a:	d1fb      	bne.n	8006254 <_init_signal_r.part.0+0x14>
 800625c:	2000      	movs	r0, #0
 800625e:	bd10      	pop	{r4, pc}
 8006260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop

08006268 <_init_signal_r>:
 8006268:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800626a:	b10b      	cbz	r3, 8006270 <_init_signal_r+0x8>
 800626c:	2000      	movs	r0, #0
 800626e:	4770      	bx	lr
 8006270:	e7e6      	b.n	8006240 <_init_signal_r.part.0>
 8006272:	bf00      	nop

08006274 <_signal_r>:
 8006274:	291f      	cmp	r1, #31
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	4605      	mov	r5, r0
 800627a:	d808      	bhi.n	800628e <_signal_r+0x1a>
 800627c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800627e:	4616      	mov	r6, r2
 8006280:	460c      	mov	r4, r1
 8006282:	b14b      	cbz	r3, 8006298 <_signal_r+0x24>
 8006284:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006288:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	2216      	movs	r2, #22
 8006290:	6002      	str	r2, [r0, #0]
 8006292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f7ff ffd2 	bl	8006240 <_init_signal_r.part.0>
 800629c:	b908      	cbnz	r0, 80062a2 <_signal_r+0x2e>
 800629e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80062a0:	e7f0      	b.n	8006284 <_signal_r+0x10>
 80062a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a6:	bd70      	pop	{r4, r5, r6, pc}

080062a8 <_raise_r>:
 80062a8:	291f      	cmp	r1, #31
 80062aa:	b538      	push	{r3, r4, r5, lr}
 80062ac:	d821      	bhi.n	80062f2 <_raise_r+0x4a>
 80062ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062b0:	4605      	mov	r5, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	b16a      	cbz	r2, 80062d2 <_raise_r+0x2a>
 80062b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062ba:	b153      	cbz	r3, 80062d2 <_raise_r+0x2a>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d016      	beq.n	80062ee <_raise_r+0x46>
 80062c0:	1c59      	adds	r1, r3, #1
 80062c2:	d010      	beq.n	80062e6 <_raise_r+0x3e>
 80062c4:	2500      	movs	r5, #0
 80062c6:	4620      	mov	r0, r4
 80062c8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 80062cc:	4798      	blx	r3
 80062ce:	4628      	mov	r0, r5
 80062d0:	bd38      	pop	{r3, r4, r5, pc}
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 f870 	bl	80063b8 <_getpid_r>
 80062d8:	4622      	mov	r2, r4
 80062da:	4601      	mov	r1, r0
 80062dc:	4628      	mov	r0, r5
 80062de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062e2:	f000 b855 	b.w	8006390 <_kill_r>
 80062e6:	2316      	movs	r3, #22
 80062e8:	6003      	str	r3, [r0, #0]
 80062ea:	2001      	movs	r0, #1
 80062ec:	bd38      	pop	{r3, r4, r5, pc}
 80062ee:	2000      	movs	r0, #0
 80062f0:	bd38      	pop	{r3, r4, r5, pc}
 80062f2:	2316      	movs	r3, #22
 80062f4:	6003      	str	r3, [r0, #0]
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fa:	bd38      	pop	{r3, r4, r5, pc}

080062fc <__sigtramp_r>:
 80062fc:	291f      	cmp	r1, #31
 80062fe:	d821      	bhi.n	8006344 <__sigtramp_r+0x48>
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b183      	cbz	r3, 800632c <__sigtramp_r+0x30>
 800630a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800630e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006312:	b14a      	cbz	r2, 8006328 <__sigtramp_r+0x2c>
 8006314:	1c51      	adds	r1, r2, #1
 8006316:	d010      	beq.n	800633a <__sigtramp_r+0x3e>
 8006318:	2a01      	cmp	r2, #1
 800631a:	d00c      	beq.n	8006336 <__sigtramp_r+0x3a>
 800631c:	2500      	movs	r5, #0
 800631e:	4620      	mov	r0, r4
 8006320:	601d      	str	r5, [r3, #0]
 8006322:	4790      	blx	r2
 8006324:	4628      	mov	r0, r5
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	2001      	movs	r0, #1
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	f7ff ff88 	bl	8006240 <_init_signal_r.part.0>
 8006330:	b928      	cbnz	r0, 800633e <__sigtramp_r+0x42>
 8006332:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006334:	e7e9      	b.n	800630a <__sigtramp_r+0xe>
 8006336:	2003      	movs	r0, #3
 8006338:	bd38      	pop	{r3, r4, r5, pc}
 800633a:	2002      	movs	r0, #2
 800633c:	bd38      	pop	{r3, r4, r5, pc}
 800633e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop

0800634c <raise>:
 800634c:	4b02      	ldr	r3, [pc, #8]	; (8006358 <raise+0xc>)
 800634e:	4601      	mov	r1, r0
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	f7ff bfa9 	b.w	80062a8 <_raise_r>
 8006356:	bf00      	nop
 8006358:	20000004 	.word	0x20000004

0800635c <signal>:
 800635c:	4b02      	ldr	r3, [pc, #8]	; (8006368 <signal+0xc>)
 800635e:	460a      	mov	r2, r1
 8006360:	4601      	mov	r1, r0
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	f7ff bf86 	b.w	8006274 <_signal_r>
 8006368:	20000004 	.word	0x20000004

0800636c <_init_signal>:
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <_init_signal+0x10>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006372:	b10b      	cbz	r3, 8006378 <_init_signal+0xc>
 8006374:	2000      	movs	r0, #0
 8006376:	4770      	bx	lr
 8006378:	e762      	b.n	8006240 <_init_signal_r.part.0>
 800637a:	bf00      	nop
 800637c:	20000004 	.word	0x20000004

08006380 <__sigtramp>:
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <__sigtramp+0xc>)
 8006382:	4601      	mov	r1, r0
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f7ff bfb9 	b.w	80062fc <__sigtramp_r>
 800638a:	bf00      	nop
 800638c:	20000004 	.word	0x20000004

08006390 <_kill_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	460b      	mov	r3, r1
 8006394:	4c07      	ldr	r4, [pc, #28]	; (80063b4 <_kill_r+0x24>)
 8006396:	4605      	mov	r5, r0
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	2300      	movs	r3, #0
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	f005 fca0 	bl	800bce4 <_kill>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d000      	beq.n	80063aa <_kill_r+0x1a>
 80063a8:	bd38      	pop	{r3, r4, r5, pc}
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0fb      	beq.n	80063a8 <_kill_r+0x18>
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20009540 	.word	0x20009540

080063b8 <_getpid_r>:
 80063b8:	f005 bc8c 	b.w	800bcd4 <_getpid>

080063bc <__aeabi_drsub>:
 80063bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80063c0:	e002      	b.n	80063c8 <__adddf3>
 80063c2:	bf00      	nop

080063c4 <__aeabi_dsub>:
 80063c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080063c8 <__adddf3>:
 80063c8:	b530      	push	{r4, r5, lr}
 80063ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80063ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80063d2:	ea94 0f05 	teq	r4, r5
 80063d6:	bf08      	it	eq
 80063d8:	ea90 0f02 	teqeq	r0, r2
 80063dc:	bf1f      	itttt	ne
 80063de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80063e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80063e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80063ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80063ee:	f000 80e2 	beq.w	80065b6 <__adddf3+0x1ee>
 80063f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80063f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80063fa:	bfb8      	it	lt
 80063fc:	426d      	neglt	r5, r5
 80063fe:	dd0c      	ble.n	800641a <__adddf3+0x52>
 8006400:	442c      	add	r4, r5
 8006402:	ea80 0202 	eor.w	r2, r0, r2
 8006406:	ea81 0303 	eor.w	r3, r1, r3
 800640a:	ea82 0000 	eor.w	r0, r2, r0
 800640e:	ea83 0101 	eor.w	r1, r3, r1
 8006412:	ea80 0202 	eor.w	r2, r0, r2
 8006416:	ea81 0303 	eor.w	r3, r1, r3
 800641a:	2d36      	cmp	r5, #54	; 0x36
 800641c:	bf88      	it	hi
 800641e:	bd30      	pophi	{r4, r5, pc}
 8006420:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006424:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006428:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800642c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006430:	d002      	beq.n	8006438 <__adddf3+0x70>
 8006432:	4240      	negs	r0, r0
 8006434:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006438:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800643c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006440:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006444:	d002      	beq.n	800644c <__adddf3+0x84>
 8006446:	4252      	negs	r2, r2
 8006448:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800644c:	ea94 0f05 	teq	r4, r5
 8006450:	f000 80a7 	beq.w	80065a2 <__adddf3+0x1da>
 8006454:	f1a4 0401 	sub.w	r4, r4, #1
 8006458:	f1d5 0e20 	rsbs	lr, r5, #32
 800645c:	db0d      	blt.n	800647a <__adddf3+0xb2>
 800645e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006462:	fa22 f205 	lsr.w	r2, r2, r5
 8006466:	1880      	adds	r0, r0, r2
 8006468:	f141 0100 	adc.w	r1, r1, #0
 800646c:	fa03 f20e 	lsl.w	r2, r3, lr
 8006470:	1880      	adds	r0, r0, r2
 8006472:	fa43 f305 	asr.w	r3, r3, r5
 8006476:	4159      	adcs	r1, r3
 8006478:	e00e      	b.n	8006498 <__adddf3+0xd0>
 800647a:	f1a5 0520 	sub.w	r5, r5, #32
 800647e:	f10e 0e20 	add.w	lr, lr, #32
 8006482:	2a01      	cmp	r2, #1
 8006484:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006488:	bf28      	it	cs
 800648a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800648e:	fa43 f305 	asr.w	r3, r3, r5
 8006492:	18c0      	adds	r0, r0, r3
 8006494:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800649c:	d507      	bpl.n	80064ae <__adddf3+0xe6>
 800649e:	f04f 0e00 	mov.w	lr, #0
 80064a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80064a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80064aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80064ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80064b2:	d31b      	bcc.n	80064ec <__adddf3+0x124>
 80064b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80064b8:	d30c      	bcc.n	80064d4 <__adddf3+0x10c>
 80064ba:	0849      	lsrs	r1, r1, #1
 80064bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80064c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80064c4:	f104 0401 	add.w	r4, r4, #1
 80064c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80064cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80064d0:	f080 809a 	bcs.w	8006608 <__adddf3+0x240>
 80064d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80064d8:	bf08      	it	eq
 80064da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80064de:	f150 0000 	adcs.w	r0, r0, #0
 80064e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80064e6:	ea41 0105 	orr.w	r1, r1, r5
 80064ea:	bd30      	pop	{r4, r5, pc}
 80064ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80064f0:	4140      	adcs	r0, r0
 80064f2:	eb41 0101 	adc.w	r1, r1, r1
 80064f6:	3c01      	subs	r4, #1
 80064f8:	bf28      	it	cs
 80064fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80064fe:	d2e9      	bcs.n	80064d4 <__adddf3+0x10c>
 8006500:	f091 0f00 	teq	r1, #0
 8006504:	bf04      	itt	eq
 8006506:	4601      	moveq	r1, r0
 8006508:	2000      	moveq	r0, #0
 800650a:	fab1 f381 	clz	r3, r1
 800650e:	bf08      	it	eq
 8006510:	3320      	addeq	r3, #32
 8006512:	f1a3 030b 	sub.w	r3, r3, #11
 8006516:	f1b3 0220 	subs.w	r2, r3, #32
 800651a:	da0c      	bge.n	8006536 <__adddf3+0x16e>
 800651c:	320c      	adds	r2, #12
 800651e:	dd08      	ble.n	8006532 <__adddf3+0x16a>
 8006520:	f102 0c14 	add.w	ip, r2, #20
 8006524:	f1c2 020c 	rsb	r2, r2, #12
 8006528:	fa01 f00c 	lsl.w	r0, r1, ip
 800652c:	fa21 f102 	lsr.w	r1, r1, r2
 8006530:	e00c      	b.n	800654c <__adddf3+0x184>
 8006532:	f102 0214 	add.w	r2, r2, #20
 8006536:	bfd8      	it	le
 8006538:	f1c2 0c20 	rsble	ip, r2, #32
 800653c:	fa01 f102 	lsl.w	r1, r1, r2
 8006540:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006544:	bfdc      	itt	le
 8006546:	ea41 010c 	orrle.w	r1, r1, ip
 800654a:	4090      	lslle	r0, r2
 800654c:	1ae4      	subs	r4, r4, r3
 800654e:	bfa2      	ittt	ge
 8006550:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006554:	4329      	orrge	r1, r5
 8006556:	bd30      	popge	{r4, r5, pc}
 8006558:	ea6f 0404 	mvn.w	r4, r4
 800655c:	3c1f      	subs	r4, #31
 800655e:	da1c      	bge.n	800659a <__adddf3+0x1d2>
 8006560:	340c      	adds	r4, #12
 8006562:	dc0e      	bgt.n	8006582 <__adddf3+0x1ba>
 8006564:	f104 0414 	add.w	r4, r4, #20
 8006568:	f1c4 0220 	rsb	r2, r4, #32
 800656c:	fa20 f004 	lsr.w	r0, r0, r4
 8006570:	fa01 f302 	lsl.w	r3, r1, r2
 8006574:	ea40 0003 	orr.w	r0, r0, r3
 8006578:	fa21 f304 	lsr.w	r3, r1, r4
 800657c:	ea45 0103 	orr.w	r1, r5, r3
 8006580:	bd30      	pop	{r4, r5, pc}
 8006582:	f1c4 040c 	rsb	r4, r4, #12
 8006586:	f1c4 0220 	rsb	r2, r4, #32
 800658a:	fa20 f002 	lsr.w	r0, r0, r2
 800658e:	fa01 f304 	lsl.w	r3, r1, r4
 8006592:	ea40 0003 	orr.w	r0, r0, r3
 8006596:	4629      	mov	r1, r5
 8006598:	bd30      	pop	{r4, r5, pc}
 800659a:	fa21 f004 	lsr.w	r0, r1, r4
 800659e:	4629      	mov	r1, r5
 80065a0:	bd30      	pop	{r4, r5, pc}
 80065a2:	f094 0f00 	teq	r4, #0
 80065a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80065aa:	bf06      	itte	eq
 80065ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80065b0:	3401      	addeq	r4, #1
 80065b2:	3d01      	subne	r5, #1
 80065b4:	e74e      	b.n	8006454 <__adddf3+0x8c>
 80065b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065ba:	bf18      	it	ne
 80065bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80065c0:	d029      	beq.n	8006616 <__adddf3+0x24e>
 80065c2:	ea94 0f05 	teq	r4, r5
 80065c6:	bf08      	it	eq
 80065c8:	ea90 0f02 	teqeq	r0, r2
 80065cc:	d005      	beq.n	80065da <__adddf3+0x212>
 80065ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80065d2:	bf04      	itt	eq
 80065d4:	4619      	moveq	r1, r3
 80065d6:	4610      	moveq	r0, r2
 80065d8:	bd30      	pop	{r4, r5, pc}
 80065da:	ea91 0f03 	teq	r1, r3
 80065de:	bf1e      	ittt	ne
 80065e0:	2100      	movne	r1, #0
 80065e2:	2000      	movne	r0, #0
 80065e4:	bd30      	popne	{r4, r5, pc}
 80065e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80065ea:	d105      	bne.n	80065f8 <__adddf3+0x230>
 80065ec:	0040      	lsls	r0, r0, #1
 80065ee:	4149      	adcs	r1, r1
 80065f0:	bf28      	it	cs
 80065f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80065f6:	bd30      	pop	{r4, r5, pc}
 80065f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80065fc:	bf3c      	itt	cc
 80065fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006602:	bd30      	popcc	{r4, r5, pc}
 8006604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006608:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800660c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006610:	f04f 0000 	mov.w	r0, #0
 8006614:	bd30      	pop	{r4, r5, pc}
 8006616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800661a:	bf1a      	itte	ne
 800661c:	4619      	movne	r1, r3
 800661e:	4610      	movne	r0, r2
 8006620:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006624:	bf1c      	itt	ne
 8006626:	460b      	movne	r3, r1
 8006628:	4602      	movne	r2, r0
 800662a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800662e:	bf06      	itte	eq
 8006630:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006634:	ea91 0f03 	teqeq	r1, r3
 8006638:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800663c:	bd30      	pop	{r4, r5, pc}
 800663e:	bf00      	nop

08006640 <__aeabi_ui2d>:
 8006640:	f090 0f00 	teq	r0, #0
 8006644:	bf04      	itt	eq
 8006646:	2100      	moveq	r1, #0
 8006648:	4770      	bxeq	lr
 800664a:	b530      	push	{r4, r5, lr}
 800664c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006650:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006654:	f04f 0500 	mov.w	r5, #0
 8006658:	f04f 0100 	mov.w	r1, #0
 800665c:	e750      	b.n	8006500 <__adddf3+0x138>
 800665e:	bf00      	nop

08006660 <__aeabi_i2d>:
 8006660:	f090 0f00 	teq	r0, #0
 8006664:	bf04      	itt	eq
 8006666:	2100      	moveq	r1, #0
 8006668:	4770      	bxeq	lr
 800666a:	b530      	push	{r4, r5, lr}
 800666c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006670:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006674:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006678:	bf48      	it	mi
 800667a:	4240      	negmi	r0, r0
 800667c:	f04f 0100 	mov.w	r1, #0
 8006680:	e73e      	b.n	8006500 <__adddf3+0x138>
 8006682:	bf00      	nop

08006684 <__aeabi_f2d>:
 8006684:	0042      	lsls	r2, r0, #1
 8006686:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800668a:	ea4f 0131 	mov.w	r1, r1, rrx
 800668e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006692:	bf1f      	itttt	ne
 8006694:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006698:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800669c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80066a0:	4770      	bxne	lr
 80066a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80066a6:	bf08      	it	eq
 80066a8:	4770      	bxeq	lr
 80066aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80066ae:	bf04      	itt	eq
 80066b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80066b4:	4770      	bxeq	lr
 80066b6:	b530      	push	{r4, r5, lr}
 80066b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80066bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80066c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80066c4:	e71c      	b.n	8006500 <__adddf3+0x138>
 80066c6:	bf00      	nop

080066c8 <__aeabi_ul2d>:
 80066c8:	ea50 0201 	orrs.w	r2, r0, r1
 80066cc:	bf08      	it	eq
 80066ce:	4770      	bxeq	lr
 80066d0:	b530      	push	{r4, r5, lr}
 80066d2:	f04f 0500 	mov.w	r5, #0
 80066d6:	e00a      	b.n	80066ee <__aeabi_l2d+0x16>

080066d8 <__aeabi_l2d>:
 80066d8:	ea50 0201 	orrs.w	r2, r0, r1
 80066dc:	bf08      	it	eq
 80066de:	4770      	bxeq	lr
 80066e0:	b530      	push	{r4, r5, lr}
 80066e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80066e6:	d502      	bpl.n	80066ee <__aeabi_l2d+0x16>
 80066e8:	4240      	negs	r0, r0
 80066ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80066ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80066f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80066f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80066fa:	f43f aed8 	beq.w	80064ae <__adddf3+0xe6>
 80066fe:	f04f 0203 	mov.w	r2, #3
 8006702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006706:	bf18      	it	ne
 8006708:	3203      	addne	r2, #3
 800670a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800670e:	bf18      	it	ne
 8006710:	3203      	addne	r2, #3
 8006712:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006716:	f1c2 0320 	rsb	r3, r2, #32
 800671a:	fa00 fc03 	lsl.w	ip, r0, r3
 800671e:	fa20 f002 	lsr.w	r0, r0, r2
 8006722:	fa01 fe03 	lsl.w	lr, r1, r3
 8006726:	ea40 000e 	orr.w	r0, r0, lr
 800672a:	fa21 f102 	lsr.w	r1, r1, r2
 800672e:	4414      	add	r4, r2
 8006730:	e6bd      	b.n	80064ae <__adddf3+0xe6>
 8006732:	bf00      	nop

08006734 <__aeabi_dmul>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800673a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800673e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006742:	bf1d      	ittte	ne
 8006744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006748:	ea94 0f0c 	teqne	r4, ip
 800674c:	ea95 0f0c 	teqne	r5, ip
 8006750:	f000 f8de 	bleq	8006910 <__aeabi_dmul+0x1dc>
 8006754:	442c      	add	r4, r5
 8006756:	ea81 0603 	eor.w	r6, r1, r3
 800675a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800675e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006762:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006766:	bf18      	it	ne
 8006768:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800676c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006774:	d038      	beq.n	80067e8 <__aeabi_dmul+0xb4>
 8006776:	fba0 ce02 	umull	ip, lr, r0, r2
 800677a:	f04f 0500 	mov.w	r5, #0
 800677e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006782:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006786:	fbe0 e503 	umlal	lr, r5, r0, r3
 800678a:	f04f 0600 	mov.w	r6, #0
 800678e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006792:	f09c 0f00 	teq	ip, #0
 8006796:	bf18      	it	ne
 8006798:	f04e 0e01 	orrne.w	lr, lr, #1
 800679c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80067a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80067a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80067a8:	d204      	bcs.n	80067b4 <__aeabi_dmul+0x80>
 80067aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80067ae:	416d      	adcs	r5, r5
 80067b0:	eb46 0606 	adc.w	r6, r6, r6
 80067b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80067b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80067bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80067c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80067c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80067c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80067cc:	bf88      	it	hi
 80067ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80067d2:	d81e      	bhi.n	8006812 <__aeabi_dmul+0xde>
 80067d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80067d8:	bf08      	it	eq
 80067da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80067de:	f150 0000 	adcs.w	r0, r0, #0
 80067e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80067ec:	ea46 0101 	orr.w	r1, r6, r1
 80067f0:	ea40 0002 	orr.w	r0, r0, r2
 80067f4:	ea81 0103 	eor.w	r1, r1, r3
 80067f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80067fc:	bfc2      	ittt	gt
 80067fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006806:	bd70      	popgt	{r4, r5, r6, pc}
 8006808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800680c:	f04f 0e00 	mov.w	lr, #0
 8006810:	3c01      	subs	r4, #1
 8006812:	f300 80ab 	bgt.w	800696c <__aeabi_dmul+0x238>
 8006816:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800681a:	bfde      	ittt	le
 800681c:	2000      	movle	r0, #0
 800681e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006822:	bd70      	pople	{r4, r5, r6, pc}
 8006824:	f1c4 0400 	rsb	r4, r4, #0
 8006828:	3c20      	subs	r4, #32
 800682a:	da35      	bge.n	8006898 <__aeabi_dmul+0x164>
 800682c:	340c      	adds	r4, #12
 800682e:	dc1b      	bgt.n	8006868 <__aeabi_dmul+0x134>
 8006830:	f104 0414 	add.w	r4, r4, #20
 8006834:	f1c4 0520 	rsb	r5, r4, #32
 8006838:	fa00 f305 	lsl.w	r3, r0, r5
 800683c:	fa20 f004 	lsr.w	r0, r0, r4
 8006840:	fa01 f205 	lsl.w	r2, r1, r5
 8006844:	ea40 0002 	orr.w	r0, r0, r2
 8006848:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800684c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006850:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006854:	fa21 f604 	lsr.w	r6, r1, r4
 8006858:	eb42 0106 	adc.w	r1, r2, r6
 800685c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006860:	bf08      	it	eq
 8006862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	f1c4 040c 	rsb	r4, r4, #12
 800686c:	f1c4 0520 	rsb	r5, r4, #32
 8006870:	fa00 f304 	lsl.w	r3, r0, r4
 8006874:	fa20 f005 	lsr.w	r0, r0, r5
 8006878:	fa01 f204 	lsl.w	r2, r1, r4
 800687c:	ea40 0002 	orr.w	r0, r0, r2
 8006880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006884:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006888:	f141 0100 	adc.w	r1, r1, #0
 800688c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006890:	bf08      	it	eq
 8006892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	f1c4 0520 	rsb	r5, r4, #32
 800689c:	fa00 f205 	lsl.w	r2, r0, r5
 80068a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80068a4:	fa20 f304 	lsr.w	r3, r0, r4
 80068a8:	fa01 f205 	lsl.w	r2, r1, r5
 80068ac:	ea43 0302 	orr.w	r3, r3, r2
 80068b0:	fa21 f004 	lsr.w	r0, r1, r4
 80068b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068b8:	fa21 f204 	lsr.w	r2, r1, r4
 80068bc:	ea20 0002 	bic.w	r0, r0, r2
 80068c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80068c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80068c8:	bf08      	it	eq
 80068ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	f094 0f00 	teq	r4, #0
 80068d4:	d10f      	bne.n	80068f6 <__aeabi_dmul+0x1c2>
 80068d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80068da:	0040      	lsls	r0, r0, #1
 80068dc:	eb41 0101 	adc.w	r1, r1, r1
 80068e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80068e4:	bf08      	it	eq
 80068e6:	3c01      	subeq	r4, #1
 80068e8:	d0f7      	beq.n	80068da <__aeabi_dmul+0x1a6>
 80068ea:	ea41 0106 	orr.w	r1, r1, r6
 80068ee:	f095 0f00 	teq	r5, #0
 80068f2:	bf18      	it	ne
 80068f4:	4770      	bxne	lr
 80068f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80068fa:	0052      	lsls	r2, r2, #1
 80068fc:	eb43 0303 	adc.w	r3, r3, r3
 8006900:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006904:	bf08      	it	eq
 8006906:	3d01      	subeq	r5, #1
 8006908:	d0f7      	beq.n	80068fa <__aeabi_dmul+0x1c6>
 800690a:	ea43 0306 	orr.w	r3, r3, r6
 800690e:	4770      	bx	lr
 8006910:	ea94 0f0c 	teq	r4, ip
 8006914:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006918:	bf18      	it	ne
 800691a:	ea95 0f0c 	teqne	r5, ip
 800691e:	d00c      	beq.n	800693a <__aeabi_dmul+0x206>
 8006920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006924:	bf18      	it	ne
 8006926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800692a:	d1d1      	bne.n	80068d0 <__aeabi_dmul+0x19c>
 800692c:	ea81 0103 	eor.w	r1, r1, r3
 8006930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006934:	f04f 0000 	mov.w	r0, #0
 8006938:	bd70      	pop	{r4, r5, r6, pc}
 800693a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800693e:	bf06      	itte	eq
 8006940:	4610      	moveq	r0, r2
 8006942:	4619      	moveq	r1, r3
 8006944:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006948:	d019      	beq.n	800697e <__aeabi_dmul+0x24a>
 800694a:	ea94 0f0c 	teq	r4, ip
 800694e:	d102      	bne.n	8006956 <__aeabi_dmul+0x222>
 8006950:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006954:	d113      	bne.n	800697e <__aeabi_dmul+0x24a>
 8006956:	ea95 0f0c 	teq	r5, ip
 800695a:	d105      	bne.n	8006968 <__aeabi_dmul+0x234>
 800695c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006960:	bf1c      	itt	ne
 8006962:	4610      	movne	r0, r2
 8006964:	4619      	movne	r1, r3
 8006966:	d10a      	bne.n	800697e <__aeabi_dmul+0x24a>
 8006968:	ea81 0103 	eor.w	r1, r1, r3
 800696c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006970:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006974:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006982:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006986:	bd70      	pop	{r4, r5, r6, pc}

08006988 <__aeabi_ddiv>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800698e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006992:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006996:	bf1d      	ittte	ne
 8006998:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800699c:	ea94 0f0c 	teqne	r4, ip
 80069a0:	ea95 0f0c 	teqne	r5, ip
 80069a4:	f000 f8a7 	bleq	8006af6 <__aeabi_ddiv+0x16e>
 80069a8:	eba4 0405 	sub.w	r4, r4, r5
 80069ac:	ea81 0e03 	eor.w	lr, r1, r3
 80069b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80069b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80069b8:	f000 8088 	beq.w	8006acc <__aeabi_ddiv+0x144>
 80069bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80069c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80069c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80069c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80069cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80069d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80069d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80069d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80069dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80069e0:	429d      	cmp	r5, r3
 80069e2:	bf08      	it	eq
 80069e4:	4296      	cmpeq	r6, r2
 80069e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80069ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80069ee:	d202      	bcs.n	80069f6 <__aeabi_ddiv+0x6e>
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069f6:	1ab6      	subs	r6, r6, r2
 80069f8:	eb65 0503 	sbc.w	r5, r5, r3
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a12:	bf22      	ittt	cs
 8006a14:	1ab6      	subcs	r6, r6, r2
 8006a16:	4675      	movcs	r5, lr
 8006a18:	ea40 000c 	orrcs.w	r0, r0, ip
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a22:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a2a:	bf22      	ittt	cs
 8006a2c:	1ab6      	subcs	r6, r6, r2
 8006a2e:	4675      	movcs	r5, lr
 8006a30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a42:	bf22      	ittt	cs
 8006a44:	1ab6      	subcs	r6, r6, r2
 8006a46:	4675      	movcs	r5, lr
 8006a48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a52:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a5a:	bf22      	ittt	cs
 8006a5c:	1ab6      	subcs	r6, r6, r2
 8006a5e:	4675      	movcs	r5, lr
 8006a60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006a64:	ea55 0e06 	orrs.w	lr, r5, r6
 8006a68:	d018      	beq.n	8006a9c <__aeabi_ddiv+0x114>
 8006a6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006a6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006a72:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006a76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006a7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006a7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006a82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006a86:	d1c0      	bne.n	8006a0a <__aeabi_ddiv+0x82>
 8006a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a8c:	d10b      	bne.n	8006aa6 <__aeabi_ddiv+0x11e>
 8006a8e:	ea41 0100 	orr.w	r1, r1, r0
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006a9a:	e7b6      	b.n	8006a0a <__aeabi_ddiv+0x82>
 8006a9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006aa0:	bf04      	itt	eq
 8006aa2:	4301      	orreq	r1, r0
 8006aa4:	2000      	moveq	r0, #0
 8006aa6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006aaa:	bf88      	it	hi
 8006aac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006ab0:	f63f aeaf 	bhi.w	8006812 <__aeabi_dmul+0xde>
 8006ab4:	ebb5 0c03 	subs.w	ip, r5, r3
 8006ab8:	bf04      	itt	eq
 8006aba:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006ac2:	f150 0000 	adcs.w	r0, r0, #0
 8006ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006ad0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006ad4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006ad8:	bfc2      	ittt	gt
 8006ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8006ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ae8:	f04f 0e00 	mov.w	lr, #0
 8006aec:	3c01      	subs	r4, #1
 8006aee:	e690      	b.n	8006812 <__aeabi_dmul+0xde>
 8006af0:	ea45 0e06 	orr.w	lr, r5, r6
 8006af4:	e68d      	b.n	8006812 <__aeabi_dmul+0xde>
 8006af6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006afa:	ea94 0f0c 	teq	r4, ip
 8006afe:	bf08      	it	eq
 8006b00:	ea95 0f0c 	teqeq	r5, ip
 8006b04:	f43f af3b 	beq.w	800697e <__aeabi_dmul+0x24a>
 8006b08:	ea94 0f0c 	teq	r4, ip
 8006b0c:	d10a      	bne.n	8006b24 <__aeabi_ddiv+0x19c>
 8006b0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006b12:	f47f af34 	bne.w	800697e <__aeabi_dmul+0x24a>
 8006b16:	ea95 0f0c 	teq	r5, ip
 8006b1a:	f47f af25 	bne.w	8006968 <__aeabi_dmul+0x234>
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	e72c      	b.n	800697e <__aeabi_dmul+0x24a>
 8006b24:	ea95 0f0c 	teq	r5, ip
 8006b28:	d106      	bne.n	8006b38 <__aeabi_ddiv+0x1b0>
 8006b2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006b2e:	f43f aefd 	beq.w	800692c <__aeabi_dmul+0x1f8>
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	e722      	b.n	800697e <__aeabi_dmul+0x24a>
 8006b38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006b3c:	bf18      	it	ne
 8006b3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006b42:	f47f aec5 	bne.w	80068d0 <__aeabi_dmul+0x19c>
 8006b46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006b4a:	f47f af0d 	bne.w	8006968 <__aeabi_dmul+0x234>
 8006b4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006b52:	f47f aeeb 	bne.w	800692c <__aeabi_dmul+0x1f8>
 8006b56:	e712      	b.n	800697e <__aeabi_dmul+0x24a>

08006b58 <__gedf2>:
 8006b58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006b5c:	e006      	b.n	8006b6c <__cmpdf2+0x4>
 8006b5e:	bf00      	nop

08006b60 <__ledf2>:
 8006b60:	f04f 0c01 	mov.w	ip, #1
 8006b64:	e002      	b.n	8006b6c <__cmpdf2+0x4>
 8006b66:	bf00      	nop

08006b68 <__cmpdf2>:
 8006b68:	f04f 0c01 	mov.w	ip, #1
 8006b6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b7c:	bf18      	it	ne
 8006b7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006b82:	d01b      	beq.n	8006bbc <__cmpdf2+0x54>
 8006b84:	b001      	add	sp, #4
 8006b86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006b8a:	bf0c      	ite	eq
 8006b8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006b90:	ea91 0f03 	teqne	r1, r3
 8006b94:	bf02      	ittt	eq
 8006b96:	ea90 0f02 	teqeq	r0, r2
 8006b9a:	2000      	moveq	r0, #0
 8006b9c:	4770      	bxeq	lr
 8006b9e:	f110 0f00 	cmn.w	r0, #0
 8006ba2:	ea91 0f03 	teq	r1, r3
 8006ba6:	bf58      	it	pl
 8006ba8:	4299      	cmppl	r1, r3
 8006baa:	bf08      	it	eq
 8006bac:	4290      	cmpeq	r0, r2
 8006bae:	bf2c      	ite	cs
 8006bb0:	17d8      	asrcs	r0, r3, #31
 8006bb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006bb6:	f040 0001 	orr.w	r0, r0, #1
 8006bba:	4770      	bx	lr
 8006bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006bc4:	d102      	bne.n	8006bcc <__cmpdf2+0x64>
 8006bc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006bca:	d107      	bne.n	8006bdc <__cmpdf2+0x74>
 8006bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006bd4:	d1d6      	bne.n	8006b84 <__cmpdf2+0x1c>
 8006bd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006bda:	d0d3      	beq.n	8006b84 <__cmpdf2+0x1c>
 8006bdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop

08006be4 <__aeabi_cdrcmple>:
 8006be4:	4684      	mov	ip, r0
 8006be6:	4610      	mov	r0, r2
 8006be8:	4662      	mov	r2, ip
 8006bea:	468c      	mov	ip, r1
 8006bec:	4619      	mov	r1, r3
 8006bee:	4663      	mov	r3, ip
 8006bf0:	e000      	b.n	8006bf4 <__aeabi_cdcmpeq>
 8006bf2:	bf00      	nop

08006bf4 <__aeabi_cdcmpeq>:
 8006bf4:	b501      	push	{r0, lr}
 8006bf6:	f7ff ffb7 	bl	8006b68 <__cmpdf2>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	bf48      	it	mi
 8006bfe:	f110 0f00 	cmnmi.w	r0, #0
 8006c02:	bd01      	pop	{r0, pc}

08006c04 <__aeabi_dcmpeq>:
 8006c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c08:	f7ff fff4 	bl	8006bf4 <__aeabi_cdcmpeq>
 8006c0c:	bf0c      	ite	eq
 8006c0e:	2001      	moveq	r0, #1
 8006c10:	2000      	movne	r0, #0
 8006c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c16:	bf00      	nop

08006c18 <__aeabi_dcmplt>:
 8006c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c1c:	f7ff ffea 	bl	8006bf4 <__aeabi_cdcmpeq>
 8006c20:	bf34      	ite	cc
 8006c22:	2001      	movcc	r0, #1
 8006c24:	2000      	movcs	r0, #0
 8006c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c2a:	bf00      	nop

08006c2c <__aeabi_dcmple>:
 8006c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c30:	f7ff ffe0 	bl	8006bf4 <__aeabi_cdcmpeq>
 8006c34:	bf94      	ite	ls
 8006c36:	2001      	movls	r0, #1
 8006c38:	2000      	movhi	r0, #0
 8006c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c3e:	bf00      	nop

08006c40 <__aeabi_dcmpge>:
 8006c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c44:	f7ff ffce 	bl	8006be4 <__aeabi_cdrcmple>
 8006c48:	bf94      	ite	ls
 8006c4a:	2001      	movls	r0, #1
 8006c4c:	2000      	movhi	r0, #0
 8006c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c52:	bf00      	nop

08006c54 <__aeabi_dcmpgt>:
 8006c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c58:	f7ff ffc4 	bl	8006be4 <__aeabi_cdrcmple>
 8006c5c:	bf34      	ite	cc
 8006c5e:	2001      	movcc	r0, #1
 8006c60:	2000      	movcs	r0, #0
 8006c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c66:	bf00      	nop

08006c68 <__aeabi_dcmpun>:
 8006c68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c70:	d102      	bne.n	8006c78 <__aeabi_dcmpun+0x10>
 8006c72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c76:	d10a      	bne.n	8006c8e <__aeabi_dcmpun+0x26>
 8006c78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c80:	d102      	bne.n	8006c88 <__aeabi_dcmpun+0x20>
 8006c82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c86:	d102      	bne.n	8006c8e <__aeabi_dcmpun+0x26>
 8006c88:	f04f 0000 	mov.w	r0, #0
 8006c8c:	4770      	bx	lr
 8006c8e:	f04f 0001 	mov.w	r0, #1
 8006c92:	4770      	bx	lr

08006c94 <__aeabi_d2iz>:
 8006c94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c9c:	d215      	bcs.n	8006cca <__aeabi_d2iz+0x36>
 8006c9e:	d511      	bpl.n	8006cc4 <__aeabi_d2iz+0x30>
 8006ca0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006ca4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006ca8:	d912      	bls.n	8006cd0 <__aeabi_d2iz+0x3c>
 8006caa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006cb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006cba:	fa23 f002 	lsr.w	r0, r3, r2
 8006cbe:	bf18      	it	ne
 8006cc0:	4240      	negne	r0, r0
 8006cc2:	4770      	bx	lr
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	4770      	bx	lr
 8006cca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006cce:	d105      	bne.n	8006cdc <__aeabi_d2iz+0x48>
 8006cd0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006cd4:	bf08      	it	eq
 8006cd6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006cda:	4770      	bx	lr
 8006cdc:	f04f 0000 	mov.w	r0, #0
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop

08006ce4 <__aeabi_d2uiz>:
 8006ce4:	004a      	lsls	r2, r1, #1
 8006ce6:	d211      	bcs.n	8006d0c <__aeabi_d2uiz+0x28>
 8006ce8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006cec:	d211      	bcs.n	8006d12 <__aeabi_d2uiz+0x2e>
 8006cee:	d50d      	bpl.n	8006d0c <__aeabi_d2uiz+0x28>
 8006cf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006cf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006cf8:	d40e      	bmi.n	8006d18 <__aeabi_d2uiz+0x34>
 8006cfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006d06:	fa23 f002 	lsr.w	r0, r3, r2
 8006d0a:	4770      	bx	lr
 8006d0c:	f04f 0000 	mov.w	r0, #0
 8006d10:	4770      	bx	lr
 8006d12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006d16:	d102      	bne.n	8006d1e <__aeabi_d2uiz+0x3a>
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d1c:	4770      	bx	lr
 8006d1e:	f04f 0000 	mov.w	r0, #0
 8006d22:	4770      	bx	lr

08006d24 <__aeabi_d2f>:
 8006d24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006d28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006d2c:	bf24      	itt	cs
 8006d2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006d32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006d36:	d90d      	bls.n	8006d54 <__aeabi_d2f+0x30>
 8006d38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006d3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006d40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006d44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006d48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006d4c:	bf08      	it	eq
 8006d4e:	f020 0001 	biceq.w	r0, r0, #1
 8006d52:	4770      	bx	lr
 8006d54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006d58:	d121      	bne.n	8006d9e <__aeabi_d2f+0x7a>
 8006d5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006d5e:	bfbc      	itt	lt
 8006d60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006d64:	4770      	bxlt	lr
 8006d66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006d6e:	f1c2 0218 	rsb	r2, r2, #24
 8006d72:	f1c2 0c20 	rsb	ip, r2, #32
 8006d76:	fa10 f30c 	lsls.w	r3, r0, ip
 8006d7a:	fa20 f002 	lsr.w	r0, r0, r2
 8006d7e:	bf18      	it	ne
 8006d80:	f040 0001 	orrne.w	r0, r0, #1
 8006d84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006d88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006d8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006d90:	ea40 000c 	orr.w	r0, r0, ip
 8006d94:	fa23 f302 	lsr.w	r3, r3, r2
 8006d98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d9c:	e7cc      	b.n	8006d38 <__aeabi_d2f+0x14>
 8006d9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006da2:	d107      	bne.n	8006db4 <__aeabi_d2f+0x90>
 8006da4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006da8:	bf1e      	ittt	ne
 8006daa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006dae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006db2:	4770      	bxne	lr
 8006db4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006db8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop

08006dc4 <__aeabi_uldivmod>:
 8006dc4:	b953      	cbnz	r3, 8006ddc <__aeabi_uldivmod+0x18>
 8006dc6:	b94a      	cbnz	r2, 8006ddc <__aeabi_uldivmod+0x18>
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	bf08      	it	eq
 8006dcc:	2800      	cmpeq	r0, #0
 8006dce:	bf1c      	itt	ne
 8006dd0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006dd4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006dd8:	f000 b9a4 	b.w	8007124 <__aeabi_idiv0>
 8006ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8006de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006de4:	f000 f83c 	bl	8006e60 <__udivmoddi4>
 8006de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df0:	b004      	add	sp, #16
 8006df2:	4770      	bx	lr

08006df4 <__aeabi_d2lz>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	2200      	movs	r2, #0
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	f7ff ff0b 	bl	8006c18 <__aeabi_dcmplt>
 8006e02:	b928      	cbnz	r0, 8006e10 <__aeabi_d2lz+0x1c>
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e0c:	f000 b80a 	b.w	8006e24 <__aeabi_d2ulz>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8006e16:	f000 f805 	bl	8006e24 <__aeabi_d2ulz>
 8006e1a:	4240      	negs	r0, r0
 8006e1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop

08006e24 <__aeabi_d2ulz>:
 8006e24:	b5d0      	push	{r4, r6, r7, lr}
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <__aeabi_d2ulz+0x34>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	f7ff fc81 	bl	8006734 <__aeabi_dmul>
 8006e32:	f7ff ff57 	bl	8006ce4 <__aeabi_d2uiz>
 8006e36:	4604      	mov	r4, r0
 8006e38:	f7ff fc02 	bl	8006640 <__aeabi_ui2d>
 8006e3c:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <__aeabi_d2ulz+0x38>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f7ff fc78 	bl	8006734 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7ff faba 	bl	80063c4 <__aeabi_dsub>
 8006e50:	f7ff ff48 	bl	8006ce4 <__aeabi_d2uiz>
 8006e54:	4621      	mov	r1, r4
 8006e56:	bdd0      	pop	{r4, r6, r7, pc}
 8006e58:	3df00000 	.word	0x3df00000
 8006e5c:	41f00000 	.word	0x41f00000

08006e60 <__udivmoddi4>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	9d08      	ldr	r5, [sp, #32]
 8006e66:	4604      	mov	r4, r0
 8006e68:	468c      	mov	ip, r1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 8083 	bne.w	8006f76 <__udivmoddi4+0x116>
 8006e70:	428a      	cmp	r2, r1
 8006e72:	4617      	mov	r7, r2
 8006e74:	d947      	bls.n	8006f06 <__udivmoddi4+0xa6>
 8006e76:	fab2 f282 	clz	r2, r2
 8006e7a:	b142      	cbz	r2, 8006e8e <__udivmoddi4+0x2e>
 8006e7c:	f1c2 0020 	rsb	r0, r2, #32
 8006e80:	fa24 f000 	lsr.w	r0, r4, r0
 8006e84:	4091      	lsls	r1, r2
 8006e86:	4097      	lsls	r7, r2
 8006e88:	ea40 0c01 	orr.w	ip, r0, r1
 8006e8c:	4094      	lsls	r4, r2
 8006e8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8006e92:	0c23      	lsrs	r3, r4, #16
 8006e94:	fbbc f6f8 	udiv	r6, ip, r8
 8006e98:	fa1f fe87 	uxth.w	lr, r7
 8006e9c:	fb08 c116 	mls	r1, r8, r6, ip
 8006ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ea4:	fb06 f10e 	mul.w	r1, r6, lr
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	d909      	bls.n	8006ec0 <__udivmoddi4+0x60>
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8006eb2:	f080 8119 	bcs.w	80070e8 <__udivmoddi4+0x288>
 8006eb6:	4299      	cmp	r1, r3
 8006eb8:	f240 8116 	bls.w	80070e8 <__udivmoddi4+0x288>
 8006ebc:	3e02      	subs	r6, #2
 8006ebe:	443b      	add	r3, r7
 8006ec0:	1a5b      	subs	r3, r3, r1
 8006ec2:	b2a4      	uxth	r4, r4
 8006ec4:	fbb3 f0f8 	udiv	r0, r3, r8
 8006ec8:	fb08 3310 	mls	r3, r8, r0, r3
 8006ecc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8006ed4:	45a6      	cmp	lr, r4
 8006ed6:	d909      	bls.n	8006eec <__udivmoddi4+0x8c>
 8006ed8:	193c      	adds	r4, r7, r4
 8006eda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ede:	f080 8105 	bcs.w	80070ec <__udivmoddi4+0x28c>
 8006ee2:	45a6      	cmp	lr, r4
 8006ee4:	f240 8102 	bls.w	80070ec <__udivmoddi4+0x28c>
 8006ee8:	3802      	subs	r0, #2
 8006eea:	443c      	add	r4, r7
 8006eec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006ef0:	eba4 040e 	sub.w	r4, r4, lr
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	b11d      	cbz	r5, 8006f00 <__udivmoddi4+0xa0>
 8006ef8:	40d4      	lsrs	r4, r2
 8006efa:	2300      	movs	r3, #0
 8006efc:	e9c5 4300 	strd	r4, r3, [r5]
 8006f00:	4631      	mov	r1, r6
 8006f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f06:	b902      	cbnz	r2, 8006f0a <__udivmoddi4+0xaa>
 8006f08:	deff      	udf	#255	; 0xff
 8006f0a:	fab2 f282 	clz	r2, r2
 8006f0e:	2a00      	cmp	r2, #0
 8006f10:	d150      	bne.n	8006fb4 <__udivmoddi4+0x154>
 8006f12:	1bcb      	subs	r3, r1, r7
 8006f14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8006f18:	fa1f f887 	uxth.w	r8, r7
 8006f1c:	2601      	movs	r6, #1
 8006f1e:	fbb3 fcfe 	udiv	ip, r3, lr
 8006f22:	0c21      	lsrs	r1, r4, #16
 8006f24:	fb0e 331c 	mls	r3, lr, ip, r3
 8006f28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006f2c:	fb08 f30c 	mul.w	r3, r8, ip
 8006f30:	428b      	cmp	r3, r1
 8006f32:	d907      	bls.n	8006f44 <__udivmoddi4+0xe4>
 8006f34:	1879      	adds	r1, r7, r1
 8006f36:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8006f3a:	d202      	bcs.n	8006f42 <__udivmoddi4+0xe2>
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	f200 80e9 	bhi.w	8007114 <__udivmoddi4+0x2b4>
 8006f42:	4684      	mov	ip, r0
 8006f44:	1ac9      	subs	r1, r1, r3
 8006f46:	b2a3      	uxth	r3, r4
 8006f48:	fbb1 f0fe 	udiv	r0, r1, lr
 8006f4c:	fb0e 1110 	mls	r1, lr, r0, r1
 8006f50:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8006f54:	fb08 f800 	mul.w	r8, r8, r0
 8006f58:	45a0      	cmp	r8, r4
 8006f5a:	d907      	bls.n	8006f6c <__udivmoddi4+0x10c>
 8006f5c:	193c      	adds	r4, r7, r4
 8006f5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f62:	d202      	bcs.n	8006f6a <__udivmoddi4+0x10a>
 8006f64:	45a0      	cmp	r8, r4
 8006f66:	f200 80d9 	bhi.w	800711c <__udivmoddi4+0x2bc>
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	eba4 0408 	sub.w	r4, r4, r8
 8006f70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8006f74:	e7bf      	b.n	8006ef6 <__udivmoddi4+0x96>
 8006f76:	428b      	cmp	r3, r1
 8006f78:	d909      	bls.n	8006f8e <__udivmoddi4+0x12e>
 8006f7a:	2d00      	cmp	r5, #0
 8006f7c:	f000 80b1 	beq.w	80070e2 <__udivmoddi4+0x282>
 8006f80:	2600      	movs	r6, #0
 8006f82:	e9c5 0100 	strd	r0, r1, [r5]
 8006f86:	4630      	mov	r0, r6
 8006f88:	4631      	mov	r1, r6
 8006f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8e:	fab3 f683 	clz	r6, r3
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	d14a      	bne.n	800702c <__udivmoddi4+0x1cc>
 8006f96:	428b      	cmp	r3, r1
 8006f98:	d302      	bcc.n	8006fa0 <__udivmoddi4+0x140>
 8006f9a:	4282      	cmp	r2, r0
 8006f9c:	f200 80b8 	bhi.w	8007110 <__udivmoddi4+0x2b0>
 8006fa0:	1a84      	subs	r4, r0, r2
 8006fa2:	eb61 0103 	sbc.w	r1, r1, r3
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	468c      	mov	ip, r1
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	d0a8      	beq.n	8006f00 <__udivmoddi4+0xa0>
 8006fae:	e9c5 4c00 	strd	r4, ip, [r5]
 8006fb2:	e7a5      	b.n	8006f00 <__udivmoddi4+0xa0>
 8006fb4:	f1c2 0320 	rsb	r3, r2, #32
 8006fb8:	fa20 f603 	lsr.w	r6, r0, r3
 8006fbc:	4097      	lsls	r7, r2
 8006fbe:	fa01 f002 	lsl.w	r0, r1, r2
 8006fc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8006fc6:	40d9      	lsrs	r1, r3
 8006fc8:	4330      	orrs	r0, r6
 8006fca:	0c03      	lsrs	r3, r0, #16
 8006fcc:	fbb1 f6fe 	udiv	r6, r1, lr
 8006fd0:	fa1f f887 	uxth.w	r8, r7
 8006fd4:	fb0e 1116 	mls	r1, lr, r6, r1
 8006fd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006fdc:	fb06 f108 	mul.w	r1, r6, r8
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	fa04 f402 	lsl.w	r4, r4, r2
 8006fe6:	d909      	bls.n	8006ffc <__udivmoddi4+0x19c>
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8006fee:	f080 808d 	bcs.w	800710c <__udivmoddi4+0x2ac>
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	f240 808a 	bls.w	800710c <__udivmoddi4+0x2ac>
 8006ff8:	3e02      	subs	r6, #2
 8006ffa:	443b      	add	r3, r7
 8006ffc:	1a5b      	subs	r3, r3, r1
 8006ffe:	b281      	uxth	r1, r0
 8007000:	fbb3 f0fe 	udiv	r0, r3, lr
 8007004:	fb0e 3310 	mls	r3, lr, r0, r3
 8007008:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800700c:	fb00 f308 	mul.w	r3, r0, r8
 8007010:	428b      	cmp	r3, r1
 8007012:	d907      	bls.n	8007024 <__udivmoddi4+0x1c4>
 8007014:	1879      	adds	r1, r7, r1
 8007016:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800701a:	d273      	bcs.n	8007104 <__udivmoddi4+0x2a4>
 800701c:	428b      	cmp	r3, r1
 800701e:	d971      	bls.n	8007104 <__udivmoddi4+0x2a4>
 8007020:	3802      	subs	r0, #2
 8007022:	4439      	add	r1, r7
 8007024:	1acb      	subs	r3, r1, r3
 8007026:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800702a:	e778      	b.n	8006f1e <__udivmoddi4+0xbe>
 800702c:	f1c6 0c20 	rsb	ip, r6, #32
 8007030:	fa03 f406 	lsl.w	r4, r3, r6
 8007034:	fa22 f30c 	lsr.w	r3, r2, ip
 8007038:	431c      	orrs	r4, r3
 800703a:	fa20 f70c 	lsr.w	r7, r0, ip
 800703e:	fa01 f306 	lsl.w	r3, r1, r6
 8007042:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8007046:	fa21 f10c 	lsr.w	r1, r1, ip
 800704a:	431f      	orrs	r7, r3
 800704c:	0c3b      	lsrs	r3, r7, #16
 800704e:	fbb1 f9fe 	udiv	r9, r1, lr
 8007052:	fa1f f884 	uxth.w	r8, r4
 8007056:	fb0e 1119 	mls	r1, lr, r9, r1
 800705a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800705e:	fb09 fa08 	mul.w	sl, r9, r8
 8007062:	458a      	cmp	sl, r1
 8007064:	fa02 f206 	lsl.w	r2, r2, r6
 8007068:	fa00 f306 	lsl.w	r3, r0, r6
 800706c:	d908      	bls.n	8007080 <__udivmoddi4+0x220>
 800706e:	1861      	adds	r1, r4, r1
 8007070:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8007074:	d248      	bcs.n	8007108 <__udivmoddi4+0x2a8>
 8007076:	458a      	cmp	sl, r1
 8007078:	d946      	bls.n	8007108 <__udivmoddi4+0x2a8>
 800707a:	f1a9 0902 	sub.w	r9, r9, #2
 800707e:	4421      	add	r1, r4
 8007080:	eba1 010a 	sub.w	r1, r1, sl
 8007084:	b2bf      	uxth	r7, r7
 8007086:	fbb1 f0fe 	udiv	r0, r1, lr
 800708a:	fb0e 1110 	mls	r1, lr, r0, r1
 800708e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8007092:	fb00 f808 	mul.w	r8, r0, r8
 8007096:	45b8      	cmp	r8, r7
 8007098:	d907      	bls.n	80070aa <__udivmoddi4+0x24a>
 800709a:	19e7      	adds	r7, r4, r7
 800709c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80070a0:	d22e      	bcs.n	8007100 <__udivmoddi4+0x2a0>
 80070a2:	45b8      	cmp	r8, r7
 80070a4:	d92c      	bls.n	8007100 <__udivmoddi4+0x2a0>
 80070a6:	3802      	subs	r0, #2
 80070a8:	4427      	add	r7, r4
 80070aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80070ae:	eba7 0708 	sub.w	r7, r7, r8
 80070b2:	fba0 8902 	umull	r8, r9, r0, r2
 80070b6:	454f      	cmp	r7, r9
 80070b8:	46c6      	mov	lr, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	d31a      	bcc.n	80070f4 <__udivmoddi4+0x294>
 80070be:	d017      	beq.n	80070f0 <__udivmoddi4+0x290>
 80070c0:	b15d      	cbz	r5, 80070da <__udivmoddi4+0x27a>
 80070c2:	ebb3 020e 	subs.w	r2, r3, lr
 80070c6:	eb67 0701 	sbc.w	r7, r7, r1
 80070ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80070ce:	40f2      	lsrs	r2, r6
 80070d0:	ea4c 0202 	orr.w	r2, ip, r2
 80070d4:	40f7      	lsrs	r7, r6
 80070d6:	e9c5 2700 	strd	r2, r7, [r5]
 80070da:	2600      	movs	r6, #0
 80070dc:	4631      	mov	r1, r6
 80070de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e2:	462e      	mov	r6, r5
 80070e4:	4628      	mov	r0, r5
 80070e6:	e70b      	b.n	8006f00 <__udivmoddi4+0xa0>
 80070e8:	4606      	mov	r6, r0
 80070ea:	e6e9      	b.n	8006ec0 <__udivmoddi4+0x60>
 80070ec:	4618      	mov	r0, r3
 80070ee:	e6fd      	b.n	8006eec <__udivmoddi4+0x8c>
 80070f0:	4543      	cmp	r3, r8
 80070f2:	d2e5      	bcs.n	80070c0 <__udivmoddi4+0x260>
 80070f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80070f8:	eb69 0104 	sbc.w	r1, r9, r4
 80070fc:	3801      	subs	r0, #1
 80070fe:	e7df      	b.n	80070c0 <__udivmoddi4+0x260>
 8007100:	4608      	mov	r0, r1
 8007102:	e7d2      	b.n	80070aa <__udivmoddi4+0x24a>
 8007104:	4660      	mov	r0, ip
 8007106:	e78d      	b.n	8007024 <__udivmoddi4+0x1c4>
 8007108:	4681      	mov	r9, r0
 800710a:	e7b9      	b.n	8007080 <__udivmoddi4+0x220>
 800710c:	4666      	mov	r6, ip
 800710e:	e775      	b.n	8006ffc <__udivmoddi4+0x19c>
 8007110:	4630      	mov	r0, r6
 8007112:	e74a      	b.n	8006faa <__udivmoddi4+0x14a>
 8007114:	f1ac 0c02 	sub.w	ip, ip, #2
 8007118:	4439      	add	r1, r7
 800711a:	e713      	b.n	8006f44 <__udivmoddi4+0xe4>
 800711c:	3802      	subs	r0, #2
 800711e:	443c      	add	r4, r7
 8007120:	e724      	b.n	8006f6c <__udivmoddi4+0x10c>
 8007122:	bf00      	nop

08007124 <__aeabi_idiv0>:
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop

08007128 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800712e:	f107 0314 	add.w	r3, r7, #20
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800713a:	1d3b      	adds	r3, r7, #4
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	609a      	str	r2, [r3, #8]
 8007144:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007146:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007148:	4a2a      	ldr	r2, [pc, #168]	; (80071f4 <MX_ADC1_Init+0xcc>)
 800714a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800714c:	4b28      	ldr	r3, [pc, #160]	; (80071f0 <MX_ADC1_Init+0xc8>)
 800714e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007154:	4b26      	ldr	r3, [pc, #152]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007156:	2200      	movs	r2, #0
 8007158:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800715a:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <MX_ADC1_Init+0xc8>)
 800715c:	2200      	movs	r2, #0
 800715e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007160:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007162:	2200      	movs	r2, #0
 8007164:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007166:	4b22      	ldr	r3, [pc, #136]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007170:	2200      	movs	r2, #0
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007174:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007176:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <MX_ADC1_Init+0xd0>)
 8007178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800717a:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <MX_ADC1_Init+0xc8>)
 800717c:	2200      	movs	r2, #0
 800717e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007180:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007182:	2201      	movs	r2, #1
 8007184:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007186:	4b1a      	ldr	r3, [pc, #104]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800718e:	4b18      	ldr	r3, [pc, #96]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007190:	2201      	movs	r2, #1
 8007192:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007194:	4816      	ldr	r0, [pc, #88]	; (80071f0 <MX_ADC1_Init+0xc8>)
 8007196:	f005 f8e7 	bl	800c368 <HAL_ADC_Init>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80071a0:	f003 fc52 	bl	800aa48 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80071a4:	2316      	movs	r3, #22
 80071a6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	4619      	mov	r1, r3
 80071b6:	480e      	ldr	r0, [pc, #56]	; (80071f0 <MX_ADC1_Init+0xc8>)
 80071b8:	f005 fcb2 	bl	800cb20 <HAL_ADCEx_MultiModeConfigChannel>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80071c2:	f003 fc41 	bl	800aa48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80071c6:	230a      	movs	r3, #10
 80071c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	4619      	mov	r1, r3
 80071d6:	4806      	ldr	r0, [pc, #24]	; (80071f0 <MX_ADC1_Init+0xc8>)
 80071d8:	f005 fa74 	bl	800c6c4 <HAL_ADC_ConfigChannel>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80071e2:	f003 fc31 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80071e6:	bf00      	nop
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000298 	.word	0x20000298
 80071f4:	40012000 	.word	0x40012000
 80071f8:	0f000001 	.word	0x0f000001

080071fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007202:	463b      	mov	r3, r7
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800720e:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007210:	4a1e      	ldr	r2, [pc, #120]	; (800728c <MX_ADC2_Init+0x90>)
 8007212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007214:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800721a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <MX_ADC2_Init+0x8c>)
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8007222:	4b19      	ldr	r3, [pc, #100]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007224:	2200      	movs	r2, #0
 8007226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8007228:	4b17      	ldr	r3, [pc, #92]	; (8007288 <MX_ADC2_Init+0x8c>)
 800722a:	2200      	movs	r2, #0
 800722c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800722e:	4b16      	ldr	r3, [pc, #88]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007236:	4b14      	ldr	r3, [pc, #80]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007238:	2200      	movs	r2, #0
 800723a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <MX_ADC2_Init+0x8c>)
 800723e:	2201      	movs	r2, #1
 8007240:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <MX_ADC2_Init+0x8c>)
 800724c:	2201      	movs	r2, #1
 800724e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007250:	480d      	ldr	r0, [pc, #52]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007252:	f005 f889 	bl	800c368 <HAL_ADC_Init>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800725c:	f003 fbf4 	bl	800aa48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8007260:	230b      	movs	r3, #11
 8007262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007264:	2301      	movs	r3, #1
 8007266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800726c:	463b      	mov	r3, r7
 800726e:	4619      	mov	r1, r3
 8007270:	4805      	ldr	r0, [pc, #20]	; (8007288 <MX_ADC2_Init+0x8c>)
 8007272:	f005 fa27 	bl	800c6c4 <HAL_ADC_ConfigChannel>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800727c:	f003 fbe4 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000250 	.word	0x20000250
 800728c:	40012100 	.word	0x40012100

08007290 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007296:	463b      	mov	r3, r7
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	605a      	str	r2, [r3, #4]
 800729e:	609a      	str	r2, [r3, #8]
 80072a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <MX_ADC3_Init+0x8c>)
 80072a4:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <MX_ADC3_Init+0x90>)
 80072a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80072a8:	4b1c      	ldr	r3, [pc, #112]	; (800731c <MX_ADC3_Init+0x8c>)
 80072aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80072ae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80072b0:	4b1a      	ldr	r3, [pc, #104]	; (800731c <MX_ADC3_Init+0x8c>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80072b6:	4b19      	ldr	r3, [pc, #100]	; (800731c <MX_ADC3_Init+0x8c>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80072bc:	4b17      	ldr	r3, [pc, #92]	; (800731c <MX_ADC3_Init+0x8c>)
 80072be:	2200      	movs	r2, #0
 80072c0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80072c2:	4b16      	ldr	r3, [pc, #88]	; (800731c <MX_ADC3_Init+0x8c>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80072ca:	4b14      	ldr	r3, [pc, #80]	; (800731c <MX_ADC3_Init+0x8c>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80072d0:	4b12      	ldr	r3, [pc, #72]	; (800731c <MX_ADC3_Init+0x8c>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80072d6:	4b11      	ldr	r3, [pc, #68]	; (800731c <MX_ADC3_Init+0x8c>)
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80072de:	4b0f      	ldr	r3, [pc, #60]	; (800731c <MX_ADC3_Init+0x8c>)
 80072e0:	2201      	movs	r2, #1
 80072e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80072e4:	480d      	ldr	r0, [pc, #52]	; (800731c <MX_ADC3_Init+0x8c>)
 80072e6:	f005 f83f 	bl	800c368 <HAL_ADC_Init>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80072f0:	f003 fbaa 	bl	800aa48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80072f8:	2301      	movs	r3, #1
 80072fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007300:	463b      	mov	r3, r7
 8007302:	4619      	mov	r1, r3
 8007304:	4805      	ldr	r0, [pc, #20]	; (800731c <MX_ADC3_Init+0x8c>)
 8007306:	f005 f9dd 	bl	800c6c4 <HAL_ADC_ConfigChannel>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8007310:	f003 fb9a 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007314:	bf00      	nop
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200002e0 	.word	0x200002e0
 8007320:	40012200 	.word	0x40012200

08007324 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08e      	sub	sp, #56	; 0x38
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800732c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	609a      	str	r2, [r3, #8]
 8007338:	60da      	str	r2, [r3, #12]
 800733a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a45      	ldr	r2, [pc, #276]	; (8007458 <HAL_ADC_MspInit+0x134>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d128      	bne.n	8007398 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007346:	2300      	movs	r3, #0
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	4b44      	ldr	r3, [pc, #272]	; (800745c <HAL_ADC_MspInit+0x138>)
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	4a43      	ldr	r2, [pc, #268]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007354:	6453      	str	r3, [r2, #68]	; 0x44
 8007356:	4b41      	ldr	r3, [pc, #260]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	623b      	str	r3, [r7, #32]
 8007360:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	4b3d      	ldr	r3, [pc, #244]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	4a3c      	ldr	r2, [pc, #240]	; (800745c <HAL_ADC_MspInit+0x138>)
 800736c:	f043 0304 	orr.w	r3, r3, #4
 8007370:	6313      	str	r3, [r2, #48]	; 0x30
 8007372:	4b3a      	ldr	r3, [pc, #232]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800737e:	2301      	movs	r3, #1
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007382:	2303      	movs	r3, #3
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007386:	2300      	movs	r3, #0
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800738a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800738e:	4619      	mov	r1, r3
 8007390:	4833      	ldr	r0, [pc, #204]	; (8007460 <HAL_ADC_MspInit+0x13c>)
 8007392:	f006 fbf5 	bl	800db80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8007396:	e05a      	b.n	800744e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a31      	ldr	r2, [pc, #196]	; (8007464 <HAL_ADC_MspInit+0x140>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d128      	bne.n	80073f4 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	4b2d      	ldr	r3, [pc, #180]	; (800745c <HAL_ADC_MspInit+0x138>)
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	4a2c      	ldr	r2, [pc, #176]	; (800745c <HAL_ADC_MspInit+0x138>)
 80073ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073b0:	6453      	str	r3, [r2, #68]	; 0x44
 80073b2:	4b2a      	ldr	r3, [pc, #168]	; (800745c <HAL_ADC_MspInit+0x138>)
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	4b26      	ldr	r3, [pc, #152]	; (800745c <HAL_ADC_MspInit+0x138>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	4a25      	ldr	r2, [pc, #148]	; (800745c <HAL_ADC_MspInit+0x138>)
 80073c8:	f043 0304 	orr.w	r3, r3, #4
 80073cc:	6313      	str	r3, [r2, #48]	; 0x30
 80073ce:	4b23      	ldr	r3, [pc, #140]	; (800745c <HAL_ADC_MspInit+0x138>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80073da:	2302      	movs	r3, #2
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073de:	2303      	movs	r3, #3
 80073e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ea:	4619      	mov	r1, r3
 80073ec:	481c      	ldr	r0, [pc, #112]	; (8007460 <HAL_ADC_MspInit+0x13c>)
 80073ee:	f006 fbc7 	bl	800db80 <HAL_GPIO_Init>
}
 80073f2:	e02c      	b.n	800744e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1b      	ldr	r2, [pc, #108]	; (8007468 <HAL_ADC_MspInit+0x144>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d127      	bne.n	800744e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	4b16      	ldr	r3, [pc, #88]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007406:	4a15      	ldr	r2, [pc, #84]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800740c:	6453      	str	r3, [r2, #68]	; 0x44
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	4b0f      	ldr	r3, [pc, #60]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	4a0e      	ldr	r2, [pc, #56]	; (800745c <HAL_ADC_MspInit+0x138>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	6313      	str	r3, [r2, #48]	; 0x30
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <HAL_ADC_MspInit+0x138>)
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007436:	2301      	movs	r3, #1
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800743a:	2303      	movs	r3, #3
 800743c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743e:	2300      	movs	r3, #0
 8007440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007446:	4619      	mov	r1, r3
 8007448:	4808      	ldr	r0, [pc, #32]	; (800746c <HAL_ADC_MspInit+0x148>)
 800744a:	f006 fb99 	bl	800db80 <HAL_GPIO_Init>
}
 800744e:	bf00      	nop
 8007450:	3738      	adds	r7, #56	; 0x38
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40012000 	.word	0x40012000
 800745c:	40023800 	.word	0x40023800
 8007460:	40020800 	.word	0x40020800
 8007464:	40012100 	.word	0x40012100
 8007468:	40012200 	.word	0x40012200
 800746c:	40020000 	.word	0x40020000

08007470 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8007470:	b5b0      	push	{r4, r5, r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800747e:	4b76      	ldr	r3, [pc, #472]	; (8007658 <order_phases+0x1e8>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7c1b      	ldrb	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d108      	bne.n	800749e <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 800748c:	4873      	ldr	r0, [pc, #460]	; (800765c <order_phases+0x1ec>)
 800748e:	f7fa f9b3 	bl	80017f8 <puts>
		cal->started = 1;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ae:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007660 <order_phases+0x1f0>
 80074b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	edd3 7a05 	vldr	s15, [r3, #20]
 80074c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ce:	d528      	bpl.n	8007522 <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80074e2:	3388      	adds	r3, #136	; 0x88
 80074e4:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80074ec:	3390      	adds	r3, #144	; 0x90
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80074f4:	4b5b      	ldr	r3, [pc, #364]	; (8007664 <order_phases+0x1f4>)
 80074f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800750e:	332c      	adds	r3, #44	; 0x2c
 8007510:	4619      	mov	r1, r3
 8007512:	68b8      	ldr	r0, [r7, #8]
 8007514:	f001 fd4e 	bl	8008fb4 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	619a      	str	r2, [r3, #24]
    	return;
 8007520:	e096      	b.n	8007650 <order_phases+0x1e0>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	edd3 7a05 	vldr	s15, [r3, #20]
 8007528:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8007668 <order_phases+0x1f8>
 800752c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007534:	d51d      	bpl.n	8007572 <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	edd3 7a05 	vldr	s15, [r3, #20]
 800753c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007544:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800755c:	3388      	adds	r3, #136	; 0x88
 800755e:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8007566:	332c      	adds	r3, #44	; 0x2c
 8007568:	4619      	mov	r1, r3
 800756a:	68b8      	ldr	r0, [r7, #8]
 800756c:	f001 fd22 	bl	8008fb4 <commutate>
    	return;
 8007570:	e06e      	b.n	8007650 <order_phases+0x1e0>
    }

	reset_foc(controller);
 8007572:	68b8      	ldr	r0, [r7, #8]
 8007574:	f001 fc36 	bl	8008de4 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	edd3 7a06 	vldr	s15, [r3, #24]
 8007584:	ed97 7a05 	vldr	s14, [r7, #20]
 8007588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800758c:	eef0 7ae7 	vabs.f32	s15, s15
 8007590:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800766c <order_phases+0x1fc>
 8007594:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007598:	ee16 0a90 	vmov	r0, s13
 800759c:	f7ff f872 	bl	8006684 <__aeabi_f2d>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	ec43 2b10 	vmov	d0, r2, r3
 80075a8:	f7f8 fe6e 	bl	8000288 <round>
 80075ac:	ec53 2b10 	vmov	r2, r3, d0
 80075b0:	4610      	mov	r0, r2
 80075b2:	4619      	mov	r1, r3
 80075b4:	f7ff fb96 	bl	8006ce4 <__aeabi_d2uiz>
 80075b8:	4603      	mov	r3, r0
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80075c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80075ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	dd07      	ble.n	80075e4 <order_phases+0x174>
		cal->phase_order = 0;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80075dc:	4824      	ldr	r0, [pc, #144]	; (8007670 <order_phases+0x200>)
 80075de:	f7fa f90b 	bl	80017f8 <puts>
 80075e2:	e006      	b.n	80075f2 <order_phases+0x182>
	}
	else{
		cal->phase_order = 1;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80075ec:	4821      	ldr	r0, [pc, #132]	; (8007674 <order_phases+0x204>)
 80075ee:	f7fa f903 	bl	80017f8 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	481f      	ldr	r0, [pc, #124]	; (8007678 <order_phases+0x208>)
 80075fa:	f7fa f875 	bl	80016e8 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff f83e 	bl	8006684 <__aeabi_f2d>
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f7ff f839 	bl	8006684 <__aeabi_f2d>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	e9cd 2300 	strd	r2, r3, [sp]
 800761a:	4622      	mov	r2, r4
 800761c:	462b      	mov	r3, r5
 800761e:	4817      	ldr	r0, [pc, #92]	; (800767c <order_phases+0x20c>)
 8007620:	f7fa f862 	bl	80016e8 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800762a:	461a      	mov	r2, r3
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <order_phases+0x1e8>)
 800762e:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <order_phases+0x1f4>)
 800763e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bdb0      	pop	{r4, r5, r7, pc}
 8007656:	bf00      	nop
 8007658:	20008f5c 	.word	0x20008f5c
 800765c:	08010e48 	.word	0x08010e48
 8007660:	37d1b717 	.word	0x37d1b717
 8007664:	20000658 	.word	0x20000658
 8007668:	3fd06cbe 	.word	0x3fd06cbe
 800766c:	40c90fdb 	.word	0x40c90fdb
 8007670:	08010e6c 	.word	0x08010e6c
 8007674:	08010e84 	.word	0x08010e84
 8007678:	08010e9c 	.word	0x08010e9c
 800767c:	08010eb0 	.word	0x08010eb0

08007680 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8007680:	b5b0      	push	{r4, r5, r7, lr}
 8007682:	b094      	sub	sp, #80	; 0x50
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	7c1b      	ldrb	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10f      	bne.n	80076b6 <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8007696:	489e      	ldr	r0, [pc, #632]	; (8007910 <calibrate_encoder+0x290>)
 8007698:	f7fa f8ae 	bl	80017f8 <puts>
			cal->started = 1;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80076ae:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076c6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8007914 <calibrate_encoder+0x294>
 80076ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80076da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e6:	d525      	bpl.n	8007734 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80076fa:	3388      	adds	r3, #136	; 0x88
 80076fc:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80076fe:	4b86      	ldr	r3, [pc, #536]	; (8007918 <calibrate_encoder+0x298>)
 8007700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8007718:	332c      	adds	r3, #44	; 0x2c
 800771a:	4619      	mov	r1, r3
 800771c:	68b8      	ldr	r0, [r7, #8]
 800771e:	f001 fc49 	bl	8008fb4 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695a      	ldr	r2, [r3, #20]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8007732:	e259      	b.n	8007be8 <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	ed93 7a05 	vldr	s14, [r3, #20]
 800773a:	4b77      	ldr	r3, [pc, #476]	; (8007918 <calibrate_encoder+0x298>)
 800773c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007740:	eddf 6a76 	vldr	s13, [pc, #472]	; 800791c <calibrate_encoder+0x29c>
 8007744:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007748:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800774c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007760:	f140 808f 	bpl.w	8007882 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	edd3 7a02 	vldr	s15, [r3, #8]
 800776a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007920 <calibrate_encoder+0x2a0>
 800776e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8007782:	3388      	adds	r3, #136	; 0x88
 8007784:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800778c:	332c      	adds	r3, #44	; 0x2c
 800778e:	4619      	mov	r1, r3
 8007790:	68b8      	ldr	r0, [r7, #8]
 8007792:	f001 fc0f 	bl	8008fb4 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	ed93 7a05 	vldr	s14, [r3, #20]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80077a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077aa:	dc00      	bgt.n	80077ae <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80077ac:	e21c      	b.n	8007be8 <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80077b4:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007934 <calibrate_encoder+0x2b4>
 80077b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80077bc:	4b56      	ldr	r3, [pc, #344]	; (8007918 <calibrate_encoder+0x298>)
 80077be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80077c2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800791c <calibrate_encoder+0x29c>
 80077c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077d2:	ee17 3a90 	vmov	r3, s15
 80077d6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	13db      	asrs	r3, r3, #15
 80077e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077ee:	4618      	mov	r0, r3
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	441a      	add	r2, r3
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	f100 030a 	add.w	r3, r0, #10
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007804:	461d      	mov	r5, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	330a      	adds	r3, #10
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	685c      	ldr	r4, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe ff33 	bl	8006684 <__aeabi_f2d>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	e9cd 2300 	strd	r2, r3, [sp]
 8007826:	4623      	mov	r3, r4
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4629      	mov	r1, r5
 800782c:	483d      	ldr	r0, [pc, #244]	; (8007924 <calibrate_encoder+0x2a4>)
 800782e:	f7f9 ff5b 	bl	80016e8 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007838:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007928 <calibrate_encoder+0x2a8>
 800783c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007852:	4b31      	ldr	r3, [pc, #196]	; (8007918 <calibrate_encoder+0x298>)
 8007854:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007858:	eddf 6a34 	vldr	s13, [pc, #208]	; 800792c <calibrate_encoder+0x2ac>
 800785c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007864:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007868:	eeb4 7a67 	vcmp.f32	s14, s15
 800786c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007870:	f000 81b7 	beq.w	8007be2 <calibrate_encoder+0x562>
			cal->sample_count++;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007878:	3301      	adds	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8007880:	e1b2      	b.n	8007be8 <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	ed93 7a05 	vldr	s14, [r3, #20]
 8007888:	4b23      	ldr	r3, [pc, #140]	; (8007918 <calibrate_encoder+0x298>)
 800788a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800788e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8007930 <calibrate_encoder+0x2b0>
 8007892:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007896:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800789a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800789e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ae:	f140 80a9 	bpl.w	8007a04 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80078b8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007920 <calibrate_encoder+0x2a0>
 80078bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <calibrate_encoder+0x298>)
 80078c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80078e4:	3388      	adds	r3, #136	; 0x88
 80078e6:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80078ee:	332c      	adds	r3, #44	; 0x2c
 80078f0:	4619      	mov	r1, r3
 80078f2:	68b8      	ldr	r0, [r7, #8]
 80078f4:	f001 fb5e 	bl	8008fb4 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	ed93 7a05 	vldr	s14, [r3, #20]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790c:	dc14      	bgt.n	8007938 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 800790e:	e16a      	b.n	8007be6 <calibrate_encoder+0x566>
 8007910:	08010ecc 	.word	0x08010ecc
 8007914:	37d1b717 	.word	0x37d1b717
 8007918:	20000658 	.word	0x20000658
 800791c:	40c90fdb 	.word	0x40c90fdb
 8007920:	3983126e 	.word	0x3983126e
 8007924:	08010ef4 	.word	0x08010ef4
 8007928:	3ba0d97c 	.word	0x3ba0d97c
 800792c:	43000000 	.word	0x43000000
 8007930:	41490fdb 	.word	0x41490fdb
 8007934:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8152 	beq.w	8007be6 <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	edd3 7a02 	vldr	s15, [r3, #8]
 8007948:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007934 <calibrate_encoder+0x2b4>
 800794c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007950:	4ba7      	ldr	r3, [pc, #668]	; (8007bf0 <calibrate_encoder+0x570>)
 8007952:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007956:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8007bf4 <calibrate_encoder+0x574>
 800795a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800795e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007966:	ee17 3a90 	vmov	r3, s15
 800796a:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	13db      	asrs	r3, r3, #15
 800797a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	330a      	adds	r3, #10
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800799a:	4610      	mov	r0, r2
 800799c:	0fda      	lsrs	r2, r3, #31
 800799e:	4413      	add	r3, r2
 80079a0:	105b      	asrs	r3, r3, #1
 80079a2:	4619      	mov	r1, r3
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	f100 030a 	add.w	r3, r0, #10
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079b4:	461d      	mov	r5, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	330a      	adds	r3, #10
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	685c      	ldr	r4, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fe5b 	bl	8006684 <__aeabi_f2d>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	e9cd 2300 	strd	r2, r3, [sp]
 80079d6:	4623      	mov	r3, r4
 80079d8:	6a3a      	ldr	r2, [r7, #32]
 80079da:	4629      	mov	r1, r5
 80079dc:	4886      	ldr	r0, [pc, #536]	; (8007bf8 <calibrate_encoder+0x578>)
 80079de:	f7f9 fe83 	bl	80016e8 <iprintf>
			cal->sample_count--;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80079f4:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8007bfc <calibrate_encoder+0x57c>
 80079f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8007a02:	e0f0      	b.n	8007be6 <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8007a04:	68b8      	ldr	r0, [r7, #8]
 8007a06:	f001 f9ed 	bl	8008de4 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8007a0e:	2300      	movs	r3, #0
 8007a10:	643b      	str	r3, [r7, #64]	; 0x40
 8007a12:	e00b      	b.n	8007a2c <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a18:	330a      	adds	r3, #10
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a22:	4413      	add	r3, r2
 8007a24:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8007a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a28:	3301      	adds	r3, #1
 8007a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a2c:	4b70      	ldr	r3, [pc, #448]	; (8007bf0 <calibrate_encoder+0x570>)
 8007a2e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a36:	ee17 3a90 	vmov	r3, s15
 8007a3a:	01db      	lsls	r3, r3, #7
 8007a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	dbe8      	blt.n	8007a14 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8007a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a44:	ee07 3a90 	vmov	s15, r3
 8007a48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007a4c:	4b68      	ldr	r3, [pc, #416]	; (8007bf0 <calibrate_encoder+0x570>)
 8007a4e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007a52:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007c00 <calibrate_encoder+0x580>
 8007a56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a62:	ee17 2a90 	vmov	r2, s15
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8007a6a:	2380      	movs	r3, #128	; 0x80
 8007a6c:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da01      	bge.n	8007a7e <calibrate_encoder+0x3fe>
 8007a7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007a7e:	125b      	asrs	r3, r3, #9
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8007a82:	2300      	movs	r3, #0
 8007a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a86:	e0a0      	b.n	8007bca <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	0fda      	lsrs	r2, r3, #31
 8007a90:	4413      	add	r3, r2
 8007a92:	105b      	asrs	r3, r3, #1
 8007a94:	425b      	negs	r3, r3
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
 8007a98:	e068      	b.n	8007b6c <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007aa4:	4b52      	ldr	r3, [pc, #328]	; (8007bf0 <calibrate_encoder+0x570>)
 8007aa6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8007c00 <calibrate_encoder+0x580>
 8007ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ab6:	eddf 6a52 	vldr	s13, [pc, #328]	; 8007c00 <calibrate_encoder+0x580>
 8007aba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ad0:	ee17 3a90 	vmov	r3, s15
 8007ad4:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da13      	bge.n	8007b04 <calibrate_encoder+0x484>
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ae6:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <calibrate_encoder+0x570>)
 8007ae8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007aec:	eddf 6a44 	vldr	s13, [pc, #272]	; 8007c00 <calibrate_encoder+0x580>
 8007af0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007afc:	ee17 3a90 	vmov	r3, s15
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
 8007b02:	e027      	b.n	8007b54 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b0e:	4b38      	ldr	r3, [pc, #224]	; (8007bf0 <calibrate_encoder+0x570>)
 8007b10:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007b14:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8007c00 <calibrate_encoder+0x580>
 8007b18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	dd12      	ble.n	8007b54 <calibrate_encoder+0x4d4>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b38:	4b2d      	ldr	r3, [pc, #180]	; (8007bf0 <calibrate_encoder+0x570>)
 8007b3a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007b3e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007c00 <calibrate_encoder+0x580>
 8007b42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b4e:	ee17 3a90 	vmov	r3, s15
 8007b52:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	330a      	adds	r3, #10
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b62:	4413      	add	r3, r2
 8007b64:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b68:	3301      	adds	r3, #1
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	0fda      	lsrs	r2, r3, #31
 8007b70:	4413      	add	r3, r2
 8007b72:	105b      	asrs	r3, r3, #1
 8007b74:	461a      	mov	r2, r3
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	db8e      	blt.n	8007a9a <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8007b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8007b84:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8007b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8a:	4413      	add	r3, r2
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	2b7f      	cmp	r3, #127	; 0x7f
 8007b92:	dd02      	ble.n	8007b9a <calibrate_encoder+0x51a>
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	3b80      	subs	r3, #128	; 0x80
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007baa:	330a      	adds	r3, #10
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bbe:	4811      	ldr	r0, [pc, #68]	; (8007c04 <calibrate_encoder+0x584>)
 8007bc0:	f7f9 fd92 	bl	80016e8 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8007bce:	f77f af5b 	ble.w	8007a88 <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8007be0:	e002      	b.n	8007be8 <calibrate_encoder+0x568>
				return;
 8007be2:	bf00      	nop
 8007be4:	e000      	b.n	8007be8 <calibrate_encoder+0x568>
		return;
 8007be6:	bf00      	nop
}
 8007be8:	3748      	adds	r7, #72	; 0x48
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000658 	.word	0x20000658
 8007bf4:	40c90fdb 	.word	0x40c90fdb
 8007bf8:	08010ef4 	.word	0x08010ef4
 8007bfc:	3ba0d97c 	.word	0x3ba0d97c
 8007c00:	43000000 	.word	0x43000000
 8007c04:	08010f04 	.word	0x08010f04

08007c08 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007c0c:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c0e:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <MX_CAN1_Init+0x68>)
 8007c10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8007c12:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c14:	2203      	movs	r2, #3
 8007c16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007c18:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007c1e:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8007c24:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c26:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8007c2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c32:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007c34:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007c40:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007c4c:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007c52:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007c58:	4804      	ldr	r0, [pc, #16]	; (8007c6c <MX_CAN1_Init+0x64>)
 8007c5a:	f004 ffa7 	bl	800cbac <HAL_CAN_Init>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8007c64:	f002 fef0 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007c68:	bf00      	nop
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000328 	.word	0x20000328
 8007c70:	40006400 	.word	0x40006400

08007c74 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	; 0x28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c7c:	f107 0314 	add.w	r3, r7, #20
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	605a      	str	r2, [r3, #4]
 8007c86:	609a      	str	r2, [r3, #8]
 8007c88:	60da      	str	r2, [r3, #12]
 8007c8a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <HAL_CAN_MspInit+0x94>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d134      	bne.n	8007d00 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	4b1c      	ldr	r3, [pc, #112]	; (8007d0c <HAL_CAN_MspInit+0x98>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <HAL_CAN_MspInit+0x98>)
 8007ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ca6:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <HAL_CAN_MspInit+0x98>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <HAL_CAN_MspInit+0x98>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	4a14      	ldr	r2, [pc, #80]	; (8007d0c <HAL_CAN_MspInit+0x98>)
 8007cbc:	f043 0302 	orr.w	r3, r3, #2
 8007cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <HAL_CAN_MspInit+0x98>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007ce0:	2309      	movs	r3, #9
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ce4:	f107 0314 	add.w	r3, r7, #20
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4809      	ldr	r0, [pc, #36]	; (8007d10 <HAL_CAN_MspInit+0x9c>)
 8007cec:	f005 ff48 	bl	800db80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	2014      	movs	r0, #20
 8007cf6:	f005 fe7a 	bl	800d9ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007cfa:	2014      	movs	r0, #20
 8007cfc:	f005 fe93 	bl	800da26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8007d00:	bf00      	nop
 8007d02:	3728      	adds	r7, #40	; 0x28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	40006400 	.word	0x40006400
 8007d0c:	40023800 	.word	0x40023800
 8007d10:	40020400 	.word	0x40020400

08007d14 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8007d22:	4b11      	ldr	r3, [pc, #68]	; (8007d68 <can_rx_init+0x54>)
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	015b      	lsls	r3, r3, #5
 8007d28:	461a      	mov	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3328      	adds	r3, #40	; 0x28
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4804      	ldr	r0, [pc, #16]	; (8007d6c <can_rx_init+0x58>)
 8007d5c:	f005 f822 	bl	800cda4 <HAL_CAN_ConfigFilter>
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20008f5c 	.word	0x20008f5c
 8007d6c:	20000328 	.word	0x20000328

08007d70 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 6; 			// message size of 8 byte
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2206      	movs	r2, #6
 8007d7c:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <can_tx_init+0x30>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	609a      	str	r2, [r3, #8]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	20008f5c 	.word	0x20008f5c

08007da4 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6178      	str	r0, [r7, #20]
 8007dac:	460b      	mov	r3, r1
 8007dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8007db2:	edc7 0a02 	vstr	s1, [r7, #8]
 8007db6:	ed87 1a01 	vstr	s2, [r7, #4]
 8007dba:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8007dbc:	4b34      	ldr	r3, [pc, #208]	; (8007e90 <pack_reply+0xec>)
 8007dbe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007dc2:	4b33      	ldr	r3, [pc, #204]	; (8007e90 <pack_reply+0xec>)
 8007dc4:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007dc8:	2010      	movs	r0, #16
 8007dca:	eeb0 1a47 	vmov.f32	s2, s14
 8007dce:	eef0 0a67 	vmov.f32	s1, s15
 8007dd2:	ed97 0a03 	vldr	s0, [r7, #12]
 8007dd6:	f002 ff27 	bl	800ac28 <float_to_uint>
 8007dda:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8007ddc:	4b2c      	ldr	r3, [pc, #176]	; (8007e90 <pack_reply+0xec>)
 8007dde:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007de2:	4b2b      	ldr	r3, [pc, #172]	; (8007e90 <pack_reply+0xec>)
 8007de4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8007de8:	200c      	movs	r0, #12
 8007dea:	eeb0 1a47 	vmov.f32	s2, s14
 8007dee:	eef0 0a67 	vmov.f32	s1, s15
 8007df2:	ed97 0a02 	vldr	s0, [r7, #8]
 8007df6:	f002 ff17 	bl	800ac28 <float_to_uint>
 8007dfa:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8007dfc:	4b24      	ldr	r3, [pc, #144]	; (8007e90 <pack_reply+0xec>)
 8007dfe:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e02:	eeb1 7a67 	vneg.f32	s14, s15
 8007e06:	4b22      	ldr	r3, [pc, #136]	; (8007e90 <pack_reply+0xec>)
 8007e08:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e10:	4b1f      	ldr	r3, [pc, #124]	; (8007e90 <pack_reply+0xec>)
 8007e12:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007e1a:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <pack_reply+0xec>)
 8007e1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8007e20:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <pack_reply+0xec>)
 8007e22:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e2a:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <pack_reply+0xec>)
 8007e2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e34:	200c      	movs	r0, #12
 8007e36:	eeb0 1a67 	vmov.f32	s2, s15
 8007e3a:	eef0 0a66 	vmov.f32	s1, s13
 8007e3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8007e42:	f002 fef1 	bl	800ac28 <float_to_uint>
 8007e46:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	7cfa      	ldrb	r2, [r7, #19]
 8007e4c:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	121b      	asrs	r3, r3, #8
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	111b      	asrs	r3, r3, #4
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	121b      	asrs	r3, r3, #8
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	4413      	add	r3, r2
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	719a      	strb	r2, [r3, #6]
    }
 8007e86:	bf00      	nop
 8007e88:	3728      	adds	r7, #40	; 0x28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000658 	.word	0x20000658

08007e94 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8007e94:	b084      	sub	sp, #16
 8007e96:	b590      	push	{r4, r7, lr}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8007ea4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8007eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007ebc:	0912      	lsrs	r2, r2, #4
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8007ec4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ece:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8007ed6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007ee0:	0912      	lsrs	r2, r2, #4
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8007ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ef2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8007efa:	4b3e      	ldr	r3, [pc, #248]	; (8007ff4 <unpack_cmd+0x160>)
 8007efc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007f00:	4b3c      	ldr	r3, [pc, #240]	; (8007ff4 <unpack_cmd+0x160>)
 8007f02:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007f06:	2110      	movs	r1, #16
 8007f08:	eef0 0a47 	vmov.f32	s1, s14
 8007f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f10:	6978      	ldr	r0, [r7, #20]
 8007f12:	f002 febc 	bl	800ac8e <uint_to_float>
 8007f16:	eef0 7a40 	vmov.f32	s15, s0
 8007f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f1c:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8007f20:	4b34      	ldr	r3, [pc, #208]	; (8007ff4 <unpack_cmd+0x160>)
 8007f22:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007f26:	4b33      	ldr	r3, [pc, #204]	; (8007ff4 <unpack_cmd+0x160>)
 8007f28:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8007f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f2e:	1d1c      	adds	r4, r3, #4
 8007f30:	210c      	movs	r1, #12
 8007f32:	eef0 0a47 	vmov.f32	s1, s14
 8007f36:	eeb0 0a67 	vmov.f32	s0, s15
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f002 fea7 	bl	800ac8e <uint_to_float>
 8007f40:	eef0 7a40 	vmov.f32	s15, s0
 8007f44:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8007f48:	4b2a      	ldr	r3, [pc, #168]	; (8007ff4 <unpack_cmd+0x160>)
 8007f4a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f50:	f103 0408 	add.w	r4, r3, #8
 8007f54:	210c      	movs	r1, #12
 8007f56:	eef0 0a67 	vmov.f32	s1, s15
 8007f5a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8007ff8 <unpack_cmd+0x164>
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f002 fe95 	bl	800ac8e <uint_to_float>
 8007f64:	eef0 7a40 	vmov.f32	s15, s0
 8007f68:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8007f6c:	4b21      	ldr	r3, [pc, #132]	; (8007ff4 <unpack_cmd+0x160>)
 8007f6e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8007f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f74:	f103 040c 	add.w	r4, r3, #12
 8007f78:	210c      	movs	r1, #12
 8007f7a:	eef0 0a67 	vmov.f32	s1, s15
 8007f7e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8007ff8 <unpack_cmd+0x164>
 8007f82:	68b8      	ldr	r0, [r7, #8]
 8007f84:	f002 fe83 	bl	800ac8e <uint_to_float>
 8007f88:	eef0 7a40 	vmov.f32	s15, s0
 8007f8c:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8007f90:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <unpack_cmd+0x160>)
 8007f92:	edd3 7a03 	vldr	s15, [r3, #12]
 8007f96:	eeb1 7a67 	vneg.f32	s14, s15
 8007f9a:	4b16      	ldr	r3, [pc, #88]	; (8007ff4 <unpack_cmd+0x160>)
 8007f9c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fa4:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <unpack_cmd+0x160>)
 8007fa6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007faa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007fae:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <unpack_cmd+0x160>)
 8007fb0:	ed93 7a03 	vldr	s14, [r3, #12]
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <unpack_cmd+0x160>)
 8007fb6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <unpack_cmd+0x160>)
 8007fc0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fca:	f103 0410 	add.w	r4, r3, #16
 8007fce:	210c      	movs	r1, #12
 8007fd0:	eef0 0a67 	vmov.f32	s1, s15
 8007fd4:	eeb0 0a66 	vmov.f32	s0, s13
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f002 fe58 	bl	800ac8e <uint_to_float>
 8007fde:	eef0 7a40 	vmov.f32	s15, s0
 8007fe2:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007ff0:	b004      	add	sp, #16
 8007ff2:	4770      	bx	lr
 8007ff4:	20000658 	.word	0x20000658
 8007ff8:	00000000 	.word	0x00000000

08007ffc <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	887a      	ldrh	r2, [r7, #2]
 800800c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 800800e:	2200      	movs	r2, #0
 8008010:	2110      	movs	r1, #16
 8008012:	480f      	ldr	r0, [pc, #60]	; (8008050 <drv_spi_write+0x54>)
 8008014:	f005 ff48 	bl	800dea8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	2364      	movs	r3, #100	; 0x64
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	2301      	movs	r3, #1
 8008024:	480b      	ldr	r0, [pc, #44]	; (8008054 <drv_spi_write+0x58>)
 8008026:	f006 fd9c 	bl	800eb62 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800802a:	bf00      	nop
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <drv_spi_write+0x58>)
 800802e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b02      	cmp	r3, #2
 8008036:	d0f9      	beq.n	800802c <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8008038:	2201      	movs	r2, #1
 800803a:	2110      	movs	r1, #16
 800803c:	4804      	ldr	r0, [pc, #16]	; (8008050 <drv_spi_write+0x54>)
 800803e:	f005 ff33 	bl	800dea8 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	885b      	ldrh	r3, [r3, #2]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40020000 	.word	0x40020000
 8008054:	20009458 	.word	0x20009458

08008058 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	463b      	mov	r3, r7
 8008060:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8008064:	463b      	mov	r3, r7
 8008066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff ffc6 	bl	8007ffc <drv_spi_write>
 8008070:	4603      	mov	r3, r0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	463b      	mov	r3, r7
 8008082:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8008086:	463b      	mov	r3, r7
 8008088:	f248 0101 	movw	r1, #32769	; 0x8001
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff ffb5 	bl	8007ffc <drv_spi_write>
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	f107 0308 	add.w	r3, r7, #8
 80080a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80080aa:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	02db      	lsls	r3, r3, #11
 80080b0:	b21b      	sxth	r3, r3
 80080b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ba:	b21b      	sxth	r3, r3
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff ff99 	bl	8007ffc <drv_spi_write>
 80080ca:	4603      	mov	r3, r0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 80080d4:	b590      	push	{r4, r7, lr}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	f107 0408 	add.w	r4, r7, #8
 80080de:	e884 0003 	stmia.w	r4, {r0, r1}
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	02db      	lsls	r3, r3, #11
 80080ea:	b21a      	sxth	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	b21b      	sxth	r3, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	b21b      	sxth	r3, r3
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ff7d 	bl	8007ffc <drv_spi_write>
}
 8008102:	bf00      	nop
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	bd90      	pop	{r4, r7, pc}

0800810a <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800810a:	b590      	push	{r4, r7, lr}
 800810c:	b087      	sub	sp, #28
 800810e:	af00      	add	r7, sp, #0
 8008110:	f107 0408 	add.w	r4, r7, #8
 8008114:	e884 0003 	stmia.w	r4, {r0, r1}
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	025b      	lsls	r3, r3, #9
 8008120:	b21b      	sxth	r3, r3
 8008122:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008126:	b21a      	sxth	r2, r3
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	b21b      	sxth	r3, r3
 800812e:	4313      	orrs	r3, r2
 8008130:	b21a      	sxth	r2, r3
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	01db      	lsls	r3, r3, #7
 8008136:	b21b      	sxth	r3, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	b21a      	sxth	r2, r3
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	015b      	lsls	r3, r3, #5
 8008140:	b21b      	sxth	r3, r3
 8008142:	4313      	orrs	r3, r2
 8008144:	b21a      	sxth	r2, r3
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	b21b      	sxth	r3, r3
 800814c:	4313      	orrs	r3, r2
 800814e:	b21a      	sxth	r2, r3
 8008150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	b21b      	sxth	r3, r3
 8008156:	4313      	orrs	r3, r2
 8008158:	b21a      	sxth	r2, r3
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	b21b      	sxth	r3, r3
 8008160:	4313      	orrs	r3, r2
 8008162:	b21a      	sxth	r2, r3
 8008164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	b21b      	sxth	r3, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	b21a      	sxth	r2, r3
 800816e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008170:	b21b      	sxth	r3, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	b21b      	sxth	r3, r3
 8008176:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8008178:	8afa      	ldrh	r2, [r7, #22]
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff ff3b 	bl	8007ffc <drv_spi_write>
}
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	bd90      	pop	{r4, r7, pc}

0800818e <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 800818e:	b590      	push	{r4, r7, lr}
 8008190:	b087      	sub	sp, #28
 8008192:	af00      	add	r7, sp, #0
 8008194:	f107 0408 	add.w	r4, r7, #8
 8008198:	e884 0003 	stmia.w	r4, {r0, r1}
 800819c:	607a      	str	r2, [r7, #4]
 800819e:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	029b      	lsls	r3, r3, #10
 80081a4:	b21b      	sxth	r3, r3
 80081a6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80081aa:	b21a      	sxth	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	b21b      	sxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	019b      	lsls	r3, r3, #6
 80081ba:	b21b      	sxth	r3, r3
 80081bc:	4313      	orrs	r3, r2
 80081be:	b21a      	sxth	r2, r3
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	b21b      	sxth	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b21a      	sxth	r2, r3
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	b21b      	sxth	r3, r3
 80081ce:	4313      	orrs	r3, r2
 80081d0:	b21b      	sxth	r3, r3
 80081d2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80081d4:	8afa      	ldrh	r2, [r7, #22]
 80081d6:	f107 0308 	add.w	r3, r7, #8
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff ff0d 	bl	8007ffc <drv_spi_write>
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd90      	pop	{r4, r7, pc}

080081ea <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80081ea:	b590      	push	{r4, r7, lr}
 80081ec:	b087      	sub	sp, #28
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	f107 0408 	add.w	r4, r7, #8
 80081f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	029b      	lsls	r3, r3, #10
 8008200:	b21b      	sxth	r3, r3
 8008202:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8008206:	b21a      	sxth	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	025b      	lsls	r3, r3, #9
 800820c:	b21b      	sxth	r3, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	b21a      	sxth	r2, r3
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	b21b      	sxth	r3, r3
 8008218:	4313      	orrs	r3, r2
 800821a:	b21a      	sxth	r2, r3
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	019b      	lsls	r3, r3, #6
 8008220:	b21b      	sxth	r3, r3
 8008222:	4313      	orrs	r3, r2
 8008224:	b21a      	sxth	r2, r3
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	015b      	lsls	r3, r3, #5
 800822a:	b21b      	sxth	r3, r3
 800822c:	4313      	orrs	r3, r2
 800822e:	b21a      	sxth	r2, r3
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	011b      	lsls	r3, r3, #4
 8008234:	b21b      	sxth	r3, r3
 8008236:	4313      	orrs	r3, r2
 8008238:	b21a      	sxth	r2, r3
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	b21b      	sxth	r3, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	b21a      	sxth	r2, r3
 8008244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	b21b      	sxth	r3, r3
 800824a:	4313      	orrs	r3, r2
 800824c:	b21a      	sxth	r2, r3
 800824e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008250:	b21b      	sxth	r3, r3
 8008252:	4313      	orrs	r3, r2
 8008254:	b21b      	sxth	r3, r3
 8008256:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8008258:	8afa      	ldrh	r2, [r7, #22]
 800825a:	f107 0308 	add.w	r3, r7, #8
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff fecb 	bl	8007ffc <drv_spi_write>
}
 8008266:	bf00      	nop
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	bd90      	pop	{r4, r7, pc}

0800826e <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	463b      	mov	r3, r7
 8008276:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 800827a:	2202      	movs	r2, #2
 800827c:	463b      	mov	r3, r7
 800827e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008282:	f7ff ff0b 	bl	800809c <drv_read_register>
 8008286:	4603      	mov	r3, r0
 8008288:	f023 0304 	bic.w	r3, r3, #4
 800828c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800828e:	89fb      	ldrh	r3, [r7, #14]
 8008290:	2202      	movs	r2, #2
 8008292:	4639      	mov	r1, r7
 8008294:	c903      	ldmia	r1, {r0, r1}
 8008296:	f7ff ff1d 	bl	80080d4 <drv_write_register>
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	463b      	mov	r3, r7
 80082aa:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 80082ae:	2202      	movs	r2, #2
 80082b0:	463b      	mov	r3, r7
 80082b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082b6:	f7ff fef1 	bl	800809c <drv_read_register>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f043 0304 	orr.w	r3, r3, #4
 80082c0:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80082c2:	89fb      	ldrh	r3, [r7, #14]
 80082c4:	2202      	movs	r2, #2
 80082c6:	4639      	mov	r1, r7
 80082c8:	c903      	ldmia	r1, {r0, r1}
 80082ca:	f7ff ff03 	bl	80080d4 <drv_write_register>
}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	463b      	mov	r3, r7
 80082e0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 80082e4:	463b      	mov	r3, r7
 80082e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082ea:	f7ff feb5 	bl	8008058 <drv_read_FSR1>
 80082ee:	4603      	mov	r3, r0
 80082f0:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 80082f2:	463b      	mov	r3, r7
 80082f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082f8:	f7ff febf 	bl	800807a <drv_read_FSR2>
 80082fc:	4603      	mov	r3, r0
 80082fe:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <drv_print_faults+0x38>
 800830a:	4857      	ldr	r0, [pc, #348]	; (8008468 <drv_print_faults+0x190>)
 800830c:	f7f9 f9ec 	bl	80016e8 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8008310:	89fb      	ldrh	r3, [r7, #14]
 8008312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <drv_print_faults+0x48>
 800831a:	4854      	ldr	r0, [pc, #336]	; (800846c <drv_print_faults+0x194>)
 800831c:	f7f9 f9e4 	bl	80016e8 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8008320:	89fb      	ldrh	r3, [r7, #14]
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <drv_print_faults+0x58>
 800832a:	4851      	ldr	r0, [pc, #324]	; (8008470 <drv_print_faults+0x198>)
 800832c:	f7f9 f9dc 	bl	80016e8 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8008330:	89fb      	ldrh	r3, [r7, #14]
 8008332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <drv_print_faults+0x68>
 800833a:	484e      	ldr	r0, [pc, #312]	; (8008474 <drv_print_faults+0x19c>)
 800833c:	f7f9 f9d4 	bl	80016e8 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8008340:	89fb      	ldrh	r3, [r7, #14]
 8008342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <drv_print_faults+0x78>
 800834a:	484b      	ldr	r0, [pc, #300]	; (8008478 <drv_print_faults+0x1a0>)
 800834c:	f7f9 f9cc 	bl	80016e8 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <drv_print_faults+0x88>
 800835a:	4848      	ldr	r0, [pc, #288]	; (800847c <drv_print_faults+0x1a4>)
 800835c:	f7f9 f9c4 	bl	80016e8 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8008360:	89fb      	ldrh	r3, [r7, #14]
 8008362:	f003 0310 	and.w	r3, r3, #16
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <drv_print_faults+0x98>
 800836a:	4845      	ldr	r0, [pc, #276]	; (8008480 <drv_print_faults+0x1a8>)
 800836c:	f7f9 f9bc 	bl	80016e8 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8008370:	89fb      	ldrh	r3, [r7, #14]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <drv_print_faults+0xa8>
 800837a:	4842      	ldr	r0, [pc, #264]	; (8008484 <drv_print_faults+0x1ac>)
 800837c:	f7f9 f9b4 	bl	80016e8 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8008380:	89fb      	ldrh	r3, [r7, #14]
 8008382:	f003 0304 	and.w	r3, r3, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <drv_print_faults+0xb8>
 800838a:	483f      	ldr	r0, [pc, #252]	; (8008488 <drv_print_faults+0x1b0>)
 800838c:	f7f9 f9ac 	bl	80016e8 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8008390:	89fb      	ldrh	r3, [r7, #14]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <drv_print_faults+0xc8>
 800839a:	483c      	ldr	r0, [pc, #240]	; (800848c <drv_print_faults+0x1b4>)
 800839c:	f7f9 f9a4 	bl	80016e8 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 80083a0:	89fb      	ldrh	r3, [r7, #14]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <drv_print_faults+0xd8>
 80083aa:	4839      	ldr	r0, [pc, #228]	; (8008490 <drv_print_faults+0x1b8>)
 80083ac:	f7f9 f99c 	bl	80016e8 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 80083b0:	89bb      	ldrh	r3, [r7, #12]
 80083b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <drv_print_faults+0xe8>
 80083ba:	4836      	ldr	r0, [pc, #216]	; (8008494 <drv_print_faults+0x1bc>)
 80083bc:	f7f9 f994 	bl	80016e8 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 80083c0:	89bb      	ldrh	r3, [r7, #12]
 80083c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <drv_print_faults+0xf8>
 80083ca:	4833      	ldr	r0, [pc, #204]	; (8008498 <drv_print_faults+0x1c0>)
 80083cc:	f7f9 f98c 	bl	80016e8 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 80083d0:	89bb      	ldrh	r3, [r7, #12]
 80083d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <drv_print_faults+0x108>
 80083da:	4830      	ldr	r0, [pc, #192]	; (800849c <drv_print_faults+0x1c4>)
 80083dc:	f7f9 f984 	bl	80016e8 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 80083e0:	89bb      	ldrh	r3, [r7, #12]
 80083e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <drv_print_faults+0x118>
 80083ea:	482d      	ldr	r0, [pc, #180]	; (80084a0 <drv_print_faults+0x1c8>)
 80083ec:	f7f9 f97c 	bl	80016e8 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80083f0:	89bb      	ldrh	r3, [r7, #12]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <drv_print_faults+0x128>
 80083fa:	482a      	ldr	r0, [pc, #168]	; (80084a4 <drv_print_faults+0x1cc>)
 80083fc:	f7f9 f974 	bl	80016e8 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8008400:	89bb      	ldrh	r3, [r7, #12]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <drv_print_faults+0x138>
 800840a:	4827      	ldr	r0, [pc, #156]	; (80084a8 <drv_print_faults+0x1d0>)
 800840c:	f7f9 f96c 	bl	80016e8 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8008410:	89bb      	ldrh	r3, [r7, #12]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <drv_print_faults+0x148>
 800841a:	4824      	ldr	r0, [pc, #144]	; (80084ac <drv_print_faults+0x1d4>)
 800841c:	f7f9 f964 	bl	80016e8 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8008420:	89bb      	ldrh	r3, [r7, #12]
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <drv_print_faults+0x158>
 800842a:	4821      	ldr	r0, [pc, #132]	; (80084b0 <drv_print_faults+0x1d8>)
 800842c:	f7f9 f95c 	bl	80016e8 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8008430:	89bb      	ldrh	r3, [r7, #12]
 8008432:	f003 0304 	and.w	r3, r3, #4
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <drv_print_faults+0x168>
 800843a:	481e      	ldr	r0, [pc, #120]	; (80084b4 <drv_print_faults+0x1dc>)
 800843c:	f7f9 f954 	bl	80016e8 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8008440:	89bb      	ldrh	r3, [r7, #12]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <drv_print_faults+0x178>
 800844a:	481b      	ldr	r0, [pc, #108]	; (80084b8 <drv_print_faults+0x1e0>)
 800844c:	f7f9 f94c 	bl	80016e8 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8008450:	89bb      	ldrh	r3, [r7, #12]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <drv_print_faults+0x188>
 800845a:	4818      	ldr	r0, [pc, #96]	; (80084bc <drv_print_faults+0x1e4>)
 800845c:	f7f9 f944 	bl	80016e8 <iprintf>

}
 8008460:	bf00      	nop
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	08010f10 	.word	0x08010f10
 800846c:	08010f1c 	.word	0x08010f1c
 8008470:	08010f28 	.word	0x08010f28
 8008474:	08010f30 	.word	0x08010f30
 8008478:	08010f38 	.word	0x08010f38
 800847c:	08010f40 	.word	0x08010f40
 8008480:	08010f4c 	.word	0x08010f4c
 8008484:	08010f58 	.word	0x08010f58
 8008488:	08010f64 	.word	0x08010f64
 800848c:	08010f70 	.word	0x08010f70
 8008490:	08010f7c 	.word	0x08010f7c
 8008494:	08010f88 	.word	0x08010f88
 8008498:	08010f90 	.word	0x08010f90
 800849c:	08010f98 	.word	0x08010f98
 80084a0:	08010fa0 	.word	0x08010fa0
 80084a4:	08010fa8 	.word	0x08010fa8
 80084a8:	08010fb0 	.word	0x08010fb0
 80084ac:	08010fbc 	.word	0x08010fbc
 80084b0:	08010fc8 	.word	0x08010fc8
 80084b4:	08010fd4 	.word	0x08010fd4
 80084b8:	08010fe0 	.word	0x08010fe0
 80084bc:	08010fec 	.word	0x08010fec

080084c0 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b07      	cmp	r3, #7
 80084ce:	d901      	bls.n	80084d4 <flash_writer_init+0x14>
 80084d0:	2307      	movs	r3, #7
 80084d2:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80084da:	4a07      	ldr	r2, [pc, #28]	; (80084f8 <flash_writer_init+0x38>)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	200001d8 	.word	0x200001d8

080084fc <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 8008504:	f002 ffe2 	bl	800b4cc <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8008508:	20f1      	movs	r0, #241	; 0xf1
 800850a:	f003 f89b 	bl	800b644 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	4a07      	ldr	r2, [pc, #28]	; (8008530 <flash_writer_open+0x34>)
 8008514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008518:	2102      	movs	r1, #2
 800851a:	4618      	mov	r0, r3
 800851c:	f002 fffe 	bl	800b51c <FLASH_EraseSector>
    fw->ready = true;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	701a      	strb	r2, [r3, #0]
}
 8008526:	bf00      	nop
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	200001f8 	.word	0x200001f8

08008534 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8008534:	b590      	push	{r4, r7, lr}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	1d3c      	adds	r4, r7, #4
 800853c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008540:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f003 f842 	bl	800b5dc <FLASH_ProgramWord>
}
 8008558:	bf00      	nop
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	bd90      	pop	{r4, r7, pc}

08008560 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8008560:	b590      	push	{r4, r7, lr}
 8008562:	b089      	sub	sp, #36	; 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	f107 040c 	add.w	r4, r7, #12
 800856a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800856e:	60bb      	str	r3, [r7, #8]
 8008570:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f003 f829 	bl	800b5dc <FLASH_ProgramWord>
}
 800858a:	bf00      	nop
 800858c:	3724      	adds	r7, #36	; 0x24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd90      	pop	{r4, r7, pc}

08008592 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 800859a:	f002 ffaf 	bl	800b4fc <FLASH_Lock>
    fw->ready = false;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	701a      	strb	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 80085ac:	b490      	push	{r4, r7}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	1d3c      	adds	r4, r7, #4
 80085b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085b8:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a05      	ldr	r2, [pc, #20]	; (80085d4 <flash_read_int+0x28>)
 80085be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	681b      	ldr	r3, [r3, #0]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc90      	pop	{r4, r7}
 80085d2:	4770      	bx	lr
 80085d4:	200001d8 	.word	0x200001d8

080085d8 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80085d8:	b490      	push	{r4, r7}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	1d3c      	adds	r4, r7, #4
 80085e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085e4:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4a07      	ldr	r2, [pc, #28]	; (8008608 <flash_read_float+0x30>)
 80085ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	ee07 3a90 	vmov	s15, r3
}
 80085fa:	eeb0 0a67 	vmov.f32	s0, s15
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bc90      	pop	{r4, r7}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	200001d8 	.word	0x200001d8

0800860c <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861e:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008624:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800862c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008634:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800863e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008646:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008658:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800865c:	4b3b      	ldr	r3, [pc, #236]	; (800874c <set_dtc+0x140>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d136      	bne.n	80086d2 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8008664:	4b3a      	ldr	r3, [pc, #232]	; (8008750 <set_dtc+0x144>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008672:	edd7 7a05 	vldr	s15, [r7, #20]
 8008676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867a:	4b35      	ldr	r3, [pc, #212]	; (8008750 <set_dtc+0x144>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008682:	ee17 2a90 	vmov	r2, s15
 8008686:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8008688:	4b31      	ldr	r3, [pc, #196]	; (8008750 <set_dtc+0x144>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008696:	edd7 7a04 	vldr	s15, [r7, #16]
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	4b2c      	ldr	r3, [pc, #176]	; (8008750 <set_dtc+0x144>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a6:	ee17 2a90 	vmov	r2, s15
 80086aa:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80086ac:	4b28      	ldr	r3, [pc, #160]	; (8008750 <set_dtc+0x144>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80086ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80086be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c2:	4b23      	ldr	r3, [pc, #140]	; (8008750 <set_dtc+0x144>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ca:	ee17 2a90 	vmov	r2, s15
 80086ce:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80086d0:	e035      	b.n	800873e <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80086d2:	4b1f      	ldr	r3, [pc, #124]	; (8008750 <set_dtc+0x144>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	ee07 3a90 	vmov	s15, r3
 80086dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80086e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80086e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e8:	4b19      	ldr	r3, [pc, #100]	; (8008750 <set_dtc+0x144>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f0:	ee17 2a90 	vmov	r2, s15
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80086f6:	4b16      	ldr	r3, [pc, #88]	; (8008750 <set_dtc+0x144>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008704:	edd7 7a04 	vldr	s15, [r7, #16]
 8008708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870c:	4b10      	ldr	r3, [pc, #64]	; (8008750 <set_dtc+0x144>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008714:	ee17 2a90 	vmov	r2, s15
 8008718:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800871a:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <set_dtc+0x144>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008728:	edd7 7a03 	vldr	s15, [r7, #12]
 800872c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <set_dtc+0x144>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008738:	ee17 2a90 	vmov	r2, s15
 800873c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800873e:	bf00      	nop
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20008f5c 	.word	0x20008f5c
 8008750:	200094b0 	.word	0x200094b0

08008754 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800875c:	4b38      	ldr	r3, [pc, #224]	; (8008840 <analog_sample+0xec>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10e      	bne.n	8008782 <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8008764:	4837      	ldr	r0, [pc, #220]	; (8008844 <analog_sample+0xf0>)
 8008766:	f003 ffa0 	bl	800c6aa <HAL_ADC_GetValue>
 800876a:	4603      	mov	r3, r0
 800876c:	461a      	mov	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8008772:	4835      	ldr	r0, [pc, #212]	; (8008848 <analog_sample+0xf4>)
 8008774:	f003 ff99 	bl	800c6aa <HAL_ADC_GetValue>
 8008778:	4603      	mov	r3, r0
 800877a:	461a      	mov	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	609a      	str	r2, [r3, #8]
 8008780:	e00d      	b.n	800879e <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8008782:	4831      	ldr	r0, [pc, #196]	; (8008848 <analog_sample+0xf4>)
 8008784:	f003 ff91 	bl	800c6aa <HAL_ADC_GetValue>
 8008788:	4603      	mov	r3, r0
 800878a:	461a      	mov	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8008790:	482c      	ldr	r0, [pc, #176]	; (8008844 <analog_sample+0xf0>)
 8008792:	f003 ff8a 	bl	800c6aa <HAL_ADC_GetValue>
 8008796:	4603      	mov	r3, r0
 8008798:	461a      	mov	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 800879e:	4829      	ldr	r0, [pc, #164]	; (8008844 <analog_sample+0xf0>)
 80087a0:	f003 fe26 	bl	800c3f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 80087a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80087a8:	4826      	ldr	r0, [pc, #152]	; (8008844 <analog_sample+0xf0>)
 80087aa:	f003 fef3 	bl	800c594 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 80087ae:	4827      	ldr	r0, [pc, #156]	; (800884c <analog_sample+0xf8>)
 80087b0:	f003 ff7b 	bl	800c6aa <HAL_ADC_GetValue>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087c8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008850 <analog_sample+0xfc>
 80087cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	ee07 3a90 	vmov	s15, r3
 80087ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	edd3 7a05 	vldr	s15, [r3, #20]
 8008824:	eeb1 7a67 	vneg.f32	s14, s15
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	edd3 7a06 	vldr	s15, [r3, #24]
 800882e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8008838:	bf00      	nop
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20008f5c 	.word	0x20008f5c
 8008844:	20000298 	.word	0x20000298
 8008848:	20000250 	.word	0x20000250
 800884c:	200002e0 	.word	0x200002e0
 8008850:	3c533318 	.word	0x3c533318

08008854 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af00      	add	r7, sp, #0
 800885a:	ed87 0a05 	vstr	s0, [r7, #20]
 800885e:	edc7 0a04 	vstr	s1, [r7, #16]
 8008862:	ed87 1a03 	vstr	s2, [r7, #12]
 8008866:	60b8      	str	r0, [r7, #8]
 8008868:	6079      	str	r1, [r7, #4]
 800886a:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 800886c:	ed97 0a05 	vldr	s0, [r7, #20]
 8008870:	f002 fa7a 	bl	800ad68 <cos_lut>
 8008874:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8008878:	ed97 0a05 	vldr	s0, [r7, #20]
 800887c:	f002 fa3a 	bl	800acf4 <sin_lut>
 8008880:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8008884:	ed97 7a07 	vldr	s14, [r7, #28]
 8008888:	edd7 7a04 	vldr	s15, [r7, #16]
 800888c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008890:	edd7 6a06 	vldr	s13, [r7, #24]
 8008894:	edd7 7a03 	vldr	s15, [r7, #12]
 8008898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800889c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80088a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80088aa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008954 <abc+0x100>
 80088ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80088b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80088b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80088ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80088be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80088c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80088ce:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008958 <abc+0x104>
 80088d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80088d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80088da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80088de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80088e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80088e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80088ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80088f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80088fc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008958 <abc+0x104>
 8008900:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008904:	edd7 7a07 	vldr	s15, [r7, #28]
 8008908:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800890c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008914:	edd7 7a04 	vldr	s15, [r7, #16]
 8008918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800891c:	edd7 7a07 	vldr	s15, [r7, #28]
 8008920:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8008954 <abc+0x100>
 8008924:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008928:	edd7 7a06 	vldr	s15, [r7, #24]
 800892c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008930:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008934:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008938:	edd7 7a03 	vldr	s15, [r7, #12]
 800893c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	edc3 7a00 	vstr	s15, [r3]
    }
 800894a:	bf00      	nop
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	3f5db3d7 	.word	0x3f5db3d7
 8008958:	bf5db3d7 	.word	0xbf5db3d7

0800895c <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	ed87 0a05 	vstr	s0, [r7, #20]
 8008966:	edc7 0a04 	vstr	s1, [r7, #16]
 800896a:	ed87 1a03 	vstr	s2, [r7, #12]
 800896e:	edc7 1a02 	vstr	s3, [r7, #8]
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8008976:	ed97 0a05 	vldr	s0, [r7, #20]
 800897a:	f002 f9f5 	bl	800ad68 <cos_lut>
 800897e:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8008982:	ed97 0a05 	vldr	s0, [r7, #20]
 8008986:	f002 f9b5 	bl	800acf4 <sin_lut>
 800898a:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800898e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008992:	edd7 7a04 	vldr	s15, [r7, #16]
 8008996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800899a:	edd7 7a06 	vldr	s15, [r7, #24]
 800899e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8008a70 <dq0+0x114>
 80089a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80089a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80089aa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80089ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80089b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80089ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80089c6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8008a74 <dq0+0x118>
 80089ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80089ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80089d2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80089d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80089de:	edd7 7a02 	vldr	s15, [r7, #8]
 80089e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089ea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008a78 <dq0+0x11c>
 80089ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80089f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80089fc:	eeb1 7a67 	vneg.f32	s14, s15
 8008a00:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a08:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a0c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8008a74 <dq0+0x118>
 8008a10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008a14:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a18:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008a1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a30:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a34:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008a70 <dq0+0x114>
 8008a38:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008a3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008a44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a58:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8008a78 <dq0+0x11c>
 8008a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	edc3 7a00 	vstr	s15, [r3]

    }
 8008a66:	bf00      	nop
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	3f5db3d7 	.word	0x3f5db3d7
 8008a74:	bf5db3d7 	.word	0xbf5db3d7
 8008a78:	3f2aaaab 	.word	0x3f2aaaab

08008a7c <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	ed2d 8b02 	vpush	{d8}
 8008a82:	b08a      	sub	sp, #40	; 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	ed87 0a07 	vstr	s0, [r7, #28]
 8008a8a:	edc7 0a06 	vstr	s1, [r7, #24]
 8008a8e:	ed87 1a05 	vstr	s2, [r7, #20]
 8008a92:	edc7 1a04 	vstr	s3, [r7, #16]
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8008a9c:	ed97 1a04 	vldr	s2, [r7, #16]
 8008aa0:	edd7 0a05 	vldr	s1, [r7, #20]
 8008aa4:	ed97 0a06 	vldr	s0, [r7, #24]
 8008aa8:	f002 f841 	bl	800ab2e <fminf3>
 8008aac:	eeb0 8a40 	vmov.f32	s16, s0
 8008ab0:	ed97 1a04 	vldr	s2, [r7, #16]
 8008ab4:	edd7 0a05 	vldr	s1, [r7, #20]
 8008ab8:	ed97 0a06 	vldr	s0, [r7, #24]
 8008abc:	f002 f803 	bl	800aac6 <fmaxf3>
 8008ac0:	eef0 7a40 	vmov.f32	s15, s0
 8008ac4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008ac8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ad0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8008ad4:	4b41      	ldr	r3, [pc, #260]	; (8008bdc <svm+0x160>)
 8008ad6:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8008ad8:	ed97 7a06 	vldr	s14, [r7, #24]
 8008adc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ae4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008aec:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8008be0 <svm+0x164>
 8008af0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8008af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8008af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afc:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b04:	eddf 0a37 	vldr	s1, [pc, #220]	; 8008be4 <svm+0x168>
 8008b08:	eeb0 0a67 	vmov.f32	s0, s15
 8008b0c:	f001 ffa3 	bl	800aa56 <fast_fmaxf>
 8008b10:	eef0 7a40 	vmov.f32	s15, s0
 8008b14:	eddf 0a34 	vldr	s1, [pc, #208]	; 8008be8 <svm+0x16c>
 8008b18:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1c:	f001 ffb7 	bl	800aa8e <fast_fminf>
 8008b20:	eef0 7a40 	vmov.f32	s15, s0
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8008b2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b3e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008be0 <svm+0x164>
 8008b42:	ee67 6a87 	vmul.f32	s13, s15, s14
 8008b46:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b56:	eddf 0a23 	vldr	s1, [pc, #140]	; 8008be4 <svm+0x168>
 8008b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b5e:	f001 ff7a 	bl	800aa56 <fast_fmaxf>
 8008b62:	eef0 7a40 	vmov.f32	s15, s0
 8008b66:	eddf 0a20 	vldr	s1, [pc, #128]	; 8008be8 <svm+0x16c>
 8008b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b6e:	f001 ff8e 	bl	800aa8e <fast_fminf>
 8008b72:	eef0 7a40 	vmov.f32	s15, s0
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8008b7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8008b80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b90:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8008be0 <svm+0x164>
 8008b94:	ee67 6a87 	vmul.f32	s13, s15, s14
 8008b98:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba0:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8008be4 <svm+0x168>
 8008bac:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb0:	f001 ff51 	bl	800aa56 <fast_fmaxf>
 8008bb4:	eef0 7a40 	vmov.f32	s15, s0
 8008bb8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8008be8 <svm+0x16c>
 8008bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc0:	f001 ff65 	bl	800aa8e <fast_fminf>
 8008bc4:	eef0 7a40 	vmov.f32	s15, s0
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	edc3 7a00 	vstr	s15, [r3]

    }
 8008bce:	bf00      	nop
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	ecbd 8b02 	vpop	{d8}
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	3ef0a3d7 	.word	0x3ef0a3d7
 8008be0:	3f933333 	.word	0x3f933333
 8008be4:	00000000 	.word	0x00000000
 8008be8:	3f70a3d7 	.word	0x3f70a3d7

08008bec <zero_current>:

void zero_current(ControllerStruct *controller){
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8008bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c00:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff fcf6 	bl	800860c <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e00f      	b.n	8008c46 <zero_current+0x5a>
    	analog_sample(controller);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fd94 	bl	8008754 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	4413      	add	r3, r2
 8008c34:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	dbeb      	blt.n	8008c26 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	fb92 f2f3 	sdiv	r2, r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	fb92 f2f3 	sdiv	r2, r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8008c6a:	bf00      	nop
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a4b      	ldr	r2, [pc, #300]	; (8008dac <init_controller_params+0x138>)
 8008c80:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a49      	ldr	r2, [pc, #292]	; (8008dac <init_controller_params+0x138>)
 8008c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 8008c8a:	4b49      	ldr	r3, [pc, #292]	; (8008db0 <init_controller_params+0x13c>)
 8008c8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008c90:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008db4 <init_controller_params+0x140>
 8008c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 8008c9e:	4b44      	ldr	r3, [pc, #272]	; (8008db0 <init_controller_params+0x13c>)
 8008ca0:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ca4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8008db4 <init_controller_params+0x140>
 8008ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8008cb2:	4b3f      	ldr	r3, [pc, #252]	; (8008db0 <init_controller_params+0x13c>)
 8008cb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8008cb8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8008db8 <init_controller_params+0x144>
 8008cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cc0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8008dbc <init_controller_params+0x148>
 8008cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8008cec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008dc0 <init_controller_params+0x14c>
 8008cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 8008cfa:	4b32      	ldr	r3, [pc, #200]	; (8008dc4 <init_controller_params+0x150>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8008d04:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <init_controller_params+0x13c>)
 8008d06:	edd3 7a03 	vldr	s15, [r3, #12]
 8008d0a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008dc8 <init_controller_params+0x154>
 8008d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d16:	d803      	bhi.n	8008d20 <init_controller_params+0xac>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a2c      	ldr	r2, [pc, #176]	; (8008dcc <init_controller_params+0x158>)
 8008d1c:	671a      	str	r2, [r3, #112]	; 0x70
 8008d1e:	e002      	b.n	8008d26 <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a2b      	ldr	r2, [pc, #172]	; (8008dd0 <init_controller_params+0x15c>)
 8008d24:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8008d26:	2300      	movs	r3, #0
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	e037      	b.n	8008d9c <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d36:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008dd4 <init_controller_params+0x160>
 8008d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d3e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008dd8 <init_controller_params+0x164>
 8008d42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d46:	ee16 0a90 	vmov	r0, s13
 8008d4a:	f7fd fc9b 	bl	8006684 <__aeabi_f2d>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	ec43 2b10 	vmov	d0, r2, r3
 8008d56:	f7f7 fb3f 	bl	80003d8 <exp>
 8008d5a:	ec51 0b10 	vmov	r0, r1, d0
 8008d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d62:	4b1e      	ldr	r3, [pc, #120]	; (8008ddc <init_controller_params+0x168>)
 8008d64:	f7fd fce6 	bl	8006734 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <init_controller_params+0x16c>)
 8008d76:	f7fd fb27 	bl	80063c8 <__adddf3>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4619      	mov	r1, r3
 8008d82:	f7fd ffcf 	bl	8006d24 <__aeabi_d2f>
 8008d86:	4601      	mov	r1, r0
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	333c      	adds	r3, #60	; 0x3c
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	3304      	adds	r3, #4
 8008d94:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008da0:	ddc4      	ble.n	8008d2c <init_controller_params+0xb8>
    }

    }
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	3d3851ec 	.word	0x3d3851ec
 8008db0:	20000658 	.word	0x20000658
 8008db4:	38d1b717 	.word	0x38d1b717
 8008db8:	37d1b717 	.word	0x37d1b717
 8008dbc:	40c90fdb 	.word	0x40c90fdb
 8008dc0:	3dcccccd 	.word	0x3dcccccd
 8008dc4:	20008f5c 	.word	0x20008f5c
 8008dc8:	42200000 	.word	0x42200000
 8008dcc:	3ca4ffff 	.word	0x3ca4ffff
 8008dd0:	3d24ffff 	.word	0x3d24ffff
 8008dd4:	bc000000 	.word	0xbc000000
 8008dd8:	3d03126f 	.word	0x3d03126f
 8008ddc:	3ff33333 	.word	0x3ff33333
 8008de0:	3ff00000 	.word	0x3ff00000

08008de4 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8008dec:	4b36      	ldr	r3, [pc, #216]	; (8008ec8 <reset_foc+0xe4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e02:	4b31      	ldr	r3, [pc, #196]	; (8008ec8 <reset_foc+0xe4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0a:	ee17 2a90 	vmov	r2, s15
 8008e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8008e10:	4b2d      	ldr	r3, [pc, #180]	; (8008ec8 <reset_foc+0xe4>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e26:	4b28      	ldr	r3, [pc, #160]	; (8008ec8 <reset_foc+0xe4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e2e:	ee17 2a90 	vmov	r2, s15
 8008e32:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8008e34:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <reset_foc+0xe4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e4a:	4b1f      	ldr	r3, [pc, #124]	; (8008ec8 <reset_foc+0xe4>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e52:	ee17 2a90 	vmov	r2, s15
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f04f 0200 	mov.w	r2, #0
 8008e5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f04f 0200 	mov.w	r2, #0
 8008e7a:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f04f 0200 	mov.w	r2, #0
 8008e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f04f 0200 	mov.w	r2, #0
 8008e9e:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f04f 0200 	mov.w	r2, #0
 8008ea6:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	200094b0 	.word	0x200094b0

08008ecc <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - controller->v_ref);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	ed93 6a38 	vldr	s12, [r3, #224]	; 0xe0
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8008eec:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8008f04:	eddf 0a29 	vldr	s1, [pc, #164]	; 8008fac <field_weaken+0xe0>
 8008f08:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0c:	f001 fdbf 	bl	800aa8e <fast_fminf>
 8008f10:	eeb0 7a40 	vmov.f32	s14, s0
 8008f14:	4b26      	ldr	r3, [pc, #152]	; (8008fb0 <field_weaken+0xe4>)
 8008f16:	edd3 7a06 	vldr	s15, [r3, #24]
 8008f1a:	eef1 7a67 	vneg.f32	s15, s15
 8008f1e:	eef0 0a67 	vmov.f32	s1, s15
 8008f22:	eeb0 0a47 	vmov.f32	s0, s14
 8008f26:	f001 fd96 	bl	800aa56 <fast_fmaxf>
 8008f2a:	eef0 7a40 	vmov.f32	s15, s0
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->i_d_des = controller->fw_int;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8008f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8008f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f64:	eeb0 0a67 	vmov.f32	s0, s15
 8008f68:	f7f7 fab8 	bl	80004dc <sqrtf>
 8008f6c:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8008f76:	edd7 0a03 	vldr	s1, [r7, #12]
 8008f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f7e:	f001 fd86 	bl	800aa8e <fast_fminf>
 8008f82:	eeb0 7a40 	vmov.f32	s14, s0
 8008f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f8a:	eef1 7a67 	vneg.f32	s15, s15
 8008f8e:	eef0 0a67 	vmov.f32	s1, s15
 8008f92:	eeb0 0a47 	vmov.f32	s0, s14
 8008f96:	f001 fd5e 	bl	800aa56 <fast_fmaxf>
 8008f9a:	eef0 7a40 	vmov.f32	s15, s0
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8


}
 8008fa4:	bf00      	nop
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	00000000 	.word	0x00000000
 8008fb0:	20000658 	.word	0x20000658

08008fb4 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8008fd4:	4bd7      	ldr	r3, [pc, #860]	; (8009334 <commutate+0x380>)
 8008fd6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8008fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	edd3 6a03 	vldr	s13, [r3, #12]
 8008fea:	4bd2      	ldr	r3, [pc, #840]	; (8009334 <commutate+0x380>)
 8008fec:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8008ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	ed93 7a05 	vldr	s14, [r3, #20]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	edd3 6a06 	vldr	s13, [r3, #24]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	ed93 6a07 	vldr	s12, [r3, #28]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3340      	adds	r3, #64	; 0x40
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	eef0 1a46 	vmov.f32	s3, s12
 8009024:	eeb0 1a66 	vmov.f32	s2, s13
 8009028:	eef0 0a47 	vmov.f32	s1, s14
 800902c:	eeb0 0a67 	vmov.f32	s0, s15
 8009030:	f7ff fc94 	bl	800895c <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800903a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8009338 <commutate+0x384>
 800903e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009048:	eddf 6abc 	vldr	s13, [pc, #752]	; 800933c <commutate+0x388>
 800904c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8009060:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009338 <commutate+0x384>
 8009064:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800906e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800933c <commutate+0x388>
 8009072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009086:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8009338 <commutate+0x384>
 800908a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	edd3 7a08 	vldr	s15, [r3, #32]
 8009094:	eddf 6aa9 	vldr	s13, [pc, #676]	; 800933c <commutate+0x388>
 8009098:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800909c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80090ac:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8009340 <commutate+0x38c>
 80090b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090b4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8009344 <commutate+0x390>
 80090b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090bc:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8009348 <commutate+0x394>
 80090c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80090ca:	4b9a      	ldr	r3, [pc, #616]	; (8009334 <commutate+0x380>)
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80090e6:	eeb0 0a67 	vmov.f32	s0, s15
 80090ea:	4610      	mov	r0, r2
 80090ec:	f001 fd53 	bl	800ab96 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80090fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009100:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009114:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8009118:	f04f 0300 	mov.w	r3, #0
 800911c:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 800911e:	f04f 0300 	mov.w	r3, #0
 8009122:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800912a:	edd7 7a07 	vldr	s15, [r7, #28]
 800912e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8009138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800913c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8009156:	eef0 0a47 	vmov.f32	s1, s14
 800915a:	eeb0 0a67 	vmov.f32	s0, s15
 800915e:	f001 fc96 	bl	800aa8e <fast_fminf>
 8009162:	eeb0 7a40 	vmov.f32	s14, s0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800916c:	eef1 7a67 	vneg.f32	s15, s15
 8009170:	eef0 0a67 	vmov.f32	s1, s15
 8009174:	eeb0 0a47 	vmov.f32	s0, s14
 8009178:	f001 fc6d 	bl	800aa56 <fast_fmaxf>
 800917c:	eef0 7a40 	vmov.f32	s15, s0
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8009198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800919c:	edd7 7a07 	vldr	s15, [r7, #28]
 80091a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80091ba:	eef0 0a47 	vmov.f32	s1, s14
 80091be:	eeb0 0a67 	vmov.f32	s0, s15
 80091c2:	f001 fc64 	bl	800aa8e <fast_fminf>
 80091c6:	eeb0 7a40 	vmov.f32	s14, s0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80091d0:	eef1 7a67 	vneg.f32	s15, s15
 80091d4:	eef0 0a67 	vmov.f32	s1, s15
 80091d8:	eeb0 0a47 	vmov.f32	s0, s14
 80091dc:	f001 fc3b 	bl	800aa56 <fast_fmaxf>
 80091e0:	eef0 7a40 	vmov.f32	s15, s0
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80091f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800920a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800920e:	eeb0 0a67 	vmov.f32	s0, s15
 8009212:	f7f7 f963 	bl	80004dc <sqrtf>
 8009216:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8009220:	edd7 7a06 	vldr	s15, [r7, #24]
 8009224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800922e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009232:	edd7 7a04 	vldr	s15, [r7, #16]
 8009236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8009252:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009256:	edd7 7a06 	vldr	s15, [r7, #24]
 800925a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800925e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8009274:	eef0 0a47 	vmov.f32	s1, s14
 8009278:	eeb0 0a67 	vmov.f32	s0, s15
 800927c:	f001 fc07 	bl	800aa8e <fast_fminf>
 8009280:	eeb0 7a40 	vmov.f32	s14, s0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800928a:	eef1 7a67 	vneg.f32	s15, s15
 800928e:	eef0 0a67 	vmov.f32	s1, s15
 8009292:	eeb0 0a47 	vmov.f32	s0, s14
 8009296:	f001 fbde 	bl	800aa56 <fast_fmaxf>
 800929a:	eef0 7a40 	vmov.f32	s15, s0
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80092b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80092c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092c8:	eeb0 0a67 	vmov.f32	s0, s15
 80092cc:	f7f7 f906 	bl	80004dc <sqrtf>
 80092d0:	eef0 7a40 	vmov.f32	s15, s0
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80092e0:	edd7 0a03 	vldr	s1, [r7, #12]
 80092e4:	eeb0 0a67 	vmov.f32	s0, s15
 80092e8:	f001 fbd1 	bl	800aa8e <fast_fminf>
 80092ec:	eeb0 7a40 	vmov.f32	s14, s0
 80092f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80092f4:	eef1 7a67 	vneg.f32	s15, s15
 80092f8:	eef0 0a67 	vmov.f32	s1, s15
 80092fc:	eeb0 0a47 	vmov.f32	s0, s14
 8009300:	f001 fba9 	bl	800aa56 <fast_fmaxf>
 8009304:	eef0 7a40 	vmov.f32	s15, s0
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8009320:	eeb0 0a67 	vmov.f32	s0, s15
 8009324:	4610      	mov	r0, r2
 8009326:	f001 fc36 	bl	800ab96 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	e00d      	b.n	8009350 <commutate+0x39c>
 8009334:	20000658 	.word	0x20000658
 8009338:	3f666666 	.word	0x3f666666
 800933c:	3dcccccd 	.word	0x3dcccccd
 8009340:	3f933333 	.word	0x3f933333
 8009344:	3f70a3d7 	.word	0x3f70a3d7
 8009348:	3f13cd3a 	.word	0x3f13cd3a
 800934c:	381d4951 	.word	0x381d4951
 8009350:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009354:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800934c <commutate+0x398>
 8009358:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800935c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	336c      	adds	r3, #108	; 0x6c
 800937c:	461a      	mov	r2, r3
 800937e:	eeb0 1a66 	vmov.f32	s2, s13
 8009382:	eef0 0a47 	vmov.f32	s1, s14
 8009386:	eeb0 0a67 	vmov.f32	s0, s15
 800938a:	f7ff fa63 	bl	8008854 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3360      	adds	r3, #96	; 0x60
 80093b6:	461a      	mov	r2, r3
 80093b8:	eef0 1a46 	vmov.f32	s3, s12
 80093bc:	eeb0 1a66 	vmov.f32	s2, s13
 80093c0:	eef0 0a47 	vmov.f32	s1, s14
 80093c4:	eeb0 0a67 	vmov.f32	s0, s15
 80093c8:	f7ff fb58 	bl	8008a7c <svm>

       set_dtc(controller);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff f91d 	bl	800860c <set_dtc>

    }
 80093d2:	bf00      	nop
 80093d4:	3720      	adds	r7, #32
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop

080093dc <torque_control>:


void torque_control(ControllerStruct *controller){
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80093f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80093fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8009404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800941a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800941e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009426:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 800942a:	4b18      	ldr	r3, [pc, #96]	; (800948c <torque_control+0xb0>)
 800942c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009430:	4b16      	ldr	r3, [pc, #88]	; (800948c <torque_control+0xb0>)
 8009432:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	ed97 7a03 	vldr	s14, [r7, #12]
 800943e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8009448:	eef0 0a67 	vmov.f32	s1, s15
 800944c:	eeb0 0a66 	vmov.f32	s0, s13
 8009450:	f001 fb1d 	bl	800aa8e <fast_fminf>
 8009454:	eeb0 7a40 	vmov.f32	s14, s0
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800945e:	eef1 7a67 	vneg.f32	s15, s15
 8009462:	eef0 0a67 	vmov.f32	s1, s15
 8009466:	eeb0 0a47 	vmov.f32	s0, s14
 800946a:	f001 faf4 	bl	800aa56 <fast_fmaxf>
 800946e:	eef0 7a40 	vmov.f32	s15, s0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f04f 0200 	mov.w	r2, #0
 800947e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20000658 	.word	0x20000658

08009490 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f04f 0200 	mov.w	r2, #0
 800949e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	785a      	ldrb	r2, [r3, #1]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d00d      	beq.n	8009510 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f945 	bl	8009784 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	78db      	ldrb	r3, [r3, #3]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d006      	beq.n	8009510 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	785a      	ldrb	r2, [r3, #1]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f8d4 	bl	80096b8 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b06      	cmp	r3, #6
 8009516:	f200 80ba 	bhi.w	800968e <run_fsm+0x1ae>
 800951a:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <run_fsm+0x40>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	0800968d 	.word	0x0800968d
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009641 	.word	0x08009641
 800952c:	0800968f 	.word	0x0800968f
 8009530:	0800968d 	.word	0x0800968d
 8009534:	08009683 	.word	0x08009683
 8009538:	0800968d 	.word	0x0800968d
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 800953c:	4b56      	ldr	r3, [pc, #344]	; (8009698 <run_fsm+0x1b8>)
 800953e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009542:	2b00      	cmp	r3, #0
 8009544:	d108      	bne.n	8009558 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8009546:	4b55      	ldr	r3, [pc, #340]	; (800969c <run_fsm+0x1bc>)
 8009548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800954c:	4a52      	ldr	r2, [pc, #328]	; (8009698 <run_fsm+0x1b8>)
 800954e:	4953      	ldr	r1, [pc, #332]	; (800969c <run_fsm+0x1bc>)
 8009550:	4853      	ldr	r0, [pc, #332]	; (80096a0 <run_fsm+0x1c0>)
 8009552:	f7fd ff8d 	bl	8007470 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8009556:	e09a      	b.n	800968e <run_fsm+0x1ae>
			 else if(!comm_encoder_cal.done_cal){
 8009558:	4b4f      	ldr	r3, [pc, #316]	; (8009698 <run_fsm+0x1b8>)
 800955a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800955e:	2b00      	cmp	r3, #0
 8009560:	d108      	bne.n	8009574 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8009562:	4b4e      	ldr	r3, [pc, #312]	; (800969c <run_fsm+0x1bc>)
 8009564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009568:	4a4b      	ldr	r2, [pc, #300]	; (8009698 <run_fsm+0x1b8>)
 800956a:	494c      	ldr	r1, [pc, #304]	; (800969c <run_fsm+0x1bc>)
 800956c:	484c      	ldr	r0, [pc, #304]	; (80096a0 <run_fsm+0x1c0>)
 800956e:	f7fe f887 	bl	8007680 <calibrate_encoder>
			 break;
 8009572:	e08c      	b.n	800968e <run_fsm+0x1ae>
				 E_ZERO = comm_encoder_cal.ezero;
 8009574:	4b48      	ldr	r3, [pc, #288]	; (8009698 <run_fsm+0x1b8>)
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	4a4a      	ldr	r2, [pc, #296]	; (80096a4 <run_fsm+0x1c4>)
 800957a:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800957c:	4b49      	ldr	r3, [pc, #292]	; (80096a4 <run_fsm+0x1c4>)
 800957e:	695c      	ldr	r4, [r3, #20]
 8009580:	4b47      	ldr	r3, [pc, #284]	; (80096a0 <run_fsm+0x1c0>)
 8009582:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8009586:	4b47      	ldr	r3, [pc, #284]	; (80096a4 <run_fsm+0x1c4>)
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	425b      	negs	r3, r3
 800958c:	ee07 3a90 	vmov	s15, r3
 8009590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009598:	eddf 6a43 	vldr	s13, [pc, #268]	; 80096a8 <run_fsm+0x1c8>
 800959c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80095a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80095a4:	eeb0 0a47 	vmov.f32	s0, s14
 80095a8:	f7f6 ff68 	bl	800047c <fmodf>
 80095ac:	eef0 7a40 	vmov.f32	s15, s0
 80095b0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80096ac <run_fsm+0x1cc>
 80095b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095b8:	ee17 0a90 	vmov	r0, s15
 80095bc:	f7fd f862 	bl	8006684 <__aeabi_f2d>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4621      	mov	r1, r4
 80095c6:	483a      	ldr	r0, [pc, #232]	; (80096b0 <run_fsm+0x1d0>)
 80095c8:	f7f8 f88e 	bl	80016e8 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80095cc:	4a34      	ldr	r2, [pc, #208]	; (80096a0 <run_fsm+0x1c0>)
 80095ce:	4b32      	ldr	r3, [pc, #200]	; (8009698 <run_fsm+0x1b8>)
 80095d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80095d4:	332c      	adds	r3, #44	; 0x2c
 80095d6:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 80095da:	4619      	mov	r1, r3
 80095dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095e0:	461a      	mov	r2, r3
 80095e2:	f7f7 fa41 	bl	8000a68 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80095e6:	4a2f      	ldr	r2, [pc, #188]	; (80096a4 <run_fsm+0x1c4>)
 80095e8:	4b2b      	ldr	r3, [pc, #172]	; (8009698 <run_fsm+0x1b8>)
 80095ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80095ee:	332c      	adds	r3, #44	; 0x2c
 80095f0:	f102 0018 	add.w	r0, r2, #24
 80095f4:	4619      	mov	r1, r3
 80095f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095fa:	461a      	mov	r2, r3
 80095fc:	f7f7 fa34 	bl	8000a68 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8009600:	4b2c      	ldr	r3, [pc, #176]	; (80096b4 <run_fsm+0x1d4>)
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	9200      	str	r2, [sp, #0]
 8009606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009608:	f001 fdd6 	bl	800b1b8 <preference_writer_ready>
 800960c:	4603      	mov	r3, r0
 800960e:	f083 0301 	eor.w	r3, r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <run_fsm+0x13e>
 8009618:	4826      	ldr	r0, [pc, #152]	; (80096b4 <run_fsm+0x1d4>)
 800961a:	f001 fdbe 	bl	800b19a <preference_writer_open>
				 preference_writer_flush(&prefs);
 800961e:	4825      	ldr	r0, [pc, #148]	; (80096b4 <run_fsm+0x1d4>)
 8009620:	f001 fdd8 	bl	800b1d4 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8009624:	4823      	ldr	r0, [pc, #140]	; (80096b4 <run_fsm+0x1d4>)
 8009626:	f001 fe53 	bl	800b2d0 <preference_writer_close>
				 preference_writer_load(prefs);
 800962a:	4b22      	ldr	r3, [pc, #136]	; (80096b4 <run_fsm+0x1d4>)
 800962c:	691a      	ldr	r2, [r3, #16]
 800962e:	9200      	str	r2, [sp, #0]
 8009630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009632:	f001 fe0b 	bl	800b24c <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8009636:	211b      	movs	r1, #27
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f8fd 	bl	8009838 <update_fsm>
			 break;
 800963e:	e026      	b.n	800968e <run_fsm+0x1ae>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8009640:	4b18      	ldr	r3, [pc, #96]	; (80096a4 <run_fsm+0x1c4>)
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	dd0a      	ble.n	800965e <run_fsm+0x17e>
 8009648:	4b14      	ldr	r3, [pc, #80]	; (800969c <run_fsm+0x1bc>)
 800964a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800964e:	4b15      	ldr	r3, [pc, #84]	; (80096a4 <run_fsm+0x1c4>)
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	429a      	cmp	r2, r3
 8009654:	dd03      	ble.n	800965e <run_fsm+0x17e>
				 zero_commands(&controller);
 8009656:	4811      	ldr	r0, [pc, #68]	; (800969c <run_fsm+0x1bc>)
 8009658:	f7ff ff1a 	bl	8009490 <zero_commands>
 800965c:	e009      	b.n	8009672 <run_fsm+0x192>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 800965e:	480f      	ldr	r0, [pc, #60]	; (800969c <run_fsm+0x1bc>)
 8009660:	f7ff febc 	bl	80093dc <torque_control>
				 field_weaken(&controller);
 8009664:	480d      	ldr	r0, [pc, #52]	; (800969c <run_fsm+0x1bc>)
 8009666:	f7ff fc31 	bl	8008ecc <field_weaken>
				 commutate(&controller, &comm_encoder);
 800966a:	490d      	ldr	r1, [pc, #52]	; (80096a0 <run_fsm+0x1c0>)
 800966c:	480b      	ldr	r0, [pc, #44]	; (800969c <run_fsm+0x1bc>)
 800966e:	f7ff fca1 	bl	8008fb4 <commutate>
			 }
			 controller.timeout ++;
 8009672:	4b0a      	ldr	r3, [pc, #40]	; (800969c <run_fsm+0x1bc>)
 8009674:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009678:	3301      	adds	r3, #1
 800967a:	4a08      	ldr	r2, [pc, #32]	; (800969c <run_fsm+0x1bc>)
 800967c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 8009680:	e005      	b.n	800968e <run_fsm+0x1ae>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8009682:	2164      	movs	r1, #100	; 0x64
 8009684:	4806      	ldr	r0, [pc, #24]	; (80096a0 <run_fsm+0x1c0>)
 8009686:	f001 fd31 	bl	800b0ec <ps_print>
			 break;
 800968a:	e000      	b.n	800968e <run_fsm+0x1ae>
			 break;
 800968c:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 800968e:	bf00      	nop
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	bd90      	pop	{r4, r7, pc}
 8009696:	bf00      	nop
 8009698:	20000a50 	.word	0x20000a50
 800969c:	20000758 	.word	0x20000758
 80096a0:	20000350 	.word	0x20000350
 80096a4:	20008f5c 	.word	0x20008f5c
 80096a8:	47800000 	.word	0x47800000
 80096ac:	40c90fdb 	.word	0x40c90fdb
 80096b0:	08010ff8 	.word	0x08010ff8
 80096b4:	20000644 	.word	0x20000644

080096b8 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b05      	cmp	r3, #5
 80096c6:	d84d      	bhi.n	8009764 <fsm_enter_state+0xac>
 80096c8:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <fsm_enter_state+0x18>)
 80096ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ce:	bf00      	nop
 80096d0:	080096e9 	.word	0x080096e9
 80096d4:	0800971f 	.word	0x0800971f
 80096d8:	080096f5 	.word	0x080096f5
 80096dc:	08009765 	.word	0x08009765
 80096e0:	080096ef 	.word	0x080096ef
 80096e4:	08009763 	.word	0x08009763
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 80096e8:	f000 f97c 	bl	80099e4 <enter_menu_state>
				break;
 80096ec:	e03a      	b.n	8009764 <fsm_enter_state+0xac>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 80096ee:	f000 f9a5 	bl	8009a3c <enter_setup_state>
				break;
 80096f2:	e037      	b.n	8009764 <fsm_enter_state+0xac>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80096f4:	2201      	movs	r2, #1
 80096f6:	2120      	movs	r1, #32
 80096f8:	481c      	ldr	r0, [pc, #112]	; (800976c <fsm_enter_state+0xb4>)
 80096fa:	f004 fbd5 	bl	800dea8 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 80096fe:	481c      	ldr	r0, [pc, #112]	; (8009770 <fsm_enter_state+0xb8>)
 8009700:	f7ff fb70 	bl	8008de4 <reset_foc>
				drv_enable_gd(drv);
 8009704:	4b1b      	ldr	r3, [pc, #108]	; (8009774 <fsm_enter_state+0xbc>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	2100      	movs	r1, #0
 800970a:	4611      	mov	r1, r2
 800970c:	889a      	ldrh	r2, [r3, #4]
 800970e:	2300      	movs	r3, #0
 8009710:	f362 030f 	bfi	r3, r2, #0, #16
 8009714:	4608      	mov	r0, r1
 8009716:	4619      	mov	r1, r3
 8009718:	f7fe fda9 	bl	800826e <drv_enable_gd>
				break;
 800971c:	e022      	b.n	8009764 <fsm_enter_state+0xac>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800971e:	4b16      	ldr	r3, [pc, #88]	; (8009778 <fsm_enter_state+0xc0>)
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8009726:	4b14      	ldr	r3, [pc, #80]	; (8009778 <fsm_enter_state+0xc0>)
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <fsm_enter_state+0xc0>)
 8009730:	2200      	movs	r2, #0
 8009732:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <fsm_enter_state+0xc4>)
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 800973c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009740:	2100      	movs	r1, #0
 8009742:	480f      	ldr	r0, [pc, #60]	; (8009780 <fsm_enter_state+0xc8>)
 8009744:	f7f7 fa2a 	bl	8000b9c <memset>
				drv_enable_gd(drv);
 8009748:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <fsm_enter_state+0xbc>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	2100      	movs	r1, #0
 800974e:	4611      	mov	r1, r2
 8009750:	889a      	ldrh	r2, [r3, #4]
 8009752:	2300      	movs	r3, #0
 8009754:	f362 030f 	bfi	r3, r2, #0, #16
 8009758:	4608      	mov	r0, r1
 800975a:	4619      	mov	r1, r3
 800975c:	f7fe fd87 	bl	800826e <drv_enable_gd>
				break;
 8009760:	e000      	b.n	8009764 <fsm_enter_state+0xac>
				break;
 8009762:	bf00      	nop

		}
 }
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	40020800 	.word	0x40020800
 8009770:	20000758 	.word	0x20000758
 8009774:	2000937c 	.word	0x2000937c
 8009778:	20000a50 	.word	0x20000a50
 800977c:	20000350 	.word	0x20000350
 8009780:	2000042c 	.word	0x2000042c

08009784 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b05      	cmp	r3, #5
 8009792:	d846      	bhi.n	8009822 <fsm_exit_state+0x9e>
 8009794:	a201      	add	r2, pc, #4	; (adr r2, 800979c <fsm_exit_state+0x18>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097b5 	.word	0x080097b5
 80097a0:	08009803 	.word	0x08009803
 80097a4:	080097cd 	.word	0x080097cd
 80097a8:	08009823 	.word	0x08009823
 80097ac:	080097bd 	.word	0x080097bd
 80097b0:	080097c5 	.word	0x080097c5
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	70da      	strb	r2, [r3, #3]
				break;
 80097ba:	e032      	b.n	8009822 <fsm_exit_state+0x9e>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	70da      	strb	r2, [r3, #3]
				break;
 80097c2:	e02e      	b.n	8009822 <fsm_exit_state+0x9e>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	70da      	strb	r2, [r3, #3]
				break;
 80097ca:	e02a      	b.n	8009822 <fsm_exit_state+0x9e>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 80097d2:	4b16      	ldr	r3, [pc, #88]	; (800982c <fsm_exit_state+0xa8>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	2100      	movs	r1, #0
 80097d8:	4611      	mov	r1, r2
 80097da:	889a      	ldrh	r2, [r3, #4]
 80097dc:	2300      	movs	r3, #0
 80097de:	f362 030f 	bfi	r3, r2, #0, #16
 80097e2:	4608      	mov	r0, r1
 80097e4:	4619      	mov	r1, r3
 80097e6:	f7fe fd5c 	bl	80082a2 <drv_disable_gd>
					reset_foc(&controller);
 80097ea:	4811      	ldr	r0, [pc, #68]	; (8009830 <fsm_exit_state+0xac>)
 80097ec:	f7ff fafa 	bl	8008de4 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80097f0:	2200      	movs	r2, #0
 80097f2:	2120      	movs	r1, #32
 80097f4:	480f      	ldr	r0, [pc, #60]	; (8009834 <fsm_exit_state+0xb0>)
 80097f6:	f004 fb57 	bl	800dea8 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 80097fa:	480d      	ldr	r0, [pc, #52]	; (8009830 <fsm_exit_state+0xac>)
 80097fc:	f7ff fe48 	bl	8009490 <zero_commands>
				break;
 8009800:	e00f      	b.n	8009822 <fsm_exit_state+0x9e>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <fsm_exit_state+0xa8>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	2100      	movs	r1, #0
 8009808:	4611      	mov	r1, r2
 800980a:	889a      	ldrh	r2, [r3, #4]
 800980c:	2300      	movs	r3, #0
 800980e:	f362 030f 	bfi	r3, r2, #0, #16
 8009812:	4608      	mov	r0, r1
 8009814:	4619      	mov	r1, r3
 8009816:	f7fe fd44 	bl	80082a2 <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	70da      	strb	r2, [r3, #3]
				break;
 8009820:	bf00      	nop
		}

 }
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	2000937c 	.word	0x2000937c
 8009830:	20000758 	.word	0x20000758
 8009834:	40020800 	.word	0x40020800

08009838 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af02      	add	r7, sp, #8
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	2b1b      	cmp	r3, #27
 8009848:	d106      	bne.n	8009858 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	70da      	strb	r2, [r3, #3]
		return;
 8009856:	e0b7      	b.n	80099c8 <update_fsm+0x190>
	}
	switch(fsmstate->state){
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	2b05      	cmp	r3, #5
 800985e:	f200 80b3 	bhi.w	80099c8 <update_fsm+0x190>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <update_fsm+0x30>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	08009881 	.word	0x08009881
 800986c:	080099c9 	.word	0x080099c9
 8009870:	080099c9 	.word	0x080099c9
 8009874:	080099c9 	.word	0x080099c9
 8009878:	0800998d 	.word	0x0800998d
 800987c:	080099c9 	.word	0x080099c9
		case MENU_MODE:
			switch (fsm_input){
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	3b63      	subs	r3, #99	; 0x63
 8009884:	2b17      	cmp	r3, #23
 8009886:	f200 809e 	bhi.w	80099c6 <update_fsm+0x18e>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <update_fsm+0x58>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098f1 	.word	0x080098f1
 8009894:	080099c7 	.word	0x080099c7
 8009898:	0800990d 	.word	0x0800990d
 800989c:	080099c7 	.word	0x080099c7
 80098a0:	080099c7 	.word	0x080099c7
 80098a4:	080099c7 	.word	0x080099c7
 80098a8:	080099c7 	.word	0x080099c7
 80098ac:	080099c7 	.word	0x080099c7
 80098b0:	080099c7 	.word	0x080099c7
 80098b4:	080099c7 	.word	0x080099c7
 80098b8:	080098ff 	.word	0x080098ff
 80098bc:	080099c7 	.word	0x080099c7
 80098c0:	080099c7 	.word	0x080099c7
 80098c4:	080099c7 	.word	0x080099c7
 80098c8:	080099c7 	.word	0x080099c7
 80098cc:	080099c7 	.word	0x080099c7
 80098d0:	0800991b 	.word	0x0800991b
 80098d4:	080099c7 	.word	0x080099c7
 80098d8:	080099c7 	.word	0x080099c7
 80098dc:	080099c7 	.word	0x080099c7
 80098e0:	080099c7 	.word	0x080099c7
 80098e4:	080099c7 	.word	0x080099c7
 80098e8:	080099c7 	.word	0x080099c7
 80098ec:	08009929 	.word	0x08009929
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	70da      	strb	r2, [r3, #3]
					break;
 80098fc:	e045      	b.n	800998a <update_fsm+0x152>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2202      	movs	r2, #2
 8009902:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	70da      	strb	r2, [r3, #3]
					break;
 800990a:	e03e      	b.n	800998a <update_fsm+0x152>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2205      	movs	r2, #5
 8009910:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	70da      	strb	r2, [r3, #3]
					break;
 8009918:	e037      	b.n	800998a <update_fsm+0x152>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2204      	movs	r2, #4
 800991e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	70da      	strb	r2, [r3, #3]
					break;
 8009926:	e030      	b.n	800998a <update_fsm+0x152>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8009928:	4b29      	ldr	r3, [pc, #164]	; (80099d0 <update_fsm+0x198>)
 800992a:	2200      	movs	r2, #0
 800992c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					ps_sample(&comm_encoder, DT);
 8009930:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80099d4 <update_fsm+0x19c>
 8009934:	4826      	ldr	r0, [pc, #152]	; (80099d0 <update_fsm+0x198>)
 8009936:	f001 fa67 	bl	800ae08 <ps_sample>
					int zero_count = comm_encoder.count;
 800993a:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <update_fsm+0x198>)
 800993c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800993e:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8009940:	4a25      	ldr	r2, [pc, #148]	; (80099d8 <update_fsm+0x1a0>)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8009946:	4b25      	ldr	r3, [pc, #148]	; (80099dc <update_fsm+0x1a4>)
 8009948:	691a      	ldr	r2, [r3, #16]
 800994a:	9200      	str	r2, [sp, #0]
 800994c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800994e:	f001 fc33 	bl	800b1b8 <preference_writer_ready>
 8009952:	4603      	mov	r3, r0
 8009954:	f083 0301 	eor.w	r3, r3, #1
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <update_fsm+0x12c>
 800995e:	481f      	ldr	r0, [pc, #124]	; (80099dc <update_fsm+0x1a4>)
 8009960:	f001 fc1b 	bl	800b19a <preference_writer_open>
					preference_writer_flush(&prefs);
 8009964:	481d      	ldr	r0, [pc, #116]	; (80099dc <update_fsm+0x1a4>)
 8009966:	f001 fc35 	bl	800b1d4 <preference_writer_flush>
					preference_writer_close(&prefs);
 800996a:	481c      	ldr	r0, [pc, #112]	; (80099dc <update_fsm+0x1a4>)
 800996c:	f001 fcb0 	bl	800b2d0 <preference_writer_close>
					preference_writer_load(prefs);
 8009970:	4b1a      	ldr	r3, [pc, #104]	; (80099dc <update_fsm+0x1a4>)
 8009972:	691a      	ldr	r2, [r3, #16]
 8009974:	9200      	str	r2, [sp, #0]
 8009976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009978:	f001 fc68 	bl	800b24c <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 800997c:	4b16      	ldr	r3, [pc, #88]	; (80099d8 <update_fsm+0x1a0>)
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	4619      	mov	r1, r3
 8009982:	4817      	ldr	r0, [pc, #92]	; (80099e0 <update_fsm+0x1a8>)
 8009984:	f7f7 feb0 	bl	80016e8 <iprintf>
					break;
 8009988:	bf00      	nop
				}
			break;
 800998a:	e01c      	b.n	80099c6 <update_fsm+0x18e>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 800998c:	78fb      	ldrb	r3, [r7, #3]
 800998e:	2b0d      	cmp	r3, #13
 8009990:	d103      	bne.n	800999a <update_fsm+0x162>
				process_user_input(fsmstate);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f9c8 	bl	8009d28 <process_user_input>
				break;
 8009998:	e016      	b.n	80099c8 <update_fsm+0x190>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	7b1b      	ldrb	r3, [r3, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <update_fsm+0x172>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	78fa      	ldrb	r2, [r7, #3]
 80099a6:	735a      	strb	r2, [r3, #13]
 80099a8:	e006      	b.n	80099b8 <update_fsm+0x180>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	7b1b      	ldrb	r3, [r3, #12]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	4413      	add	r3, r2
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7b1b      	ldrb	r3, [r3, #12]
 80099bc:	3301      	adds	r3, #1
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 80099c4:	e000      	b.n	80099c8 <update_fsm+0x190>
			break;
 80099c6:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000350 	.word	0x20000350
 80099d4:	37d1b717 	.word	0x37d1b717
 80099d8:	20008f5c 	.word	0x20008f5c
 80099dc:	20000644 	.word	0x20000644
 80099e0:	0801100c 	.word	0x0801100c

080099e4 <enter_menu_state>:


 void enter_menu_state(void){
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 80099e8:	480c      	ldr	r0, [pc, #48]	; (8009a1c <enter_menu_state+0x38>)
 80099ea:	f7f7 fe7d 	bl	80016e8 <iprintf>
	    printf(" Commands:\n\r");
 80099ee:	480c      	ldr	r0, [pc, #48]	; (8009a20 <enter_menu_state+0x3c>)
 80099f0:	f7f7 fe7a 	bl	80016e8 <iprintf>
	    printf(" m - Motor Mode\n\r");
 80099f4:	480b      	ldr	r0, [pc, #44]	; (8009a24 <enter_menu_state+0x40>)
 80099f6:	f7f7 fe77 	bl	80016e8 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 80099fa:	480b      	ldr	r0, [pc, #44]	; (8009a28 <enter_menu_state+0x44>)
 80099fc:	f7f7 fe74 	bl	80016e8 <iprintf>
	    printf(" s - Setup\n\r");
 8009a00:	480a      	ldr	r0, [pc, #40]	; (8009a2c <enter_menu_state+0x48>)
 8009a02:	f7f7 fe71 	bl	80016e8 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8009a06:	480a      	ldr	r0, [pc, #40]	; (8009a30 <enter_menu_state+0x4c>)
 8009a08:	f7f7 fe6e 	bl	80016e8 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8009a0c:	4809      	ldr	r0, [pc, #36]	; (8009a34 <enter_menu_state+0x50>)
 8009a0e:	f7f7 fe6b 	bl	80016e8 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8009a12:	4809      	ldr	r0, [pc, #36]	; (8009a38 <enter_menu_state+0x54>)
 8009a14:	f7f7 fe68 	bl	80016e8 <iprintf>

	    //gpio.led->write(0);
 }
 8009a18:	bf00      	nop
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	08011034 	.word	0x08011034
 8009a20:	0801103c 	.word	0x0801103c
 8009a24:	0801104c 	.word	0x0801104c
 8009a28:	08011060 	.word	0x08011060
 8009a2c:	0801107c 	.word	0x0801107c
 8009a30:	0801108c 	.word	0x0801108c
 8009a34:	080110a4 	.word	0x080110a4
 8009a38:	080110c0 	.word	0x080110c0

08009a3c <enter_setup_state>:

 void enter_setup_state(void){
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8009a42:	487d      	ldr	r0, [pc, #500]	; (8009c38 <enter_setup_state+0x1fc>)
 8009a44:	f7f7 fe50 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8009a48:	4b7c      	ldr	r3, [pc, #496]	; (8009c3c <enter_setup_state+0x200>)
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	4b7c      	ldr	r3, [pc, #496]	; (8009c40 <enter_setup_state+0x204>)
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	4b7c      	ldr	r3, [pc, #496]	; (8009c44 <enter_setup_state+0x208>)
 8009a52:	4a7d      	ldr	r2, [pc, #500]	; (8009c48 <enter_setup_state+0x20c>)
 8009a54:	497d      	ldr	r1, [pc, #500]	; (8009c4c <enter_setup_state+0x210>)
 8009a56:	487e      	ldr	r0, [pc, #504]	; (8009c50 <enter_setup_state+0x214>)
 8009a58:	f7f7 fe46 	bl	80016e8 <iprintf>
	    printf("\r\n Motor:\r\n");
 8009a5c:	487d      	ldr	r0, [pc, #500]	; (8009c54 <enter_setup_state+0x218>)
 8009a5e:	f7f7 fecb 	bl	80017f8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8009a62:	4b7d      	ldr	r3, [pc, #500]	; (8009c58 <enter_setup_state+0x21c>)
 8009a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fc fe0c 	bl	8006684 <__aeabi_f2d>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a74:	4b79      	ldr	r3, [pc, #484]	; (8009c5c <enter_setup_state+0x220>)
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4b79      	ldr	r3, [pc, #484]	; (8009c60 <enter_setup_state+0x224>)
 8009a7a:	4a7a      	ldr	r2, [pc, #488]	; (8009c64 <enter_setup_state+0x228>)
 8009a7c:	497a      	ldr	r1, [pc, #488]	; (8009c68 <enter_setup_state+0x22c>)
 8009a7e:	487b      	ldr	r0, [pc, #492]	; (8009c6c <enter_setup_state+0x230>)
 8009a80:	f7f7 fe32 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8009a84:	4b74      	ldr	r3, [pc, #464]	; (8009c58 <enter_setup_state+0x21c>)
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fc fdfb 	bl	8006684 <__aeabi_f2d>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a96:	4b71      	ldr	r3, [pc, #452]	; (8009c5c <enter_setup_state+0x220>)
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	4b71      	ldr	r3, [pc, #452]	; (8009c60 <enter_setup_state+0x224>)
 8009a9c:	4a74      	ldr	r2, [pc, #464]	; (8009c70 <enter_setup_state+0x234>)
 8009a9e:	4975      	ldr	r1, [pc, #468]	; (8009c74 <enter_setup_state+0x238>)
 8009aa0:	4875      	ldr	r0, [pc, #468]	; (8009c78 <enter_setup_state+0x23c>)
 8009aa2:	f7f7 fe21 	bl	80016e8 <iprintf>
	    printf("\r\n Control:\r\n");
 8009aa6:	4875      	ldr	r0, [pc, #468]	; (8009c7c <enter_setup_state+0x240>)
 8009aa8:	f7f7 fea6 	bl	80017f8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8009aac:	4b6a      	ldr	r3, [pc, #424]	; (8009c58 <enter_setup_state+0x21c>)
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fc fde7 	bl	8006684 <__aeabi_f2d>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009abe:	4b70      	ldr	r3, [pc, #448]	; (8009c80 <enter_setup_state+0x244>)
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	4b70      	ldr	r3, [pc, #448]	; (8009c84 <enter_setup_state+0x248>)
 8009ac4:	4a70      	ldr	r2, [pc, #448]	; (8009c88 <enter_setup_state+0x24c>)
 8009ac6:	4971      	ldr	r1, [pc, #452]	; (8009c8c <enter_setup_state+0x250>)
 8009ac8:	4871      	ldr	r0, [pc, #452]	; (8009c90 <enter_setup_state+0x254>)
 8009aca:	f7f7 fe0d 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8009ace:	4b62      	ldr	r3, [pc, #392]	; (8009c58 <enter_setup_state+0x21c>)
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fc fdd6 	bl	8006684 <__aeabi_f2d>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ae0:	4b6c      	ldr	r3, [pc, #432]	; (8009c94 <enter_setup_state+0x258>)
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	4b6c      	ldr	r3, [pc, #432]	; (8009c98 <enter_setup_state+0x25c>)
 8009ae6:	4a6d      	ldr	r2, [pc, #436]	; (8009c9c <enter_setup_state+0x260>)
 8009ae8:	496d      	ldr	r1, [pc, #436]	; (8009ca0 <enter_setup_state+0x264>)
 8009aea:	4869      	ldr	r0, [pc, #420]	; (8009c90 <enter_setup_state+0x254>)
 8009aec:	f7f7 fdfc 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8009af0:	4b59      	ldr	r3, [pc, #356]	; (8009c58 <enter_setup_state+0x21c>)
 8009af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fc fdc5 	bl	8006684 <__aeabi_f2d>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b02:	4b56      	ldr	r3, [pc, #344]	; (8009c5c <enter_setup_state+0x220>)
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	4b55      	ldr	r3, [pc, #340]	; (8009c5c <enter_setup_state+0x220>)
 8009b08:	4a66      	ldr	r2, [pc, #408]	; (8009ca4 <enter_setup_state+0x268>)
 8009b0a:	4967      	ldr	r1, [pc, #412]	; (8009ca8 <enter_setup_state+0x26c>)
 8009b0c:	4860      	ldr	r0, [pc, #384]	; (8009c90 <enter_setup_state+0x254>)
 8009b0e:	f7f7 fdeb 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8009b12:	4b51      	ldr	r3, [pc, #324]	; (8009c58 <enter_setup_state+0x21c>)
 8009b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fc fdb4 	bl	8006684 <__aeabi_f2d>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b24:	4b4d      	ldr	r3, [pc, #308]	; (8009c5c <enter_setup_state+0x220>)
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4b4c      	ldr	r3, [pc, #304]	; (8009c5c <enter_setup_state+0x220>)
 8009b2a:	4a60      	ldr	r2, [pc, #384]	; (8009cac <enter_setup_state+0x270>)
 8009b2c:	4960      	ldr	r1, [pc, #384]	; (8009cb0 <enter_setup_state+0x274>)
 8009b2e:	4858      	ldr	r0, [pc, #352]	; (8009c90 <enter_setup_state+0x254>)
 8009b30:	f7f7 fdda 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8009b34:	4b48      	ldr	r3, [pc, #288]	; (8009c58 <enter_setup_state+0x21c>)
 8009b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fc fda3 	bl	8006684 <__aeabi_f2d>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b46:	4b5b      	ldr	r3, [pc, #364]	; (8009cb4 <enter_setup_state+0x278>)
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4b53      	ldr	r3, [pc, #332]	; (8009c98 <enter_setup_state+0x25c>)
 8009b4c:	4a5a      	ldr	r2, [pc, #360]	; (8009cb8 <enter_setup_state+0x27c>)
 8009b4e:	495b      	ldr	r1, [pc, #364]	; (8009cbc <enter_setup_state+0x280>)
 8009b50:	484f      	ldr	r0, [pc, #316]	; (8009c90 <enter_setup_state+0x254>)
 8009b52:	f7f7 fdc9 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8009b56:	4b40      	ldr	r3, [pc, #256]	; (8009c58 <enter_setup_state+0x21c>)
 8009b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fc fd92 	bl	8006684 <__aeabi_f2d>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b68:	4b55      	ldr	r3, [pc, #340]	; (8009cc0 <enter_setup_state+0x284>)
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	4b4a      	ldr	r3, [pc, #296]	; (8009c98 <enter_setup_state+0x25c>)
 8009b6e:	4a55      	ldr	r2, [pc, #340]	; (8009cc4 <enter_setup_state+0x288>)
 8009b70:	4955      	ldr	r1, [pc, #340]	; (8009cc8 <enter_setup_state+0x28c>)
 8009b72:	4847      	ldr	r0, [pc, #284]	; (8009c90 <enter_setup_state+0x254>)
 8009b74:	f7f7 fdb8 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8009b78:	4b37      	ldr	r3, [pc, #220]	; (8009c58 <enter_setup_state+0x21c>)
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fc fd81 	bl	8006684 <__aeabi_f2d>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b8a:	4b50      	ldr	r3, [pc, #320]	; (8009ccc <enter_setup_state+0x290>)
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	4b42      	ldr	r3, [pc, #264]	; (8009c98 <enter_setup_state+0x25c>)
 8009b90:	4a4f      	ldr	r2, [pc, #316]	; (8009cd0 <enter_setup_state+0x294>)
 8009b92:	4950      	ldr	r1, [pc, #320]	; (8009cd4 <enter_setup_state+0x298>)
 8009b94:	483e      	ldr	r0, [pc, #248]	; (8009c90 <enter_setup_state+0x254>)
 8009b96:	f7f7 fda7 	bl	80016e8 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8009b9a:	4b2f      	ldr	r3, [pc, #188]	; (8009c58 <enter_setup_state+0x21c>)
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fc fd70 	bl	8006684 <__aeabi_f2d>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bac:	4b4a      	ldr	r3, [pc, #296]	; (8009cd8 <enter_setup_state+0x29c>)
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	4b39      	ldr	r3, [pc, #228]	; (8009c98 <enter_setup_state+0x25c>)
 8009bb2:	4a4a      	ldr	r2, [pc, #296]	; (8009cdc <enter_setup_state+0x2a0>)
 8009bb4:	494a      	ldr	r1, [pc, #296]	; (8009ce0 <enter_setup_state+0x2a4>)
 8009bb6:	4836      	ldr	r0, [pc, #216]	; (8009c90 <enter_setup_state+0x254>)
 8009bb8:	f7f7 fd96 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8009bbc:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <enter_setup_state+0x21c>)
 8009bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fc fd5f 	bl	8006684 <__aeabi_f2d>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bce:	4b45      	ldr	r3, [pc, #276]	; (8009ce4 <enter_setup_state+0x2a8>)
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	4b31      	ldr	r3, [pc, #196]	; (8009c98 <enter_setup_state+0x25c>)
 8009bd4:	4a44      	ldr	r2, [pc, #272]	; (8009ce8 <enter_setup_state+0x2ac>)
 8009bd6:	4945      	ldr	r1, [pc, #276]	; (8009cec <enter_setup_state+0x2b0>)
 8009bd8:	482d      	ldr	r0, [pc, #180]	; (8009c90 <enter_setup_state+0x254>)
 8009bda:	f7f7 fd85 	bl	80016e8 <iprintf>
	    printf("\r\n CAN:\r\n");
 8009bde:	4844      	ldr	r0, [pc, #272]	; (8009cf0 <enter_setup_state+0x2b4>)
 8009be0:	f7f7 fe0a 	bl	80017f8 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8009be4:	4b43      	ldr	r3, [pc, #268]	; (8009cf4 <enter_setup_state+0x2b8>)
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	9301      	str	r3, [sp, #4]
 8009bea:	4b43      	ldr	r3, [pc, #268]	; (8009cf8 <enter_setup_state+0x2bc>)
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	4b1c      	ldr	r3, [pc, #112]	; (8009c60 <enter_setup_state+0x224>)
 8009bf0:	4a42      	ldr	r2, [pc, #264]	; (8009cfc <enter_setup_state+0x2c0>)
 8009bf2:	4943      	ldr	r1, [pc, #268]	; (8009d00 <enter_setup_state+0x2c4>)
 8009bf4:	4843      	ldr	r0, [pc, #268]	; (8009d04 <enter_setup_state+0x2c8>)
 8009bf6:	f7f7 fd77 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8009bfa:	4b3e      	ldr	r3, [pc, #248]	; (8009cf4 <enter_setup_state+0x2b8>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	4b3d      	ldr	r3, [pc, #244]	; (8009cf8 <enter_setup_state+0x2bc>)
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <enter_setup_state+0x224>)
 8009c06:	4a40      	ldr	r2, [pc, #256]	; (8009d08 <enter_setup_state+0x2cc>)
 8009c08:	4940      	ldr	r1, [pc, #256]	; (8009d0c <enter_setup_state+0x2d0>)
 8009c0a:	483e      	ldr	r0, [pc, #248]	; (8009d04 <enter_setup_state+0x2c8>)
 8009c0c:	f7f7 fd6c 	bl	80016e8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8009c10:	4b38      	ldr	r3, [pc, #224]	; (8009cf4 <enter_setup_state+0x2b8>)
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	4b3e      	ldr	r3, [pc, #248]	; (8009d10 <enter_setup_state+0x2d4>)
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	4b11      	ldr	r3, [pc, #68]	; (8009c60 <enter_setup_state+0x224>)
 8009c1c:	4a3d      	ldr	r2, [pc, #244]	; (8009d14 <enter_setup_state+0x2d8>)
 8009c1e:	493e      	ldr	r1, [pc, #248]	; (8009d18 <enter_setup_state+0x2dc>)
 8009c20:	483e      	ldr	r0, [pc, #248]	; (8009d1c <enter_setup_state+0x2e0>)
 8009c22:	f7f7 fd61 	bl	80016e8 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8009c26:	483e      	ldr	r0, [pc, #248]	; (8009d20 <enter_setup_state+0x2e4>)
 8009c28:	f7f7 fd5e 	bl	80016e8 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8009c2c:	483d      	ldr	r0, [pc, #244]	; (8009d24 <enter_setup_state+0x2e8>)
 8009c2e:	f7f7 fd5b 	bl	80016e8 <iprintf>
 }
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	080110d8 	.word	0x080110d8
 8009c3c:	0801112c 	.word	0x0801112c
 8009c40:	0801113c 	.word	0x0801113c
 8009c44:	080110f4 	.word	0x080110f4
 8009c48:	080110f8 	.word	0x080110f8
 8009c4c:	08011104 	.word	0x08011104
 8009c50:	0801110c 	.word	0x0801110c
 8009c54:	08011140 	.word	0x08011140
 8009c58:	20000658 	.word	0x20000658
 8009c5c:	08011180 	.word	0x08011180
 8009c60:	0801114c 	.word	0x0801114c
 8009c64:	08011150 	.word	0x08011150
 8009c68:	0801115c 	.word	0x0801115c
 8009c6c:	08011160 	.word	0x08011160
 8009c70:	08011184 	.word	0x08011184
 8009c74:	0801119c 	.word	0x0801119c
 8009c78:	080111a0 	.word	0x080111a0
 8009c7c:	080111c0 	.word	0x080111c0
 8009c80:	08011210 	.word	0x08011210
 8009c84:	080111d0 	.word	0x080111d0
 8009c88:	080111d4 	.word	0x080111d4
 8009c8c:	080111ec 	.word	0x080111ec
 8009c90:	080111f0 	.word	0x080111f0
 8009c94:	08011234 	.word	0x08011234
 8009c98:	08011218 	.word	0x08011218
 8009c9c:	0801121c 	.word	0x0801121c
 8009ca0:	08011230 	.word	0x08011230
 8009ca4:	0801123c 	.word	0x0801123c
 8009ca8:	08011258 	.word	0x08011258
 8009cac:	0801125c 	.word	0x0801125c
 8009cb0:	0801127c 	.word	0x0801127c
 8009cb4:	080112a0 	.word	0x080112a0
 8009cb8:	08011280 	.word	0x08011280
 8009cbc:	0801129c 	.word	0x0801129c
 8009cc0:	080112cc 	.word	0x080112cc
 8009cc4:	080112a8 	.word	0x080112a8
 8009cc8:	080112c8 	.word	0x080112c8
 8009ccc:	080112ec 	.word	0x080112ec
 8009cd0:	080112d0 	.word	0x080112d0
 8009cd4:	080112e8 	.word	0x080112e8
 8009cd8:	08011310 	.word	0x08011310
 8009cdc:	080112f4 	.word	0x080112f4
 8009ce0:	0801130c 	.word	0x0801130c
 8009ce4:	08011334 	.word	0x08011334
 8009ce8:	08011318 	.word	0x08011318
 8009cec:	08011330 	.word	0x08011330
 8009cf0:	0801133c 	.word	0x0801133c
 8009cf4:	20008f5c 	.word	0x20008f5c
 8009cf8:	08011374 	.word	0x08011374
 8009cfc:	08011348 	.word	0x08011348
 8009d00:	08011350 	.word	0x08011350
 8009d04:	08011354 	.word	0x08011354
 8009d08:	08011378 	.word	0x08011378
 8009d0c:	08011384 	.word	0x08011384
 8009d10:	080113c8 	.word	0x080113c8
 8009d14:	08011388 	.word	0x08011388
 8009d18:	080113a8 	.word	0x080113a8
 8009d1c:	080113ac 	.word	0x080113ac
 8009d20:	080113d0 	.word	0x080113d0
 8009d24:	0801141c 	.word	0x0801141c

08009d28 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7b5b      	ldrb	r3, [r3, #13]
 8009d34:	3b61      	subs	r3, #97	; 0x61
 8009d36:	2b17      	cmp	r3, #23
 8009d38:	f200 8268 	bhi.w	800a20c <process_user_input+0x4e4>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <process_user_input+0x1c>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009fa3 	.word	0x08009fa3
 8009d48:	08009da5 	.word	0x08009da5
 8009d4c:	08009f4f 	.word	0x08009f4f
 8009d50:	0800a121 	.word	0x0800a121
 8009d54:	0800a20d 	.word	0x0800a20d
 8009d58:	08009e89 	.word	0x08009e89
 8009d5c:	08009ff7 	.word	0x08009ff7
 8009d60:	08009efb 	.word	0x08009efb
 8009d64:	08009df9 	.word	0x08009df9
 8009d68:	0800a20d 	.word	0x0800a20d
 8009d6c:	0800a03b 	.word	0x0800a03b
 8009d70:	08009e35 	.word	0x08009e35
 8009d74:	08009e17 	.word	0x08009e17
 8009d78:	0800a20d 	.word	0x0800a20d
 8009d7c:	0800a20d 	.word	0x0800a20d
 8009d80:	0800a165 	.word	0x0800a165
 8009d84:	0800a20d 	.word	0x0800a20d
 8009d88:	0800a20d 	.word	0x0800a20d
 8009d8c:	0800a20d 	.word	0x0800a20d
 8009d90:	08009edd 	.word	0x08009edd
 8009d94:	0800a20d 	.word	0x0800a20d
 8009d98:	0800a1b9 	.word	0x0800a1b9
 8009d9c:	0800a20d 	.word	0x0800a20d
 8009da0:	0800a07f 	.word	0x0800a07f
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3304      	adds	r3, #4
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f6 fe27 	bl	80009fc <atof>
 8009dae:	ec53 2b10 	vmov	r2, r3, d0
 8009db2:	4610      	mov	r0, r2
 8009db4:	4619      	mov	r1, r3
 8009db6:	f7fc ffb5 	bl	8006d24 <__aeabi_d2f>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800a0c4 <process_user_input+0x39c>
 8009dc0:	ee00 3a10 	vmov	s0, r3
 8009dc4:	f7f6 face 	bl	8000364 <fminf>
 8009dc8:	eef0 7a40 	vmov.f32	s15, s0
 8009dcc:	eddf 0abe 	vldr	s1, [pc, #760]	; 800a0c8 <process_user_input+0x3a0>
 8009dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8009dd4:	f7f6 faa8 	bl	8000328 <fmaxf>
 8009dd8:	eef0 7a40 	vmov.f32	s15, s0
 8009ddc:	4bbb      	ldr	r3, [pc, #748]	; (800a0cc <process_user_input+0x3a4>)
 8009dde:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8009de2:	4bba      	ldr	r3, [pc, #744]	; (800a0cc <process_user_input+0x3a4>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fc fc4c 	bl	8006684 <__aeabi_f2d>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	48b7      	ldr	r0, [pc, #732]	; (800a0d0 <process_user_input+0x3a8>)
 8009df2:	f7f7 fc79 	bl	80016e8 <iprintf>
			 break;
 8009df6:	e210      	b.n	800a21a <process_user_input+0x4f2>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7f6 fe01 	bl	8000a04 <atoi>
 8009e02:	4603      	mov	r3, r0
 8009e04:	4ab3      	ldr	r2, [pc, #716]	; (800a0d4 <process_user_input+0x3ac>)
 8009e06:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8009e08:	4bb2      	ldr	r3, [pc, #712]	; (800a0d4 <process_user_input+0x3ac>)
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	48b2      	ldr	r0, [pc, #712]	; (800a0d8 <process_user_input+0x3b0>)
 8009e10:	f7f7 fc6a 	bl	80016e8 <iprintf>
			 break;
 8009e14:	e201      	b.n	800a21a <process_user_input+0x4f2>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7f6 fdf2 	bl	8000a04 <atoi>
 8009e20:	4603      	mov	r3, r0
 8009e22:	4aac      	ldr	r2, [pc, #688]	; (800a0d4 <process_user_input+0x3ac>)
 8009e24:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 8009e26:	4bab      	ldr	r3, [pc, #684]	; (800a0d4 <process_user_input+0x3ac>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	48ab      	ldr	r0, [pc, #684]	; (800a0dc <process_user_input+0x3b4>)
 8009e2e:	f7f7 fc5b 	bl	80016e8 <iprintf>
			 break;
 8009e32:	e1f2      	b.n	800a21a <process_user_input+0x4f2>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f6 fddf 	bl	80009fc <atof>
 8009e3e:	ec53 2b10 	vmov	r2, r3, d0
 8009e42:	4610      	mov	r0, r2
 8009e44:	4619      	mov	r1, r3
 8009e46:	f7fc ff6d 	bl	8006d24 <__aeabi_d2f>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	eddf 0aa4 	vldr	s1, [pc, #656]	; 800a0e0 <process_user_input+0x3b8>
 8009e50:	ee00 3a10 	vmov	s0, r3
 8009e54:	f7f6 fa86 	bl	8000364 <fminf>
 8009e58:	eef0 7a40 	vmov.f32	s15, s0
 8009e5c:	eddf 0aaf 	vldr	s1, [pc, #700]	; 800a11c <process_user_input+0x3f4>
 8009e60:	eeb0 0a67 	vmov.f32	s0, s15
 8009e64:	f7f6 fa60 	bl	8000328 <fmaxf>
 8009e68:	eef0 7a40 	vmov.f32	s15, s0
 8009e6c:	4b97      	ldr	r3, [pc, #604]	; (800a0cc <process_user_input+0x3a4>)
 8009e6e:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8009e72:	4b96      	ldr	r3, [pc, #600]	; (800a0cc <process_user_input+0x3a4>)
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fc fc04 	bl	8006684 <__aeabi_f2d>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4898      	ldr	r0, [pc, #608]	; (800a0e4 <process_user_input+0x3bc>)
 8009e82:	f7f7 fc31 	bl	80016e8 <iprintf>
			 break;
 8009e86:	e1c8      	b.n	800a21a <process_user_input+0x4f2>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7f6 fdb5 	bl	80009fc <atof>
 8009e92:	ec53 2b10 	vmov	r2, r3, d0
 8009e96:	4610      	mov	r0, r2
 8009e98:	4619      	mov	r1, r3
 8009e9a:	f7fc ff43 	bl	8006d24 <__aeabi_d2f>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	eddf 0a91 	vldr	s1, [pc, #580]	; 800a0e8 <process_user_input+0x3c0>
 8009ea4:	ee00 3a10 	vmov	s0, r3
 8009ea8:	f7f6 fa5c 	bl	8000364 <fminf>
 8009eac:	eef0 7a40 	vmov.f32	s15, s0
 8009eb0:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800a11c <process_user_input+0x3f4>
 8009eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8009eb8:	f7f6 fa36 	bl	8000328 <fmaxf>
 8009ebc:	eef0 7a40 	vmov.f32	s15, s0
 8009ec0:	4b82      	ldr	r3, [pc, #520]	; (800a0cc <process_user_input+0x3a4>)
 8009ec2:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8009ec6:	4b81      	ldr	r3, [pc, #516]	; (800a0cc <process_user_input+0x3a4>)
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fc fbda 	bl	8006684 <__aeabi_f2d>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4885      	ldr	r0, [pc, #532]	; (800a0ec <process_user_input+0x3c4>)
 8009ed6:	f7f7 fc07 	bl	80016e8 <iprintf>
			 break;
 8009eda:	e19e      	b.n	800a21a <process_user_input+0x4f2>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f6 fd8f 	bl	8000a04 <atoi>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	4a7a      	ldr	r2, [pc, #488]	; (800a0d4 <process_user_input+0x3ac>)
 8009eea:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8009eec:	4b79      	ldr	r3, [pc, #484]	; (800a0d4 <process_user_input+0x3ac>)
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	487f      	ldr	r0, [pc, #508]	; (800a0f0 <process_user_input+0x3c8>)
 8009ef4:	f7f7 fbf8 	bl	80016e8 <iprintf>
			 break;
 8009ef8:	e18f      	b.n	800a21a <process_user_input+0x4f2>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7f6 fd7c 	bl	80009fc <atof>
 8009f04:	ec53 2b10 	vmov	r2, r3, d0
 8009f08:	4610      	mov	r0, r2
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	f7fc ff0a 	bl	8006d24 <__aeabi_d2f>
 8009f10:	4603      	mov	r3, r0
 8009f12:	eddf 0a78 	vldr	s1, [pc, #480]	; 800a0f4 <process_user_input+0x3cc>
 8009f16:	ee00 3a10 	vmov	s0, r3
 8009f1a:	f7f6 fa23 	bl	8000364 <fminf>
 8009f1e:	eef0 7a40 	vmov.f32	s15, s0
 8009f22:	eddf 0a7e 	vldr	s1, [pc, #504]	; 800a11c <process_user_input+0x3f4>
 8009f26:	eeb0 0a67 	vmov.f32	s0, s15
 8009f2a:	f7f6 f9fd 	bl	8000328 <fmaxf>
 8009f2e:	eef0 7a40 	vmov.f32	s15, s0
 8009f32:	4b66      	ldr	r3, [pc, #408]	; (800a0cc <process_user_input+0x3a4>)
 8009f34:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8009f38:	4b64      	ldr	r3, [pc, #400]	; (800a0cc <process_user_input+0x3a4>)
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fc fba1 	bl	8006684 <__aeabi_f2d>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	486c      	ldr	r0, [pc, #432]	; (800a0f8 <process_user_input+0x3d0>)
 8009f48:	f7f7 fbce 	bl	80016e8 <iprintf>
			 break;
 8009f4c:	e165      	b.n	800a21a <process_user_input+0x4f2>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f6 fd52 	bl	80009fc <atof>
 8009f58:	ec53 2b10 	vmov	r2, r3, d0
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f7fc fee0 	bl	8006d24 <__aeabi_d2f>
 8009f64:	4603      	mov	r3, r0
 8009f66:	eddf 0a65 	vldr	s1, [pc, #404]	; 800a0fc <process_user_input+0x3d4>
 8009f6a:	ee00 3a10 	vmov	s0, r3
 8009f6e:	f7f6 f9f9 	bl	8000364 <fminf>
 8009f72:	eef0 7a40 	vmov.f32	s15, s0
 8009f76:	eddf 0a69 	vldr	s1, [pc, #420]	; 800a11c <process_user_input+0x3f4>
 8009f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f7e:	f7f6 f9d3 	bl	8000328 <fmaxf>
 8009f82:	eef0 7a40 	vmov.f32	s15, s0
 8009f86:	4b51      	ldr	r3, [pc, #324]	; (800a0cc <process_user_input+0x3a4>)
 8009f88:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8009f8c:	4b4f      	ldr	r3, [pc, #316]	; (800a0cc <process_user_input+0x3a4>)
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fc fb77 	bl	8006684 <__aeabi_f2d>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4859      	ldr	r0, [pc, #356]	; (800a100 <process_user_input+0x3d8>)
 8009f9c:	f7f7 fba4 	bl	80016e8 <iprintf>
			 break;
 8009fa0:	e13b      	b.n	800a21a <process_user_input+0x4f2>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7f6 fd28 	bl	80009fc <atof>
 8009fac:	ec53 2b10 	vmov	r2, r3, d0
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	f7fc feb6 	bl	8006d24 <__aeabi_d2f>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8009fbe:	ee00 3a10 	vmov	s0, r3
 8009fc2:	f7f6 f9cf 	bl	8000364 <fminf>
 8009fc6:	eef0 7a40 	vmov.f32	s15, s0
 8009fca:	eddf 0a54 	vldr	s1, [pc, #336]	; 800a11c <process_user_input+0x3f4>
 8009fce:	eeb0 0a67 	vmov.f32	s0, s15
 8009fd2:	f7f6 f9a9 	bl	8000328 <fmaxf>
 8009fd6:	eef0 7a40 	vmov.f32	s15, s0
 8009fda:	4b3c      	ldr	r3, [pc, #240]	; (800a0cc <process_user_input+0x3a4>)
 8009fdc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8009fe0:	4b3a      	ldr	r3, [pc, #232]	; (800a0cc <process_user_input+0x3a4>)
 8009fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fc fb4d 	bl	8006684 <__aeabi_f2d>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4845      	ldr	r0, [pc, #276]	; (800a104 <process_user_input+0x3dc>)
 8009ff0:	f7f7 fb7a 	bl	80016e8 <iprintf>
			 break;
 8009ff4:	e111      	b.n	800a21a <process_user_input+0x4f2>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f6 fcfe 	bl	80009fc <atof>
 800a000:	ec53 2b10 	vmov	r2, r3, d0
 800a004:	4610      	mov	r0, r2
 800a006:	4619      	mov	r1, r3
 800a008:	f7fc fe8c 	bl	8006d24 <__aeabi_d2f>
 800a00c:	4603      	mov	r3, r0
 800a00e:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800a108 <process_user_input+0x3e0>
 800a012:	ee00 3a10 	vmov	s0, r3
 800a016:	f7f6 f987 	bl	8000328 <fmaxf>
 800a01a:	eef0 7a40 	vmov.f32	s15, s0
 800a01e:	4b2b      	ldr	r3, [pc, #172]	; (800a0cc <process_user_input+0x3a4>)
 800a020:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 800a024:	4b29      	ldr	r3, [pc, #164]	; (800a0cc <process_user_input+0x3a4>)
 800a026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fc fb2b 	bl	8006684 <__aeabi_f2d>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4836      	ldr	r0, [pc, #216]	; (800a10c <process_user_input+0x3e4>)
 800a034:	f7f7 fb58 	bl	80016e8 <iprintf>
			 break;
 800a038:	e0ef      	b.n	800a21a <process_user_input+0x4f2>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 fcdc 	bl	80009fc <atof>
 800a044:	ec53 2b10 	vmov	r2, r3, d0
 800a048:	4610      	mov	r0, r2
 800a04a:	4619      	mov	r1, r3
 800a04c:	f7fc fe6a 	bl	8006d24 <__aeabi_d2f>
 800a050:	4603      	mov	r3, r0
 800a052:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800a110 <process_user_input+0x3e8>
 800a056:	ee00 3a10 	vmov	s0, r3
 800a05a:	f7f6 f965 	bl	8000328 <fmaxf>
 800a05e:	eef0 7a40 	vmov.f32	s15, s0
 800a062:	4b1a      	ldr	r3, [pc, #104]	; (800a0cc <process_user_input+0x3a4>)
 800a064:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 800a068:	4b18      	ldr	r3, [pc, #96]	; (800a0cc <process_user_input+0x3a4>)
 800a06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fc fb09 	bl	8006684 <__aeabi_f2d>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4827      	ldr	r0, [pc, #156]	; (800a114 <process_user_input+0x3ec>)
 800a078:	f7f7 fb36 	bl	80016e8 <iprintf>
			 break;
 800a07c:	e0cd      	b.n	800a21a <process_user_input+0x4f2>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3304      	adds	r3, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f7f6 fcba 	bl	80009fc <atof>
 800a088:	ec53 2b10 	vmov	r2, r3, d0
 800a08c:	4610      	mov	r0, r2
 800a08e:	4619      	mov	r1, r3
 800a090:	f7fc fe48 	bl	8006d24 <__aeabi_d2f>
 800a094:	4603      	mov	r3, r0
 800a096:	eddf 0a21 	vldr	s1, [pc, #132]	; 800a11c <process_user_input+0x3f4>
 800a09a:	ee00 3a10 	vmov	s0, r3
 800a09e:	f7f6 f943 	bl	8000328 <fmaxf>
 800a0a2:	eef0 7a40 	vmov.f32	s15, s0
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <process_user_input+0x3a4>)
 800a0a8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 800a0ac:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <process_user_input+0x3a4>)
 800a0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fc fae7 	bl	8006684 <__aeabi_f2d>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4817      	ldr	r0, [pc, #92]	; (800a118 <process_user_input+0x3f0>)
 800a0bc:	f7f7 fb14 	bl	80016e8 <iprintf>
			 break;
 800a0c0:	e0ab      	b.n	800a21a <process_user_input+0x4f2>
 800a0c2:	bf00      	nop
 800a0c4:	44fa0000 	.word	0x44fa0000
 800a0c8:	42c80000 	.word	0x42c80000
 800a0cc:	20000658 	.word	0x20000658
 800a0d0:	08011448 	.word	0x08011448
 800a0d4:	20008f5c 	.word	0x20008f5c
 800a0d8:	0801145c 	.word	0x0801145c
 800a0dc:	08011470 	.word	0x08011470
 800a0e0:	42700000 	.word	0x42700000
 800a0e4:	08011488 	.word	0x08011488
 800a0e8:	42040000 	.word	0x42040000
 800a0ec:	0801149c 	.word	0x0801149c
 800a0f0:	080114b4 	.word	0x080114b4
 800a0f4:	43160000 	.word	0x43160000
 800a0f8:	080114cc 	.word	0x080114cc
 800a0fc:	42200000 	.word	0x42200000
 800a100:	080114e4 	.word	0x080114e4
 800a104:	080114fc 	.word	0x080114fc
 800a108:	3a83126f 	.word	0x3a83126f
 800a10c:	08011510 	.word	0x08011510
 800a110:	38d1b717 	.word	0x38d1b717
 800a114:	08011520 	.word	0x08011520
 800a118:	08011530 	.word	0x08011530
 800a11c:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	4618      	mov	r0, r3
 800a126:	f7f6 fc69 	bl	80009fc <atof>
 800a12a:	ec53 2b10 	vmov	r2, r3, d0
 800a12e:	4610      	mov	r0, r2
 800a130:	4619      	mov	r1, r3
 800a132:	f7fc fdf7 	bl	8006d24 <__aeabi_d2f>
 800a136:	4603      	mov	r3, r0
 800a138:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 800a11c <process_user_input+0x3f4>
 800a13c:	ee00 3a10 	vmov	s0, r3
 800a140:	f7f6 f8f2 	bl	8000328 <fmaxf>
 800a144:	eef0 7a40 	vmov.f32	s15, s0
 800a148:	4b4b      	ldr	r3, [pc, #300]	; (800a278 <process_user_input+0x550>)
 800a14a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800a14e:	4b4a      	ldr	r3, [pc, #296]	; (800a278 <process_user_input+0x550>)
 800a150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a152:	4618      	mov	r0, r3
 800a154:	f7fc fa96 	bl	8006684 <__aeabi_f2d>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4847      	ldr	r0, [pc, #284]	; (800a27c <process_user_input+0x554>)
 800a15e:	f7f7 fac3 	bl	80016e8 <iprintf>
			 break;
 800a162:	e05a      	b.n	800a21a <process_user_input+0x4f2>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3304      	adds	r3, #4
 800a168:	4618      	mov	r0, r3
 800a16a:	f7f6 fc47 	bl	80009fc <atof>
 800a16e:	ec53 2b10 	vmov	r2, r3, d0
 800a172:	4610      	mov	r0, r2
 800a174:	4619      	mov	r1, r3
 800a176:	f7fc fdd5 	bl	8006d24 <__aeabi_d2f>
 800a17a:	4603      	mov	r3, r0
 800a17c:	eddf 0a40 	vldr	s1, [pc, #256]	; 800a280 <process_user_input+0x558>
 800a180:	ee00 3a10 	vmov	s0, r3
 800a184:	f7f6 f8d0 	bl	8000328 <fmaxf>
 800a188:	eef0 7a40 	vmov.f32	s15, s0
 800a18c:	4b3a      	ldr	r3, [pc, #232]	; (800a278 <process_user_input+0x550>)
 800a18e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 800a192:	4b39      	ldr	r3, [pc, #228]	; (800a278 <process_user_input+0x550>)
 800a194:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a198:	eef1 7a67 	vneg.f32	s15, s15
 800a19c:	4b36      	ldr	r3, [pc, #216]	; (800a278 <process_user_input+0x550>)
 800a19e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 800a1a2:	4b35      	ldr	r3, [pc, #212]	; (800a278 <process_user_input+0x550>)
 800a1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fc fa6c 	bl	8006684 <__aeabi_f2d>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4834      	ldr	r0, [pc, #208]	; (800a284 <process_user_input+0x55c>)
 800a1b2:	f7f7 fa99 	bl	80016e8 <iprintf>
			 break;
 800a1b6:	e030      	b.n	800a21a <process_user_input+0x4f2>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7f6 fc1d 	bl	80009fc <atof>
 800a1c2:	ec53 2b10 	vmov	r2, r3, d0
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	f7fc fdab 	bl	8006d24 <__aeabi_d2f>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800a280 <process_user_input+0x558>
 800a1d4:	ee00 3a10 	vmov	s0, r3
 800a1d8:	f7f6 f8a6 	bl	8000328 <fmaxf>
 800a1dc:	eef0 7a40 	vmov.f32	s15, s0
 800a1e0:	4b25      	ldr	r3, [pc, #148]	; (800a278 <process_user_input+0x550>)
 800a1e2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <process_user_input+0x550>)
 800a1e8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a1ec:	eef1 7a67 	vneg.f32	s15, s15
 800a1f0:	4b21      	ldr	r3, [pc, #132]	; (800a278 <process_user_input+0x550>)
 800a1f2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 800a1f6:	4b20      	ldr	r3, [pc, #128]	; (800a278 <process_user_input+0x550>)
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fc fa42 	bl	8006684 <__aeabi_f2d>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4820      	ldr	r0, [pc, #128]	; (800a288 <process_user_input+0x560>)
 800a206:	f7f7 fa6f 	bl	80016e8 <iprintf>
			 break;
 800a20a:	e006      	b.n	800a21a <process_user_input+0x4f2>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	3304      	adds	r3, #4
 800a210:	4619      	mov	r1, r3
 800a212:	481e      	ldr	r0, [pc, #120]	; (800a28c <process_user_input+0x564>)
 800a214:	f7f7 fa68 	bl	80016e8 <iprintf>
			 break;
 800a218:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800a21a:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <process_user_input+0x568>)
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	9200      	str	r2, [sp, #0]
 800a220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a222:	f000 ffc9 	bl	800b1b8 <preference_writer_ready>
 800a226:	4603      	mov	r3, r0
 800a228:	f083 0301 	eor.w	r3, r3, #1
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <process_user_input+0x510>
 800a232:	4817      	ldr	r0, [pc, #92]	; (800a290 <process_user_input+0x568>)
 800a234:	f000 ffb1 	bl	800b19a <preference_writer_open>
	 preference_writer_flush(&prefs);
 800a238:	4815      	ldr	r0, [pc, #84]	; (800a290 <process_user_input+0x568>)
 800a23a:	f000 ffcb 	bl	800b1d4 <preference_writer_flush>
	 preference_writer_close(&prefs);
 800a23e:	4814      	ldr	r0, [pc, #80]	; (800a290 <process_user_input+0x568>)
 800a240:	f001 f846 	bl	800b2d0 <preference_writer_close>
	 preference_writer_load(prefs);
 800a244:	4b12      	ldr	r3, [pc, #72]	; (800a290 <process_user_input+0x568>)
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	9200      	str	r2, [sp, #0]
 800a24a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a24c:	f000 fffe 	bl	800b24c <preference_writer_load>

	 enter_setup_state();
 800a250:	f7ff fbf4 	bl	8009a3c <enter_setup_state>

	 fsmstate->bytecount = 0;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3304      	adds	r3, #4
 800a264:	2208      	movs	r2, #8
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f7f6 fc97 	bl	8000b9c <memset>
 }
 800a26e:	bf00      	nop
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000658 	.word	0x20000658
 800a27c:	08011544 	.word	0x08011544
 800a280:	00000000 	.word	0x00000000
 800a284:	08011558 	.word	0x08011558
 800a288:	0801156c 	.word	0x0801156c
 800a28c:	08011580 	.word	0x08011580
 800a290:	20000644 	.word	0x20000644

0800a294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a29a:	f107 0314 	add.w	r3, r7, #20
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	605a      	str	r2, [r3, #4]
 800a2a4:	609a      	str	r2, [r3, #8]
 800a2a6:	60da      	str	r2, [r3, #12]
 800a2a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	613b      	str	r3, [r7, #16]
 800a2ae:	4b37      	ldr	r3, [pc, #220]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b2:	4a36      	ldr	r2, [pc, #216]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2b4:	f043 0304 	orr.w	r3, r3, #4
 800a2b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ba:	4b34      	ldr	r3, [pc, #208]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2be:	f003 0304 	and.w	r3, r3, #4
 800a2c2:	613b      	str	r3, [r7, #16]
 800a2c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	4b30      	ldr	r3, [pc, #192]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ce:	4a2f      	ldr	r2, [pc, #188]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2d6:	4b2d      	ldr	r3, [pc, #180]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	4b29      	ldr	r3, [pc, #164]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ea:	4a28      	ldr	r2, [pc, #160]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2ec:	f043 0301 	orr.w	r3, r3, #1
 800a2f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a2f2:	4b26      	ldr	r3, [pc, #152]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	60bb      	str	r3, [r7, #8]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2fe:	2300      	movs	r3, #0
 800a300:	607b      	str	r3, [r7, #4]
 800a302:	4b22      	ldr	r3, [pc, #136]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	4a21      	ldr	r2, [pc, #132]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a308:	f043 0302 	orr.w	r3, r3, #2
 800a30c:	6313      	str	r3, [r2, #48]	; 0x30
 800a30e:	4b1f      	ldr	r3, [pc, #124]	; (800a38c <MX_GPIO_Init+0xf8>)
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	607b      	str	r3, [r7, #4]
 800a318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800a31a:	2200      	movs	r2, #0
 800a31c:	f648 0110 	movw	r1, #34832	; 0x8810
 800a320:	481b      	ldr	r0, [pc, #108]	; (800a390 <MX_GPIO_Init+0xfc>)
 800a322:	f003 fdc1 	bl	800dea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800a326:	2200      	movs	r2, #0
 800a328:	2120      	movs	r1, #32
 800a32a:	481a      	ldr	r0, [pc, #104]	; (800a394 <MX_GPIO_Init+0x100>)
 800a32c:	f003 fdbc 	bl	800dea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a336:	4b18      	ldr	r3, [pc, #96]	; (800a398 <MX_GPIO_Init+0x104>)
 800a338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a33e:	f107 0314 	add.w	r3, r7, #20
 800a342:	4619      	mov	r1, r3
 800a344:	4813      	ldr	r0, [pc, #76]	; (800a394 <MX_GPIO_Init+0x100>)
 800a346:	f003 fc1b 	bl	800db80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800a34a:	f648 0310 	movw	r3, #34832	; 0x8810
 800a34e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a350:	2301      	movs	r3, #1
 800a352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a354:	2300      	movs	r3, #0
 800a356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a358:	2303      	movs	r3, #3
 800a35a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	4619      	mov	r1, r3
 800a362:	480b      	ldr	r0, [pc, #44]	; (800a390 <MX_GPIO_Init+0xfc>)
 800a364:	f003 fc0c 	bl	800db80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a368:	2320      	movs	r3, #32
 800a36a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a36c:	2301      	movs	r3, #1
 800a36e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a370:	2300      	movs	r3, #0
 800a372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a374:	2303      	movs	r3, #3
 800a376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a378:	f107 0314 	add.w	r3, r7, #20
 800a37c:	4619      	mov	r1, r3
 800a37e:	4805      	ldr	r0, [pc, #20]	; (800a394 <MX_GPIO_Init+0x100>)
 800a380:	f003 fbfe 	bl	800db80 <HAL_GPIO_Init>

}
 800a384:	bf00      	nop
 800a386:	3728      	adds	r7, #40	; 0x28
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	40023800 	.word	0x40023800
 800a390:	40020000 	.word	0x40020000
 800a394:	40020800 	.word	0x40020800
 800a398:	10210000 	.word	0x10210000

0800a39c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08a      	sub	sp, #40	; 0x28
 800a3a0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a3a2:	f001 ff4b 	bl	800c23c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a3a6:	f000 fadd 	bl	800a964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a3aa:	f7ff ff73 	bl	800a294 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800a3ae:	f001 fe7d 	bl	800c0ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800a3b2:	f001 fd61 	bl	800be78 <MX_TIM1_Init>
  MX_CAN1_Init();
 800a3b6:	f7fd fc27 	bl	8007c08 <MX_CAN1_Init>
  MX_SPI1_Init();
 800a3ba:	f000 ff99 	bl	800b2f0 <MX_SPI1_Init>
  MX_SPI3_Init();
 800a3be:	f000 ffcf 	bl	800b360 <MX_SPI3_Init>
  MX_ADC1_Init();
 800a3c2:	f7fc feb1 	bl	8007128 <MX_ADC1_Init>
  MX_ADC2_Init();
 800a3c6:	f7fc ff19 	bl	80071fc <MX_ADC2_Init>
  MX_ADC3_Init();
 800a3ca:	f7fc ff61 	bl	8007290 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 800a3ce:	2106      	movs	r1, #6
 800a3d0:	48b9      	ldr	r0, [pc, #740]	; (800a6b8 <main+0x31c>)
 800a3d2:	f000 fed1 	bl	800b178 <preference_writer_init>
  preference_writer_load(prefs);
 800a3d6:	4bb8      	ldr	r3, [pc, #736]	; (800a6b8 <main+0x31c>)
 800a3d8:	691a      	ldr	r2, [r3, #16]
 800a3da:	9200      	str	r2, [sp, #0]
 800a3dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a3de:	f000 ff35 	bl	800b24c <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 800a3e2:	4bb6      	ldr	r3, [pc, #728]	; (800a6bc <main+0x320>)
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ea:	d102      	bne.n	800a3f2 <main+0x56>
 800a3ec:	4bb3      	ldr	r3, [pc, #716]	; (800a6bc <main+0x320>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 800a3f2:	4bb2      	ldr	r3, [pc, #712]	; (800a6bc <main+0x320>)
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3fa:	d102      	bne.n	800a402 <main+0x66>
 800a3fc:	4baf      	ldr	r3, [pc, #700]	; (800a6bc <main+0x320>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800a402:	4baf      	ldr	r3, [pc, #700]	; (800a6c0 <main+0x324>)
 800a404:	edd3 7a02 	vldr	s15, [r3, #8]
 800a408:	eef4 7a67 	vcmp.f32	s15, s15
 800a40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a410:	d609      	bvs.n	800a426 <main+0x8a>
 800a412:	4bab      	ldr	r3, [pc, #684]	; (800a6c0 <main+0x324>)
 800a414:	edd3 7a02 	vldr	s15, [r3, #8]
 800a418:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a41c:	eef4 7a47 	vcmp.f32	s15, s14
 800a420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a424:	d102      	bne.n	800a42c <main+0x90>
 800a426:	4ba6      	ldr	r3, [pc, #664]	; (800a6c0 <main+0x324>)
 800a428:	4aa6      	ldr	r2, [pc, #664]	; (800a6c4 <main+0x328>)
 800a42a:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800a42c:	4ba4      	ldr	r3, [pc, #656]	; (800a6c0 <main+0x324>)
 800a42e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a432:	eef4 7a67 	vcmp.f32	s15, s15
 800a436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43a:	d609      	bvs.n	800a450 <main+0xb4>
 800a43c:	4ba0      	ldr	r3, [pc, #640]	; (800a6c0 <main+0x324>)
 800a43e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a442:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a446:	eef4 7a47 	vcmp.f32	s15, s14
 800a44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a44e:	d102      	bne.n	800a456 <main+0xba>
 800a450:	4b9b      	ldr	r3, [pc, #620]	; (800a6c0 <main+0x324>)
 800a452:	4a9d      	ldr	r2, [pc, #628]	; (800a6c8 <main+0x32c>)
 800a454:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 800a456:	4b9a      	ldr	r3, [pc, #616]	; (800a6c0 <main+0x324>)
 800a458:	edd3 7a06 	vldr	s15, [r3, #24]
 800a45c:	eef4 7a67 	vcmp.f32	s15, s15
 800a460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a464:	d609      	bvs.n	800a47a <main+0xde>
 800a466:	4b96      	ldr	r3, [pc, #600]	; (800a6c0 <main+0x324>)
 800a468:	edd3 7a06 	vldr	s15, [r3, #24]
 800a46c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a470:	eef4 7a47 	vcmp.f32	s15, s14
 800a474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a478:	d103      	bne.n	800a482 <main+0xe6>
 800a47a:	4b91      	ldr	r3, [pc, #580]	; (800a6c0 <main+0x324>)
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 800a482:	4b8e      	ldr	r3, [pc, #568]	; (800a6bc <main+0x320>)
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48a:	d102      	bne.n	800a492 <main+0xf6>
 800a48c:	4b8b      	ldr	r3, [pc, #556]	; (800a6bc <main+0x320>)
 800a48e:	2201      	movs	r2, #1
 800a490:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 800a492:	4b8a      	ldr	r3, [pc, #552]	; (800a6bc <main+0x320>)
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a49a:	d102      	bne.n	800a4a2 <main+0x106>
 800a49c:	4b87      	ldr	r3, [pc, #540]	; (800a6bc <main+0x320>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 800a4a2:	4b86      	ldr	r3, [pc, #536]	; (800a6bc <main+0x320>)
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4aa:	d103      	bne.n	800a4b4 <main+0x118>
 800a4ac:	4b83      	ldr	r3, [pc, #524]	; (800a6bc <main+0x320>)
 800a4ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4b2:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 800a4b4:	4b82      	ldr	r3, [pc, #520]	; (800a6c0 <main+0x324>)
 800a4b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800a4ba:	eef4 7a67 	vcmp.f32	s15, s15
 800a4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c2:	d609      	bvs.n	800a4d8 <main+0x13c>
 800a4c4:	4b7e      	ldr	r3, [pc, #504]	; (800a6c0 <main+0x324>)
 800a4c6:	edd3 7a07 	vldr	s15, [r3, #28]
 800a4ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a4ce:	eef4 7a47 	vcmp.f32	s15, s14
 800a4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d6:	d103      	bne.n	800a4e0 <main+0x144>
 800a4d8:	4b79      	ldr	r3, [pc, #484]	; (800a6c0 <main+0x324>)
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800a4e0:	4b77      	ldr	r3, [pc, #476]	; (800a6c0 <main+0x324>)
 800a4e2:	edd3 7a08 	vldr	s15, [r3, #32]
 800a4e6:	eef4 7a67 	vcmp.f32	s15, s15
 800a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ee:	d609      	bvs.n	800a504 <main+0x168>
 800a4f0:	4b73      	ldr	r3, [pc, #460]	; (800a6c0 <main+0x324>)
 800a4f2:	edd3 7a08 	vldr	s15, [r3, #32]
 800a4f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a4fa:	eef4 7a47 	vcmp.f32	s15, s14
 800a4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a502:	d102      	bne.n	800a50a <main+0x16e>
 800a504:	4b6e      	ldr	r3, [pc, #440]	; (800a6c0 <main+0x324>)
 800a506:	4a71      	ldr	r2, [pc, #452]	; (800a6cc <main+0x330>)
 800a508:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 800a50a:	4b6d      	ldr	r3, [pc, #436]	; (800a6c0 <main+0x324>)
 800a50c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a510:	eef4 7a67 	vcmp.f32	s15, s15
 800a514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a518:	d609      	bvs.n	800a52e <main+0x192>
 800a51a:	4b69      	ldr	r3, [pc, #420]	; (800a6c0 <main+0x324>)
 800a51c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a520:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a524:	eef4 7a47 	vcmp.f32	s15, s14
 800a528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a52c:	d102      	bne.n	800a534 <main+0x198>
 800a52e:	4b64      	ldr	r3, [pc, #400]	; (800a6c0 <main+0x324>)
 800a530:	4a67      	ldr	r2, [pc, #412]	; (800a6d0 <main+0x334>)
 800a532:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800a534:	4b62      	ldr	r3, [pc, #392]	; (800a6c0 <main+0x324>)
 800a536:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a53a:	eef4 7a67 	vcmp.f32	s15, s15
 800a53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a542:	d609      	bvs.n	800a558 <main+0x1bc>
 800a544:	4b5e      	ldr	r3, [pc, #376]	; (800a6c0 <main+0x324>)
 800a546:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a54a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a54e:	eef4 7a47 	vcmp.f32	s15, s14
 800a552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a556:	d102      	bne.n	800a55e <main+0x1c2>
 800a558:	4b59      	ldr	r3, [pc, #356]	; (800a6c0 <main+0x324>)
 800a55a:	4a5e      	ldr	r2, [pc, #376]	; (800a6d4 <main+0x338>)
 800a55c:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800a55e:	4b58      	ldr	r3, [pc, #352]	; (800a6c0 <main+0x324>)
 800a560:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a564:	eef4 7a67 	vcmp.f32	s15, s15
 800a568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56c:	d609      	bvs.n	800a582 <main+0x1e6>
 800a56e:	4b54      	ldr	r3, [pc, #336]	; (800a6c0 <main+0x324>)
 800a570:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a574:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a578:	eef4 7a47 	vcmp.f32	s15, s14
 800a57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a580:	d102      	bne.n	800a588 <main+0x1ec>
 800a582:	4b4f      	ldr	r3, [pc, #316]	; (800a6c0 <main+0x324>)
 800a584:	4a54      	ldr	r2, [pc, #336]	; (800a6d8 <main+0x33c>)
 800a586:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 6.0f;}
 800a588:	4b4d      	ldr	r3, [pc, #308]	; (800a6c0 <main+0x324>)
 800a58a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800a58e:	eef4 7a67 	vcmp.f32	s15, s15
 800a592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a596:	d609      	bvs.n	800a5ac <main+0x210>
 800a598:	4b49      	ldr	r3, [pc, #292]	; (800a6c0 <main+0x324>)
 800a59a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800a59e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a5a2:	eef4 7a47 	vcmp.f32	s15, s14
 800a5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5aa:	d102      	bne.n	800a5b2 <main+0x216>
 800a5ac:	4b44      	ldr	r3, [pc, #272]	; (800a6c0 <main+0x324>)
 800a5ae:	4a4b      	ldr	r2, [pc, #300]	; (800a6dc <main+0x340>)
 800a5b0:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800a5b2:	4b43      	ldr	r3, [pc, #268]	; (800a6c0 <main+0x324>)
 800a5b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a5b8:	eef4 7a67 	vcmp.f32	s15, s15
 800a5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c0:	d609      	bvs.n	800a5d6 <main+0x23a>
 800a5c2:	4b3f      	ldr	r3, [pc, #252]	; (800a6c0 <main+0x324>)
 800a5c4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a5c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a5cc:	eef4 7a47 	vcmp.f32	s15, s14
 800a5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d4:	d103      	bne.n	800a5de <main+0x242>
 800a5d6:	4b3a      	ldr	r3, [pc, #232]	; (800a6c0 <main+0x324>)
 800a5d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a5dc:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800a5de:	4b38      	ldr	r3, [pc, #224]	; (800a6c0 <main+0x324>)
 800a5e0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800a5e4:	eef4 7a67 	vcmp.f32	s15, s15
 800a5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ec:	d609      	bvs.n	800a602 <main+0x266>
 800a5ee:	4b34      	ldr	r3, [pc, #208]	; (800a6c0 <main+0x324>)
 800a5f0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800a5f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a5f8:	eef4 7a47 	vcmp.f32	s15, s14
 800a5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a600:	d102      	bne.n	800a608 <main+0x26c>
 800a602:	4b2f      	ldr	r3, [pc, #188]	; (800a6c0 <main+0x324>)
 800a604:	4a36      	ldr	r2, [pc, #216]	; (800a6e0 <main+0x344>)
 800a606:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 800a608:	4b2d      	ldr	r3, [pc, #180]	; (800a6c0 <main+0x324>)
 800a60a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800a60e:	eef4 7a67 	vcmp.f32	s15, s15
 800a612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a616:	d609      	bvs.n	800a62c <main+0x290>
 800a618:	4b29      	ldr	r3, [pc, #164]	; (800a6c0 <main+0x324>)
 800a61a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800a61e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a622:	eef4 7a47 	vcmp.f32	s15, s14
 800a626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62a:	d102      	bne.n	800a632 <main+0x296>
 800a62c:	4b24      	ldr	r3, [pc, #144]	; (800a6c0 <main+0x324>)
 800a62e:	4a29      	ldr	r2, [pc, #164]	; (800a6d4 <main+0x338>)
 800a630:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 800a632:	4b23      	ldr	r3, [pc, #140]	; (800a6c0 <main+0x324>)
 800a634:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a638:	eef4 7a67 	vcmp.f32	s15, s15
 800a63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a640:	d702      	bvc.n	800a648 <main+0x2ac>
 800a642:	4b1f      	ldr	r3, [pc, #124]	; (800a6c0 <main+0x324>)
 800a644:	4a27      	ldr	r2, [pc, #156]	; (800a6e4 <main+0x348>)
 800a646:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 800a648:	4b1d      	ldr	r3, [pc, #116]	; (800a6c0 <main+0x324>)
 800a64a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a64e:	eef4 7a67 	vcmp.f32	s15, s15
 800a652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a656:	d702      	bvc.n	800a65e <main+0x2c2>
 800a658:	4b19      	ldr	r3, [pc, #100]	; (800a6c0 <main+0x324>)
 800a65a:	4a23      	ldr	r2, [pc, #140]	; (800a6e8 <main+0x34c>)
 800a65c:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 800a65e:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <main+0x324>)
 800a660:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a664:	eef4 7a67 	vcmp.f32	s15, s15
 800a668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66c:	d702      	bvc.n	800a674 <main+0x2d8>
 800a66e:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <main+0x324>)
 800a670:	4a1e      	ldr	r2, [pc, #120]	; (800a6ec <main+0x350>)
 800a672:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 800a674:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <main+0x324>)
 800a676:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a67a:	eef4 7a67 	vcmp.f32	s15, s15
 800a67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a682:	d702      	bvc.n	800a68a <main+0x2ee>
 800a684:	4b0e      	ldr	r3, [pc, #56]	; (800a6c0 <main+0x324>)
 800a686:	4a1a      	ldr	r2, [pc, #104]	; (800a6f0 <main+0x354>)
 800a688:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 800a68a:	f04f 0200 	mov.w	r2, #0
 800a68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a692:	4818      	ldr	r0, [pc, #96]	; (800a6f4 <main+0x358>)
 800a694:	f7f7 f828 	bl	80016e8 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 800a698:	4817      	ldr	r0, [pc, #92]	; (800a6f8 <main+0x35c>)
 800a69a:	f7fe faeb 	bl	8008c74 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800a69e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4815      	ldr	r0, [pc, #84]	; (800a6fc <main+0x360>)
 800a6a6:	f7f6 fa79 	bl	8000b9c <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 800a6aa:	4b04      	ldr	r3, [pc, #16]	; (800a6bc <main+0x320>)
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	4a14      	ldr	r2, [pc, #80]	; (800a700 <main+0x364>)
 800a6b0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800a6b4:	e026      	b.n	800a704 <main+0x368>
 800a6b6:	bf00      	nop
 800a6b8:	20000644 	.word	0x20000644
 800a6bc:	20008f5c 	.word	0x20008f5c
 800a6c0:	20000658 	.word	0x20000658
 800a6c4:	447a0000 	.word	0x447a0000
 800a6c8:	42200000 	.word	0x42200000
 800a6cc:	42fa0000 	.word	0x42fa0000
 800a6d0:	41600000 	.word	0x41600000
 800a6d4:	40a00000 	.word	0x40a00000
 800a6d8:	41a80000 	.word	0x41a80000
 800a6dc:	40c00000 	.word	0x40c00000
 800a6e0:	43fa0000 	.word	0x43fa0000
 800a6e4:	41480000 	.word	0x41480000
 800a6e8:	c1480000 	.word	0xc1480000
 800a6ec:	42820000 	.word	0x42820000
 800a6f0:	c2820000 	.word	0xc2820000
 800a6f4:	080115a8 	.word	0x080115a8
 800a6f8:	20000758 	.word	0x20000758
 800a6fc:	20008c7c 	.word	0x20008c7c
 800a700:	20000350 	.word	0x20000350
  comm_encoder.e_zero = E_ZERO;
 800a704:	4b85      	ldr	r3, [pc, #532]	; (800a91c <main+0x580>)
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	4a85      	ldr	r2, [pc, #532]	; (800a920 <main+0x584>)
 800a70a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  comm_encoder.ppairs = PPAIRS;
 800a70e:	4b85      	ldr	r3, [pc, #532]	; (800a924 <main+0x588>)
 800a710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a712:	4a83      	ldr	r2, [pc, #524]	; (800a920 <main+0x584>)
 800a714:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 800a716:	2164      	movs	r1, #100	; 0x64
 800a718:	4881      	ldr	r0, [pc, #516]	; (800a920 <main+0x584>)
 800a71a:	f000 fb3d 	bl	800ad98 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 800a71e:	4b80      	ldr	r3, [pc, #512]	; (800a920 <main+0x584>)
 800a720:	4a7e      	ldr	r2, [pc, #504]	; (800a91c <main+0x580>)
 800a722:	33dc      	adds	r3, #220	; 0xdc
 800a724:	f102 0118 	add.w	r1, r2, #24
 800a728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f6 f99b 	bl	8000a68 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 800a732:	487d      	ldr	r0, [pc, #500]	; (800a928 <main+0x58c>)
 800a734:	f001 fe5c 	bl	800c3f0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800a738:	487c      	ldr	r0, [pc, #496]	; (800a92c <main+0x590>)
 800a73a:	f001 fe59 	bl	800c3f0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800a73e:	487c      	ldr	r0, [pc, #496]	; (800a930 <main+0x594>)
 800a740:	f001 fe56 	bl	800c3f0 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 800a744:	2201      	movs	r2, #1
 800a746:	2110      	movs	r1, #16
 800a748:	487a      	ldr	r0, [pc, #488]	; (800a934 <main+0x598>)
 800a74a:	f003 fbad 	bl	800dea8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 800a74e:	2201      	movs	r2, #1
 800a750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a754:	4877      	ldr	r0, [pc, #476]	; (800a934 <main+0x598>)
 800a756:	f003 fba7 	bl	800dea8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800a75a:	2001      	movs	r0, #1
 800a75c:	f001 fde0 	bl	800c320 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 800a760:	2001      	movs	r0, #1
 800a762:	f001 fddd 	bl	800c320 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 800a766:	4b74      	ldr	r3, [pc, #464]	; (800a938 <main+0x59c>)
 800a768:	2201      	movs	r2, #1
 800a76a:	9206      	str	r2, [sp, #24]
 800a76c:	2200      	movs	r2, #0
 800a76e:	9205      	str	r2, [sp, #20]
 800a770:	2200      	movs	r2, #0
 800a772:	9204      	str	r2, [sp, #16]
 800a774:	2200      	movs	r2, #0
 800a776:	9203      	str	r2, [sp, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	9202      	str	r2, [sp, #8]
 800a77c:	2201      	movs	r2, #1
 800a77e:	9201      	str	r2, [sp, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	9200      	str	r2, [sp, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	2000      	movs	r0, #0
 800a788:	4610      	mov	r0, r2
 800a78a:	889b      	ldrh	r3, [r3, #4]
 800a78c:	2100      	movs	r1, #0
 800a78e:	f363 010f 	bfi	r1, r3, #0, #16
 800a792:	2300      	movs	r3, #0
 800a794:	2200      	movs	r2, #0
 800a796:	f7fd fcb8 	bl	800810a <drv_write_DCR>
  HAL_Delay(1);
 800a79a:	2001      	movs	r0, #1
 800a79c:	f001 fdc0 	bl	800c320 <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 800a7a0:	4b60      	ldr	r3, [pc, #384]	; (800a924 <main+0x588>)
 800a7a2:	edd3 7a03 	vldr	s15, [r3, #12]
 800a7a6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a93c <main+0x5a0>
 800a7aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b2:	d802      	bhi.n	800a7ba <main+0x41e>
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	607b      	str	r3, [r7, #4]
 800a7b8:	e001      	b.n	800a7be <main+0x422>
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 800a7be:	4b5e      	ldr	r3, [pc, #376]	; (800a938 <main+0x59c>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	9206      	str	r2, [sp, #24]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	9205      	str	r2, [sp, #20]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	9204      	str	r2, [sp, #16]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	9203      	str	r2, [sp, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	9202      	str	r2, [sp, #8]
 800a7d4:	2203      	movs	r2, #3
 800a7d6:	9201      	str	r2, [sp, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	9200      	str	r2, [sp, #0]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	2000      	movs	r0, #0
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	889b      	ldrh	r3, [r3, #4]
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	f363 010f 	bfi	r1, r3, #0, #16
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f7fd fcfc 	bl	80081ea <drv_write_CSACR>
  HAL_Delay(1);
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	f001 fd94 	bl	800c320 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 800a7f8:	4b4f      	ldr	r3, [pc, #316]	; (800a938 <main+0x59c>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	9206      	str	r2, [sp, #24]
 800a7fe:	2200      	movs	r2, #0
 800a800:	9205      	str	r2, [sp, #20]
 800a802:	2200      	movs	r2, #0
 800a804:	9204      	str	r2, [sp, #16]
 800a806:	2200      	movs	r2, #0
 800a808:	9203      	str	r2, [sp, #12]
 800a80a:	2201      	movs	r2, #1
 800a80c:	9202      	str	r2, [sp, #8]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	9201      	str	r2, [sp, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	9200      	str	r2, [sp, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	2000      	movs	r0, #0
 800a81a:	4610      	mov	r0, r2
 800a81c:	889b      	ldrh	r3, [r3, #4]
 800a81e:	2100      	movs	r1, #0
 800a820:	f363 010f 	bfi	r1, r3, #0, #16
 800a824:	2301      	movs	r3, #1
 800a826:	2200      	movs	r2, #0
 800a828:	f7fd fcdf 	bl	80081ea <drv_write_CSACR>
  HAL_Delay(1);
 800a82c:	2001      	movs	r0, #1
 800a82e:	f001 fd77 	bl	800c320 <HAL_Delay>
  zero_current(&controller);
 800a832:	4843      	ldr	r0, [pc, #268]	; (800a940 <main+0x5a4>)
 800a834:	f7fe f9da 	bl	8008bec <zero_current>
  HAL_Delay(1);
 800a838:	2001      	movs	r0, #1
 800a83a:	f001 fd71 	bl	800c320 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_4US, VDS_LVL_0_45);
 800a83e:	4b3e      	ldr	r3, [pc, #248]	; (800a938 <main+0x59c>)
 800a840:	2205      	movs	r2, #5
 800a842:	9202      	str	r2, [sp, #8]
 800a844:	2201      	movs	r2, #1
 800a846:	9201      	str	r2, [sp, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	9200      	str	r2, [sp, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	2000      	movs	r0, #0
 800a850:	4610      	mov	r0, r2
 800a852:	889b      	ldrh	r3, [r3, #4]
 800a854:	2100      	movs	r1, #0
 800a856:	f363 010f 	bfi	r1, r3, #0, #16
 800a85a:	2300      	movs	r3, #0
 800a85c:	2201      	movs	r2, #1
 800a85e:	f7fd fc96 	bl	800818e <drv_write_OCPCR>
  HAL_Delay(1);
 800a862:	2001      	movs	r0, #1
 800a864:	f001 fd5c 	bl	800c320 <HAL_Delay>
  drv_disable_gd(drv);
 800a868:	4b33      	ldr	r3, [pc, #204]	; (800a938 <main+0x59c>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	2100      	movs	r1, #0
 800a86e:	4611      	mov	r1, r2
 800a870:	889a      	ldrh	r2, [r3, #4]
 800a872:	2300      	movs	r3, #0
 800a874:	f362 030f 	bfi	r3, r2, #0, #16
 800a878:	4608      	mov	r0, r1
 800a87a:	4619      	mov	r1, r3
 800a87c:	f7fd fd11 	bl	80082a2 <drv_disable_gd>
  HAL_Delay(1);
 800a880:	2001      	movs	r0, #1
 800a882:	f001 fd4d 	bl	800c320 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 800a886:	4b2e      	ldr	r3, [pc, #184]	; (800a940 <main+0x5a4>)
 800a888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a88c:	4a2c      	ldr	r2, [pc, #176]	; (800a940 <main+0x5a4>)
 800a88e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800a892:	4619      	mov	r1, r3
 800a894:	482b      	ldr	r0, [pc, #172]	; (800a944 <main+0x5a8>)
 800a896:	f7f6 ff27 	bl	80016e8 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800a89a:	2100      	movs	r1, #0
 800a89c:	482a      	ldr	r0, [pc, #168]	; (800a948 <main+0x5ac>)
 800a89e:	f004 fce7 	bl	800f270 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800a8a2:	2104      	movs	r1, #4
 800a8a4:	4828      	ldr	r0, [pc, #160]	; (800a948 <main+0x5ac>)
 800a8a6:	f004 fce3 	bl	800f270 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800a8aa:	2108      	movs	r1, #8
 800a8ac:	4826      	ldr	r0, [pc, #152]	; (800a948 <main+0x5ac>)
 800a8ae:	f004 fcdf 	bl	800f270 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 800a8b2:	4826      	ldr	r0, [pc, #152]	; (800a94c <main+0x5b0>)
 800a8b4:	f7fd fa2e 	bl	8007d14 <can_rx_init>
  can_tx_init(&can_tx);
 800a8b8:	4825      	ldr	r0, [pc, #148]	; (800a950 <main+0x5b4>)
 800a8ba:	f7fd fa59 	bl	8007d70 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 800a8be:	4825      	ldr	r0, [pc, #148]	; (800a954 <main+0x5b8>)
 800a8c0:	f002 fb50 	bl	800cf64 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	2019      	movs	r0, #25
 800a8ca:	f003 f890 	bl	800d9ee <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	2014      	movs	r0, #20
 800a8d4:	f003 f88b 	bl	800d9ee <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 800a8d8:	4b1f      	ldr	r3, [pc, #124]	; (800a958 <main+0x5bc>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 800a8de:	4b1e      	ldr	r3, [pc, #120]	; (800a958 <main+0x5bc>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 800a8e4:	4b1c      	ldr	r3, [pc, #112]	; (800a958 <main+0x5bc>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	491b      	ldr	r1, [pc, #108]	; (800a95c <main+0x5c0>)
 800a8ee:	481c      	ldr	r0, [pc, #112]	; (800a960 <main+0x5c4>)
 800a8f0:	f005 fd13 	bl	801031a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800a8f4:	4814      	ldr	r0, [pc, #80]	; (800a948 <main+0x5ac>)
 800a8f6:	f004 fbf1 	bl	800f0dc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 800a8fa:	2064      	movs	r0, #100	; 0x64
 800a8fc:	f001 fd10 	bl	800c320 <HAL_Delay>
	  drv_print_faults(drv);
 800a900:	4b0d      	ldr	r3, [pc, #52]	; (800a938 <main+0x59c>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	2100      	movs	r1, #0
 800a906:	4611      	mov	r1, r2
 800a908:	889a      	ldrh	r2, [r3, #4]
 800a90a:	2300      	movs	r3, #0
 800a90c:	f362 030f 	bfi	r3, r2, #0, #16
 800a910:	4608      	mov	r0, r1
 800a912:	4619      	mov	r1, r3
 800a914:	f7fd fce0 	bl	80082d8 <drv_print_faults>
	  HAL_Delay(100);
 800a918:	e7ef      	b.n	800a8fa <main+0x55e>
 800a91a:	bf00      	nop
 800a91c:	20008f5c 	.word	0x20008f5c
 800a920:	20000350 	.word	0x20000350
 800a924:	20000658 	.word	0x20000658
 800a928:	20000298 	.word	0x20000298
 800a92c:	20000250 	.word	0x20000250
 800a930:	200002e0 	.word	0x200002e0
 800a934:	40020000 	.word	0x40020000
 800a938:	2000937c 	.word	0x2000937c
 800a93c:	42200000 	.word	0x42200000
 800a940:	20000758 	.word	0x20000758
 800a944:	080115cc 	.word	0x080115cc
 800a948:	200094b0 	.word	0x200094b0
 800a94c:	20009384 	.word	0x20009384
 800a950:	2000935c 	.word	0x2000935c
 800a954:	20000328 	.word	0x20000328
 800a958:	20000634 	.word	0x20000634
 800a95c:	20000630 	.word	0x20000630
 800a960:	200094f8 	.word	0x200094f8

0800a964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b094      	sub	sp, #80	; 0x50
 800a968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a96a:	f107 031c 	add.w	r3, r7, #28
 800a96e:	2234      	movs	r2, #52	; 0x34
 800a970:	2100      	movs	r1, #0
 800a972:	4618      	mov	r0, r3
 800a974:	f7f6 f912 	bl	8000b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a978:	f107 0308 	add.w	r3, r7, #8
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	60da      	str	r2, [r3, #12]
 800a986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a988:	2300      	movs	r3, #0
 800a98a:	607b      	str	r3, [r7, #4]
 800a98c:	4b2c      	ldr	r3, [pc, #176]	; (800aa40 <SystemClock_Config+0xdc>)
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	4a2b      	ldr	r2, [pc, #172]	; (800aa40 <SystemClock_Config+0xdc>)
 800a992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a996:	6413      	str	r3, [r2, #64]	; 0x40
 800a998:	4b29      	ldr	r3, [pc, #164]	; (800aa40 <SystemClock_Config+0xdc>)
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a0:	607b      	str	r3, [r7, #4]
 800a9a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	4b26      	ldr	r3, [pc, #152]	; (800aa44 <SystemClock_Config+0xe0>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a25      	ldr	r2, [pc, #148]	; (800aa44 <SystemClock_Config+0xe0>)
 800a9ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	4b23      	ldr	r3, [pc, #140]	; (800aa44 <SystemClock_Config+0xe0>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a9bc:	603b      	str	r3, [r7, #0]
 800a9be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a9c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a9c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a9ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a9d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800a9d8:	23b4      	movs	r3, #180	; 0xb4
 800a9da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a9e8:	f107 031c 	add.w	r3, r7, #28
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f003 fd91 	bl	800e514 <HAL_RCC_OscConfig>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 800a9f8:	f000 f826 	bl	800aa48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a9fc:	f003 fa6e 	bl	800dedc <HAL_PWREx_EnableOverDrive>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800aa06:	f000 f81f 	bl	800aa48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aa0a:	230f      	movs	r3, #15
 800aa0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aa0e:	2302      	movs	r3, #2
 800aa10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aa12:	2300      	movs	r3, #0
 800aa14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800aa16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800aa1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800aa1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800aa22:	f107 0308 	add.w	r3, r7, #8
 800aa26:	2105      	movs	r1, #5
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f003 faa7 	bl	800df7c <HAL_RCC_ClockConfig>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800aa34:	f000 f808 	bl	800aa48 <Error_Handler>
  }
}
 800aa38:	bf00      	nop
 800aa3a:	3750      	adds	r7, #80	; 0x50
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	40023800 	.word	0x40023800
 800aa44:	40007000 	.word	0x40007000

0800aa48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800aa4c:	bf00      	nop
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	ed87 0a01 	vstr	s0, [r7, #4]
 800aa60:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 800aa64:	ed97 7a01 	vldr	s14, [r7, #4]
 800aa68:	edd7 7a00 	vldr	s15, [r7]
 800aa6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aa70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa74:	dd01      	ble.n	800aa7a <fast_fmaxf+0x24>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	e000      	b.n	800aa7c <fast_fmaxf+0x26>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	ee07 3a90 	vmov	s15, r3
    }
 800aa80:	eeb0 0a67 	vmov.f32	s0, s15
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <fast_fminf>:

float fast_fminf(float x, float y){
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	ed87 0a01 	vstr	s0, [r7, #4]
 800aa98:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 800aa9c:	ed97 7a01 	vldr	s14, [r7, #4]
 800aaa0:	edd7 7a00 	vldr	s15, [r7]
 800aaa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aaa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaac:	d501      	bpl.n	800aab2 <fast_fminf+0x24>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	e000      	b.n	800aab4 <fast_fminf+0x26>
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	ee07 3a90 	vmov	s15, r3
    }
 800aab8:	eeb0 0a67 	vmov.f32	s0, s15
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 800aac6:	b480      	push	{r7}
 800aac8:	b085      	sub	sp, #20
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	ed87 0a03 	vstr	s0, [r7, #12]
 800aad0:	edc7 0a02 	vstr	s1, [r7, #8]
 800aad4:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 800aad8:	ed97 7a03 	vldr	s14, [r7, #12]
 800aadc:	edd7 7a02 	vldr	s15, [r7, #8]
 800aae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae8:	dd0c      	ble.n	800ab04 <fmaxf3+0x3e>
 800aaea:	ed97 7a03 	vldr	s14, [r7, #12]
 800aaee:	edd7 7a01 	vldr	s15, [r7, #4]
 800aaf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafa:	dd01      	ble.n	800ab00 <fmaxf3+0x3a>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	e00d      	b.n	800ab1c <fmaxf3+0x56>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	e00b      	b.n	800ab1c <fmaxf3+0x56>
 800ab04:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab08:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab14:	dd01      	ble.n	800ab1a <fmaxf3+0x54>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	e000      	b.n	800ab1c <fmaxf3+0x56>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	ee07 3a90 	vmov	s15, r3
    }
 800ab20:	eeb0 0a67 	vmov.f32	s0, s15
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <fminf3>:

float fminf3(float x, float y, float z){
 800ab2e:	b480      	push	{r7}
 800ab30:	b085      	sub	sp, #20
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	ed87 0a03 	vstr	s0, [r7, #12]
 800ab38:	edc7 0a02 	vstr	s1, [r7, #8]
 800ab3c:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 800ab40:	ed97 7a03 	vldr	s14, [r7, #12]
 800ab44:	edd7 7a02 	vldr	s15, [r7, #8]
 800ab48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab50:	d50c      	bpl.n	800ab6c <fminf3+0x3e>
 800ab52:	ed97 7a03 	vldr	s14, [r7, #12]
 800ab56:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab62:	d501      	bpl.n	800ab68 <fminf3+0x3a>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	e00d      	b.n	800ab84 <fminf3+0x56>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	e00b      	b.n	800ab84 <fminf3+0x56>
 800ab6c:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab70:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7c:	d501      	bpl.n	800ab82 <fminf3+0x54>
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	e000      	b.n	800ab84 <fminf3+0x56>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	ee07 3a90 	vmov	s15, r3
    }
 800ab88:	eeb0 0a67 	vmov.f32	s0, s15
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	ed93 7a00 	vldr	s14, [r3]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	edd3 7a00 	vldr	s15, [r3]
 800abb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	edd3 6a00 	vldr	s13, [r3]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	edd3 7a00 	vldr	s15, [r3]
 800abc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abc8:	eeb0 0a67 	vmov.f32	s0, s15
 800abcc:	f7f5 fc86 	bl	80004dc <sqrtf>
 800abd0:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 800abd4:	ed97 7a05 	vldr	s14, [r7, #20]
 800abd8:	edd7 7a01 	vldr	s15, [r7, #4]
 800abdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe4:	dc00      	bgt.n	800abe8 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 800abe6:	e01b      	b.n	800ac20 <limit_norm+0x8a>
        *x = *x * limit/norm;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	ed93 7a00 	vldr	s14, [r3]
 800abee:	edd7 7a01 	vldr	s15, [r7, #4]
 800abf2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800abf6:	ed97 7a05 	vldr	s14, [r7, #20]
 800abfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	ed93 7a00 	vldr	s14, [r3]
 800ac0a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ac12:	ed97 7a05 	vldr	s14, [r7, #20]
 800ac16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	edc3 7a00 	vstr	s15, [r3]
    }
 800ac20:	bf00      	nop
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	ed87 0a03 	vstr	s0, [r7, #12]
 800ac32:	edc7 0a02 	vstr	s1, [r7, #8]
 800ac36:	ed87 1a01 	vstr	s2, [r7, #4]
 800ac3a:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 800ac3c:	ed97 7a01 	vldr	s14, [r7, #4]
 800ac40:	edd7 7a02 	vldr	s15, [r7, #8]
 800ac44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac48:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 800ac50:	ed97 7a03 	vldr	s14, [r7, #12]
 800ac54:	edd7 7a04 	vldr	s15, [r7, #16]
 800ac58:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	fa02 f303 	lsl.w	r3, r2, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ac72:	ed97 7a05 	vldr	s14, [r7, #20]
 800ac76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac7e:	ee17 3a90 	vmov	r3, s15
    }
 800ac82:	4618      	mov	r0, r3
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 800ac8e:	b480      	push	{r7}
 800ac90:	b087      	sub	sp, #28
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	ed87 0a02 	vstr	s0, [r7, #8]
 800ac9a:	edc7 0a01 	vstr	s1, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 800aca0:	ed97 7a01 	vldr	s14, [r7, #4]
 800aca4:	edd7 7a02 	vldr	s15, [r7, #8]
 800aca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acac:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acbe:	edd7 7a05 	vldr	s15, [r7, #20]
 800acc2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800acc6:	2201      	movs	r2, #1
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	fa02 f303 	lsl.w	r3, r2, r3
 800acce:	3b01      	subs	r3, #1
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acdc:	edd7 7a04 	vldr	s15, [r7, #16]
 800ace0:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 800ace4:	eeb0 0a67 	vmov.f32	s0, s15
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <sin_lut>:


float sin_lut(float theta){
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 800acfe:	eddf 0a17 	vldr	s1, [pc, #92]	; 800ad5c <sin_lut+0x68>
 800ad02:	ed97 0a01 	vldr	s0, [r7, #4]
 800ad06:	f7f5 fbb9 	bl	800047c <fmodf>
 800ad0a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 800ad0e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad1a:	d506      	bpl.n	800ad2a <sin_lut+0x36>
 800ad1c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad20:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ad5c <sin_lut+0x68>
 800ad24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad28:	e001      	b.n	800ad2e <sin_lut+0x3a>
 800ad2a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad2e:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 800ad32:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad36:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800ad60 <sin_lut+0x6c>
 800ad3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad42:	ee17 3a90 	vmov	r3, s15
 800ad46:	4a07      	ldr	r2, [pc, #28]	; (800ad64 <sin_lut+0x70>)
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	ee07 3a90 	vmov	s15, r3
}
 800ad52:	eeb0 0a67 	vmov.f32	s0, s15
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	40c90fdb 	.word	0x40c90fdb
 800ad60:	42a2f983 	.word	0x42a2f983
 800ad64:	08011a88 	.word	0x08011a88

0800ad68 <cos_lut>:

float cos_lut(float theta){
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 800ad72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ad94 <cos_lut+0x2c>
 800ad76:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad82:	f7ff ffb7 	bl	800acf4 <sin_lut>
 800ad86:	eef0 7a40 	vmov.f32	s15, s0
}
 800ad8a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	3fc90fdb 	.word	0x3fc90fdb

0800ad98 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af02      	add	r7, sp, #8
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 800ada2:	2300      	movs	r3, #0
 800ada4:	60fb      	str	r3, [r7, #12]
 800ada6:	e021      	b.n	800adec <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800adae:	2200      	movs	r2, #0
 800adb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800adb4:	4812      	ldr	r0, [pc, #72]	; (800ae00 <ps_warmup+0x68>)
 800adb6:	f003 f877 	bl	800dea8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	1c9a      	adds	r2, r3, #2
 800adc0:	2364      	movs	r3, #100	; 0x64
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	2301      	movs	r3, #1
 800adc6:	480f      	ldr	r0, [pc, #60]	; (800ae04 <ps_warmup+0x6c>)
 800adc8:	f003 fecb 	bl	800eb62 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800adcc:	bf00      	nop
 800adce:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <ps_warmup+0x6c>)
 800add0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b02      	cmp	r3, #2
 800add8:	d0f9      	beq.n	800adce <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800adda:	2201      	movs	r2, #1
 800addc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ade0:	4807      	ldr	r0, [pc, #28]	; (800ae00 <ps_warmup+0x68>)
 800ade2:	f003 f861 	bl	800dea8 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3301      	adds	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	dbd9      	blt.n	800ada8 <ps_warmup+0x10>
	}
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	40020000 	.word	0x40020000
 800ae04:	20009400 	.word	0x20009400

0800ae08 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08c      	sub	sp, #48	; 0x30
 800ae0c:	af02      	add	r7, sp, #8
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 800ae1c:	2313      	movs	r3, #19
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ae20:	e011      	b.n	800ae46 <ps_sample+0x3e>
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	3b01      	subs	r3, #1
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	3302      	adds	r3, #2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	3304      	adds	r3, #4
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	6879      	ldr	r1, [r7, #4]
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	3302      	adds	r3, #2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	440b      	add	r3, r1
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	3b01      	subs	r3, #1
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dcea      	bgt.n	800ae22 <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800ae52:	2200      	movs	r2, #0
 800ae54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae58:	489d      	ldr	r0, [pc, #628]	; (800b0d0 <ps_sample+0x2c8>)
 800ae5a:	f003 f825 	bl	800dea8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	1c9a      	adds	r2, r3, #2
 800ae64:	2364      	movs	r3, #100	; 0x64
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	489a      	ldr	r0, [pc, #616]	; (800b0d4 <ps_sample+0x2cc>)
 800ae6c:	f003 fe79 	bl	800eb62 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800ae70:	bf00      	nop
 800ae72:	4b98      	ldr	r3, [pc, #608]	; (800b0d4 <ps_sample+0x2cc>)
 800ae74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d0f9      	beq.n	800ae72 <ps_sample+0x6a>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae84:	4892      	ldr	r0, [pc, #584]	; (800b0d0 <ps_sample+0x2c8>)
 800ae86:	f003 f80f 	bl	800dea8 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae98:	125b      	asrs	r3, r3, #9
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	3336      	adds	r3, #54	; 0x36
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeaa:	125b      	asrs	r3, r3, #9
 800aeac:	3301      	adds	r3, #1
 800aeae:	425a      	negs	r2, r3
 800aeb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aeb8:	bf58      	it	pl
 800aeba:	4253      	negpl	r3, r2
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	3336      	adds	r3, #54	; 0x36
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aed6:	fb02 f303 	mul.w	r3, r2, r3
 800aeda:	125b      	asrs	r3, r3, #9
 800aedc:	69fa      	ldr	r2, [r7, #28]
 800aede:	4413      	add	r3, r2
 800aee0:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	441a      	add	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800aef2:	4b79      	ldr	r3, [pc, #484]	; (800b0d8 <ps_sample+0x2d0>)
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	ee07 3a90 	vmov	s15, r3
 800aefc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af00:	eddf 6a76 	vldr	s13, [pc, #472]	; 800b0dc <ps_sample+0x2d4>
 800af04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	edd3 7a01 	vldr	s15, [r3, #4]
 800af14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af18:	ee17 3a90 	vmov	r3, s15
 800af1c:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	ed93 7a01 	vldr	s14, [r3, #4]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af32:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b0e0 <ps_sample+0x2d8>
 800af36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	edd3 7a01 	vldr	s15, [r3, #4]
 800af46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af4e:	d507      	bpl.n	800af60 <ps_sample+0x158>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	edd3 7a01 	vldr	s15, [r3, #4]
 800af56:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800b0e0 <ps_sample+0x2d8>
 800af5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af5e:	e002      	b.n	800af66 <ps_sample+0x15e>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	edd3 7a01 	vldr	s15, [r3, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800af76:	4b58      	ldr	r3, [pc, #352]	; (800b0d8 <ps_sample+0x2d0>)
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	ee07 3a90 	vmov	s15, r3
 800af80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af88:	eddf 6a54 	vldr	s13, [pc, #336]	; 800b0dc <ps_sample+0x2d4>
 800af8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800af9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afa0:	ee17 3a90 	vmov	r3, s15
 800afa4:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afba:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b0e0 <ps_sample+0x2d8>
 800afbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800afce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800afd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd6:	d507      	bpl.n	800afe8 <ps_sample+0x1e0>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800afde:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b0e0 <ps_sample+0x2d8>
 800afe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afe6:	e002      	b.n	800afee <ps_sample+0x1e6>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	ed93 7a01 	vldr	s14, [r3, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	edd3 7a02 	vldr	s15, [r3, #8]
 800b004:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b008:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 800b00c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b010:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b0e4 <ps_sample+0x2dc>
 800b014:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b01c:	dd03      	ble.n	800b026 <ps_sample+0x21e>
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b022:	623b      	str	r3, [r7, #32]
 800b024:	e00a      	b.n	800b03c <ps_sample+0x234>
	else if(angle_diff < -PI_F){rollover = 1;}
 800b026:	edd7 7a03 	vldr	s15, [r7, #12]
 800b02a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b0e8 <ps_sample+0x2e0>
 800b02e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b036:	d501      	bpl.n	800b03c <ps_sample+0x234>
 800b038:	2301      	movs	r3, #1
 800b03a:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	441a      	add	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800b052:	2b00      	cmp	r3, #0
 800b054:	d107      	bne.n	800b066 <ps_sample+0x25e>
		encoder->turns = 0;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	ed93 7a01 	vldr	s14, [r3, #4]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b07a:	eddf 6a19 	vldr	s13, [pc, #100]	; 800b0e0 <ps_sample+0x2d8>
 800b07e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b082:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	ed93 7a03 	vldr	s14, [r3, #12]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800b098:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b09c:	edd7 7a00 	vldr	s15, [r7]
 800b0a0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800b0a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800b0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 800b0c8:	bf00      	nop
 800b0ca:	3728      	adds	r7, #40	; 0x28
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	40020000 	.word	0x40020000
 800b0d4:	20009400 	.word	0x20009400
 800b0d8:	20008f5c 	.word	0x20008f5c
 800b0dc:	47800000 	.word	0x47800000
 800b0e0:	40c90fdb 	.word	0x40c90fdb
 800b0e4:	40490fdb 	.word	0x40490fdb
 800b0e8:	c0490fdb 	.word	0xc0490fdb

0800b0ec <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4818      	ldr	r0, [pc, #96]	; (800b160 <ps_print+0x74>)
 800b0fe:	f7f6 faf3 	bl	80016e8 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b106:	4619      	mov	r1, r3
 800b108:	4816      	ldr	r0, [pc, #88]	; (800b164 <ps_print+0x78>)
 800b10a:	f7f6 faed 	bl	80016e8 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	4618      	mov	r0, r3
 800b114:	f7fb fab6 	bl	8006684 <__aeabi_f2d>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4812      	ldr	r0, [pc, #72]	; (800b168 <ps_print+0x7c>)
 800b11e:	f7f6 fae3 	bl	80016e8 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	4618      	mov	r0, r3
 800b128:	f7fb faac 	bl	8006684 <__aeabi_f2d>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	480e      	ldr	r0, [pc, #56]	; (800b16c <ps_print+0x80>)
 800b132:	f7f6 fad9 	bl	80016e8 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fb faa2 	bl	8006684 <__aeabi_f2d>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	480a      	ldr	r0, [pc, #40]	; (800b170 <ps_print+0x84>)
 800b146:	f7f6 facf 	bl	80016e8 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b150:	4619      	mov	r1, r3
 800b152:	4808      	ldr	r0, [pc, #32]	; (800b174 <ps_print+0x88>)
 800b154:	f7f6 fac8 	bl	80016e8 <iprintf>
	//HAL_Delay(dt_ms);
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	080115f4 	.word	0x080115f4
 800b164:	080115fc 	.word	0x080115fc
 800b168:	08011614 	.word	0x08011614
 800b16c:	08011628 	.word	0x08011628
 800b170:	0801163c 	.word	0x0801163c
 800b174:	08011650 	.word	0x08011650

0800b178 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	4618      	mov	r0, r3
 800b188:	f7fd f99a 	bl	80084c0 <flash_writer_init>
	pr->sector = sector;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	60da      	str	r2, [r3, #12]
}
 800b192:	bf00      	nop
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fd f9a9 	bl	80084fc <flash_writer_open>
    pr->ready = true;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	741a      	strb	r2, [r3, #16]
}
 800b1b0:	bf00      	nop
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	b490      	push	{r4, r7}
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	f107 0408 	add.w	r4, r7, #8
 800b1c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 800b1c6:	7e3b      	ldrb	r3, [r7, #24]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bc90      	pop	{r4, r7}
 800b1ce:	b004      	add	sp, #16
 800b1d0:	4770      	bx	lr
	...

0800b1d4 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	e00d      	b.n	800b1fe <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 800b1e2:	68f9      	ldr	r1, [r7, #12]
 800b1e4:	4a17      	ldr	r2, [pc, #92]	; (800b244 <preference_writer_flush+0x70>)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1f4:	f7fd f99e 	bl	8008534 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2bff      	cmp	r3, #255	; 0xff
 800b202:	ddee      	ble.n	800b1e2 <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 800b204:	e012      	b.n	800b22c <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 800b206:	68f9      	ldr	r1, [r7, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b20e:	4a0e      	ldr	r2, [pc, #56]	; (800b248 <preference_writer_flush+0x74>)
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	edd3 7a00 	vldr	s15, [r3]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	eeb0 0a67 	vmov.f32	s0, s15
 800b21e:	460b      	mov	r3, r1
 800b220:	ca07      	ldmia	r2, {r0, r1, r2}
 800b222:	f7fd f99d 	bl	8008560 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b232:	dbe8      	blt.n	800b206 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	741a      	strb	r2, [r3, #16]
}
 800b23a:	bf00      	nop
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20008f5c 	.word	0x20008f5c
 800b248:	20000658 	.word	0x20000658

0800b24c <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 800b24c:	b084      	sub	sp, #16
 800b24e:	b590      	push	{r4, r7, lr}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	f107 0418 	add.w	r4, r7, #24
 800b258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 800b25c:	2300      	movs	r3, #0
 800b25e:	607b      	str	r3, [r7, #4]
 800b260:	e00d      	b.n	800b27e <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f107 0218 	add.w	r2, r7, #24
 800b268:	ca07      	ldmia	r2, {r0, r1, r2}
 800b26a:	f7fd f99f 	bl	80085ac <flash_read_int>
 800b26e:	4602      	mov	r2, r0
 800b270:	4915      	ldr	r1, [pc, #84]	; (800b2c8 <preference_writer_load+0x7c>)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3301      	adds	r3, #1
 800b27c:	607b      	str	r3, [r7, #4]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2bff      	cmp	r3, #255	; 0xff
 800b282:	ddee      	ble.n	800b262 <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 800b284:	e013      	b.n	800b2ae <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 800b28e:	4613      	mov	r3, r2
 800b290:	f107 0218 	add.w	r2, r7, #24
 800b294:	ca07      	ldmia	r2, {r0, r1, r2}
 800b296:	f7fd f99f 	bl	80085d8 <flash_read_float>
 800b29a:	eef0 7a40 	vmov.f32	s15, s0
 800b29e:	4a0b      	ldr	r2, [pc, #44]	; (800b2cc <preference_writer_load+0x80>)
 800b2a0:	00a3      	lsls	r3, r4, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	607b      	str	r3, [r7, #4]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b2b4:	dbe7      	blt.n	800b286 <preference_writer_load+0x3a>
    }
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b2c2:	b004      	add	sp, #16
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	20008f5c 	.word	0x20008f5c
 800b2cc:	20000658 	.word	0x20000658

0800b2d0 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fd f956 	bl	8008592 <flash_writer_close>
}
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800b2f4:	4b18      	ldr	r3, [pc, #96]	; (800b358 <MX_SPI1_Init+0x68>)
 800b2f6:	4a19      	ldr	r2, [pc, #100]	; (800b35c <MX_SPI1_Init+0x6c>)
 800b2f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b2fa:	4b17      	ldr	r3, [pc, #92]	; (800b358 <MX_SPI1_Init+0x68>)
 800b2fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <MX_SPI1_Init+0x68>)
 800b304:	2200      	movs	r2, #0
 800b306:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800b308:	4b13      	ldr	r3, [pc, #76]	; (800b358 <MX_SPI1_Init+0x68>)
 800b30a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b30e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <MX_SPI1_Init+0x68>)
 800b312:	2200      	movs	r2, #0
 800b314:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b316:	4b10      	ldr	r3, [pc, #64]	; (800b358 <MX_SPI1_Init+0x68>)
 800b318:	2201      	movs	r2, #1
 800b31a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b31c:	4b0e      	ldr	r3, [pc, #56]	; (800b358 <MX_SPI1_Init+0x68>)
 800b31e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b322:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800b324:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <MX_SPI1_Init+0x68>)
 800b326:	2228      	movs	r2, #40	; 0x28
 800b328:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b32a:	4b0b      	ldr	r3, [pc, #44]	; (800b358 <MX_SPI1_Init+0x68>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b330:	4b09      	ldr	r3, [pc, #36]	; (800b358 <MX_SPI1_Init+0x68>)
 800b332:	2200      	movs	r2, #0
 800b334:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b336:	4b08      	ldr	r3, [pc, #32]	; (800b358 <MX_SPI1_Init+0x68>)
 800b338:	2200      	movs	r2, #0
 800b33a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800b33c:	4b06      	ldr	r3, [pc, #24]	; (800b358 <MX_SPI1_Init+0x68>)
 800b33e:	220a      	movs	r2, #10
 800b340:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b342:	4805      	ldr	r0, [pc, #20]	; (800b358 <MX_SPI1_Init+0x68>)
 800b344:	f003 fb84 	bl	800ea50 <HAL_SPI_Init>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800b34e:	f7ff fb7b 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800b352:	bf00      	nop
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20009458 	.word	0x20009458
 800b35c:	40013000 	.word	0x40013000

0800b360 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800b364:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b366:	4a19      	ldr	r2, [pc, #100]	; (800b3cc <MX_SPI3_Init+0x6c>)
 800b368:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800b36a:	4b17      	ldr	r3, [pc, #92]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b36c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b370:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800b372:	4b15      	ldr	r3, [pc, #84]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b374:	2200      	movs	r2, #0
 800b376:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800b378:	4b13      	ldr	r3, [pc, #76]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b37a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b37e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b380:	4b11      	ldr	r3, [pc, #68]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b382:	2200      	movs	r2, #0
 800b384:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b386:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b388:	2200      	movs	r2, #0
 800b38a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800b38c:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b38e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b392:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b394:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b396:	2200      	movs	r2, #0
 800b398:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b39a:	4b0b      	ldr	r3, [pc, #44]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800b3a0:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3a6:	4b08      	ldr	r3, [pc, #32]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800b3ac:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b3ae:	220a      	movs	r2, #10
 800b3b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800b3b2:	4805      	ldr	r0, [pc, #20]	; (800b3c8 <MX_SPI3_Init+0x68>)
 800b3b4:	f003 fb4c 	bl	800ea50 <HAL_SPI_Init>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800b3be:	f7ff fb43 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800b3c2:	bf00      	nop
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20009400 	.word	0x20009400
 800b3cc:	40003c00 	.word	0x40003c00

0800b3d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08c      	sub	sp, #48	; 0x30
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3d8:	f107 031c 	add.w	r3, r7, #28
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	605a      	str	r2, [r3, #4]
 800b3e2:	609a      	str	r2, [r3, #8]
 800b3e4:	60da      	str	r2, [r3, #12]
 800b3e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a32      	ldr	r2, [pc, #200]	; (800b4b8 <HAL_SPI_MspInit+0xe8>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d12c      	bne.n	800b44c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61bb      	str	r3, [r7, #24]
 800b3f6:	4b31      	ldr	r3, [pc, #196]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3fa:	4a30      	ldr	r2, [pc, #192]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b3fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b400:	6453      	str	r3, [r2, #68]	; 0x44
 800b402:	4b2e      	ldr	r3, [pc, #184]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b40a:	61bb      	str	r3, [r7, #24]
 800b40c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	4b2a      	ldr	r3, [pc, #168]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	4a29      	ldr	r2, [pc, #164]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b418:	f043 0301 	orr.w	r3, r3, #1
 800b41c:	6313      	str	r3, [r2, #48]	; 0x30
 800b41e:	4b27      	ldr	r3, [pc, #156]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b42a:	23e0      	movs	r3, #224	; 0xe0
 800b42c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b42e:	2302      	movs	r3, #2
 800b430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b432:	2300      	movs	r3, #0
 800b434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b436:	2303      	movs	r3, #3
 800b438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b43a:	2305      	movs	r3, #5
 800b43c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b43e:	f107 031c 	add.w	r3, r7, #28
 800b442:	4619      	mov	r1, r3
 800b444:	481e      	ldr	r0, [pc, #120]	; (800b4c0 <HAL_SPI_MspInit+0xf0>)
 800b446:	f002 fb9b 	bl	800db80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800b44a:	e031      	b.n	800b4b0 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a1c      	ldr	r2, [pc, #112]	; (800b4c4 <HAL_SPI_MspInit+0xf4>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d12c      	bne.n	800b4b0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b456:	2300      	movs	r3, #0
 800b458:	613b      	str	r3, [r7, #16]
 800b45a:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45e:	4a17      	ldr	r2, [pc, #92]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b464:	6413      	str	r3, [r2, #64]	; 0x40
 800b466:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b46e:	613b      	str	r3, [r7, #16]
 800b470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47a:	4a10      	ldr	r2, [pc, #64]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b47c:	f043 0304 	orr.w	r3, r3, #4
 800b480:	6313      	str	r3, [r2, #48]	; 0x30
 800b482:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <HAL_SPI_MspInit+0xec>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800b48e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b494:	2302      	movs	r3, #2
 800b496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b49c:	2303      	movs	r3, #3
 800b49e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b4a0:	2306      	movs	r3, #6
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4a4:	f107 031c 	add.w	r3, r7, #28
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4807      	ldr	r0, [pc, #28]	; (800b4c8 <HAL_SPI_MspInit+0xf8>)
 800b4ac:	f002 fb68 	bl	800db80 <HAL_GPIO_Init>
}
 800b4b0:	bf00      	nop
 800b4b2:	3730      	adds	r7, #48	; 0x30
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	40013000 	.word	0x40013000
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	40020000 	.word	0x40020000
 800b4c4:	40003c00 	.word	0x40003c00
 800b4c8:	40020800 	.word	0x40020800

0800b4cc <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800b4d0:	4b07      	ldr	r3, [pc, #28]	; (800b4f0 <FLASH_Unlock+0x24>)
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	da05      	bge.n	800b4e4 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800b4d8:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <FLASH_Unlock+0x24>)
 800b4da:	4a06      	ldr	r2, [pc, #24]	; (800b4f4 <FLASH_Unlock+0x28>)
 800b4dc:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800b4de:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <FLASH_Unlock+0x24>)
 800b4e0:	4a05      	ldr	r2, [pc, #20]	; (800b4f8 <FLASH_Unlock+0x2c>)
 800b4e2:	605a      	str	r2, [r3, #4]
  }  
}
 800b4e4:	bf00      	nop
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	40023c00 	.word	0x40023c00
 800b4f4:	45670123 	.word	0x45670123
 800b4f8:	cdef89ab 	.word	0xcdef89ab

0800b4fc <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b500:	4b05      	ldr	r3, [pc, #20]	; (800b518 <FLASH_Lock+0x1c>)
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	4a04      	ldr	r2, [pc, #16]	; (800b518 <FLASH_Lock+0x1c>)
 800b506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b50a:	6113      	str	r3, [r2, #16]
}
 800b50c:	bf00      	nop
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	40023c00 	.word	0x40023c00

0800b51c <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 800b52c:	2309      	movs	r3, #9
 800b52e:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d102      	bne.n	800b53c <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b536:	2300      	movs	r3, #0
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	e010      	b.n	800b55e <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 800b53c:	78fb      	ldrb	r3, [r7, #3]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d103      	bne.n	800b54a <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b542:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e009      	b.n	800b55e <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d103      	bne.n	800b558 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b550:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	e002      	b.n	800b55e <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b55c:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 800b55e:	f000 f8bf 	bl	800b6e0 <FLASH_WaitForLastOperation2>
 800b562:	4603      	mov	r3, r0
 800b564:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 800b566:	7afb      	ldrb	r3, [r7, #11]
 800b568:	2b09      	cmp	r3, #9
 800b56a:	d12f      	bne.n	800b5cc <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	4a19      	ldr	r2, [pc, #100]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b576:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 800b578:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b57a:	691a      	ldr	r2, [r3, #16]
 800b57c:	4916      	ldr	r1, [pc, #88]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4313      	orrs	r3, r2
 800b582:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 800b584:	4b14      	ldr	r3, [pc, #80]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	4a13      	ldr	r2, [pc, #76]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b58a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b58e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800b590:	4b11      	ldr	r3, [pc, #68]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b592:	691a      	ldr	r2, [r3, #16]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4313      	orrs	r3, r2
 800b598:	4a0f      	ldr	r2, [pc, #60]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b59a:	f043 0302 	orr.w	r3, r3, #2
 800b59e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b5a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5aa:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 800b5ac:	f000 f898 	bl	800b6e0 <FLASH_WaitForLastOperation2>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800b5b4:	4b08      	ldr	r3, [pc, #32]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	4a07      	ldr	r2, [pc, #28]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b5ba:	f023 0302 	bic.w	r3, r3, #2
 800b5be:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 800b5c0:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	4a04      	ldr	r2, [pc, #16]	; (800b5d8 <FLASH_EraseSector+0xbc>)
 800b5c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b5ca:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 800b5cc:	7afb      	ldrb	r3, [r7, #11]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	40023c00 	.word	0x40023c00

0800b5dc <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 800b5e6:	2309      	movs	r3, #9
 800b5e8:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 800b5ea:	f000 f879 	bl	800b6e0 <FLASH_WaitForLastOperation2>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b09      	cmp	r3, #9
 800b5f6:	d11e      	bne.n	800b636 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b5f8:	4b11      	ldr	r3, [pc, #68]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	4a10      	ldr	r2, [pc, #64]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b5fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b602:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	4a0d      	ldr	r2, [pc, #52]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b60a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b60e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4a0a      	ldr	r2, [pc, #40]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 800b622:	f000 f85d 	bl	800b6e0 <FLASH_WaitForLastOperation2>
 800b626:	4603      	mov	r3, r0
 800b628:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b62a:	4b05      	ldr	r3, [pc, #20]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	4a04      	ldr	r2, [pc, #16]	; (800b640 <FLASH_ProgramWord+0x64>)
 800b630:	f023 0301 	bic.w	r3, r3, #1
 800b634:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800b636:	7bfb      	ldrb	r3, [r7, #15]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	40023c00 	.word	0x40023c00

0800b644 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800b64c:	4a04      	ldr	r2, [pc, #16]	; (800b660 <FLASH_ClearFlag+0x1c>)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	60d3      	str	r3, [r2, #12]
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	40023c00 	.word	0x40023c00

0800b664 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 800b66a:	2309      	movs	r3, #9
 800b66c:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800b66e:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <FLASH_GetStatus+0x78>)
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b67a:	d102      	bne.n	800b682 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 800b67c:	2301      	movs	r3, #1
 800b67e:	71fb      	strb	r3, [r7, #7]
 800b680:	e025      	b.n	800b6ce <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <FLASH_GetStatus+0x78>)
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	f003 0310 	and.w	r3, r3, #16
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d002      	beq.n	800b694 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 800b68e:	2306      	movs	r3, #6
 800b690:	71fb      	strb	r3, [r7, #7]
 800b692:	e01c      	b.n	800b6ce <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 800b694:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <FLASH_GetStatus+0x78>)
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	71fb      	strb	r3, [r7, #7]
 800b6a4:	e013      	b.n	800b6ce <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 800b6a6:	4b0d      	ldr	r3, [pc, #52]	; (800b6dc <FLASH_GetStatus+0x78>)
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d002      	beq.n	800b6b8 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 800b6b2:	2307      	movs	r3, #7
 800b6b4:	71fb      	strb	r3, [r7, #7]
 800b6b6:	e00a      	b.n	800b6ce <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800b6b8:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <FLASH_GetStatus+0x78>)
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	71fb      	strb	r3, [r7, #7]
 800b6c8:	e001      	b.n	800b6ce <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 800b6ca:	2309      	movs	r3, #9
 800b6cc:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	40023c00 	.word	0x40023c00

0800b6e0 <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 800b6e6:	2309      	movs	r3, #9
 800b6e8:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800b6ea:	f7ff ffbb 	bl	800b664 <FLASH_GetStatus>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 800b6f2:	e003      	b.n	800b6fc <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 800b6f4:	f7ff ffb6 	bl	800b664 <FLASH_GetStatus>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b01      	cmp	r3, #1
 800b702:	d0f7      	beq.n	800b6f4 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	b2db      	uxtb	r3, r3
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b716:	2300      	movs	r3, #0
 800b718:	607b      	str	r3, [r7, #4]
 800b71a:	4b10      	ldr	r3, [pc, #64]	; (800b75c <HAL_MspInit+0x4c>)
 800b71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b71e:	4a0f      	ldr	r2, [pc, #60]	; (800b75c <HAL_MspInit+0x4c>)
 800b720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b724:	6453      	str	r3, [r2, #68]	; 0x44
 800b726:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <HAL_MspInit+0x4c>)
 800b728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b72a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b72e:	607b      	str	r3, [r7, #4]
 800b730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b732:	2300      	movs	r3, #0
 800b734:	603b      	str	r3, [r7, #0]
 800b736:	4b09      	ldr	r3, [pc, #36]	; (800b75c <HAL_MspInit+0x4c>)
 800b738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73a:	4a08      	ldr	r2, [pc, #32]	; (800b75c <HAL_MspInit+0x4c>)
 800b73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b740:	6413      	str	r3, [r2, #64]	; 0x40
 800b742:	4b06      	ldr	r3, [pc, #24]	; (800b75c <HAL_MspInit+0x4c>)
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800b74e:	2007      	movs	r0, #7
 800b750:	f002 f942 	bl	800d9d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	40023800 	.word	0x40023800

0800b760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b760:	b480      	push	{r7}
 800b762:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b764:	bf00      	nop
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b76e:	b480      	push	{r7}
 800b770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b772:	e7fe      	b.n	800b772 <HardFault_Handler+0x4>

0800b774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b774:	b480      	push	{r7}
 800b776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b778:	e7fe      	b.n	800b778 <MemManage_Handler+0x4>

0800b77a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b77a:	b480      	push	{r7}
 800b77c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b77e:	e7fe      	b.n	800b77e <BusFault_Handler+0x4>

0800b780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b780:	b480      	push	{r7}
 800b782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b784:	e7fe      	b.n	800b784 <UsageFault_Handler+0x4>

0800b786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b786:	b480      	push	{r7}
 800b788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b78a:	bf00      	nop
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b798:	bf00      	nop
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b7a6:	bf00      	nop
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b7b4:	f000 fd94 	bl	800c2e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b7b8:	bf00      	nop
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7be:	b095      	sub	sp, #84	; 0x54
 800b7c0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800b7c2:	4883      	ldr	r0, [pc, #524]	; (800b9d0 <CAN1_RX0_IRQHandler+0x214>)
 800b7c4:	f001 fdff 	bl	800d3c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800b7c8:	4b82      	ldr	r3, [pc, #520]	; (800b9d4 <CAN1_RX0_IRQHandler+0x218>)
 800b7ca:	4a83      	ldr	r2, [pc, #524]	; (800b9d8 <CAN1_RX0_IRQHandler+0x21c>)
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4880      	ldr	r0, [pc, #512]	; (800b9d0 <CAN1_RX0_IRQHandler+0x214>)
 800b7d0:	f001 fce7 	bl	800d1a2 <HAL_CAN_GetRxMessage>
  uint32_t TxMailbox;
  pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 800b7d4:	4b81      	ldr	r3, [pc, #516]	; (800b9dc <CAN1_RX0_IRQHandler+0x220>)
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	4a81      	ldr	r2, [pc, #516]	; (800b9e0 <CAN1_RX0_IRQHandler+0x224>)
 800b7dc:	ed92 7a03 	vldr	s14, [r2, #12]
 800b7e0:	4a80      	ldr	r2, [pc, #512]	; (800b9e4 <CAN1_RX0_IRQHandler+0x228>)
 800b7e2:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800b7e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b7ea:	4a7d      	ldr	r2, [pc, #500]	; (800b9e0 <CAN1_RX0_IRQHandler+0x224>)
 800b7ec:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 800b7f0:	4a7c      	ldr	r2, [pc, #496]	; (800b9e4 <CAN1_RX0_IRQHandler+0x228>)
 800b7f2:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800b7f6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800b7fa:	4a7b      	ldr	r2, [pc, #492]	; (800b9e8 <CAN1_RX0_IRQHandler+0x22c>)
 800b7fc:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 800b800:	4a78      	ldr	r2, [pc, #480]	; (800b9e4 <CAN1_RX0_IRQHandler+0x228>)
 800b802:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800b806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b80a:	4a76      	ldr	r2, [pc, #472]	; (800b9e4 <CAN1_RX0_IRQHandler+0x228>)
 800b80c:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800b810:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b814:	eeb0 1a67 	vmov.f32	s2, s15
 800b818:	eef0 0a46 	vmov.f32	s1, s12
 800b81c:	eeb0 0a66 	vmov.f32	s0, s13
 800b820:	4619      	mov	r1, r3
 800b822:	4872      	ldr	r0, [pc, #456]	; (800b9ec <CAN1_RX0_IRQHandler+0x230>)
 800b824:	f7fc fabe 	bl	8007da4 <pack_reply>
  HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 800b828:	1d3b      	adds	r3, r7, #4
 800b82a:	4a71      	ldr	r2, [pc, #452]	; (800b9f0 <CAN1_RX0_IRQHandler+0x234>)
 800b82c:	4971      	ldr	r1, [pc, #452]	; (800b9f4 <CAN1_RX0_IRQHandler+0x238>)
 800b82e:	4868      	ldr	r0, [pc, #416]	; (800b9d0 <CAN1_RX0_IRQHandler+0x214>)
 800b830:	f001 fbdc 	bl	800cfec <HAL_CAN_AddTxMessage>

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800b834:	4b70      	ldr	r3, [pc, #448]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b836:	785a      	ldrb	r2, [r3, #1]
 800b838:	4b6f      	ldr	r3, [pc, #444]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b83a:	789b      	ldrb	r3, [r3, #2]
 800b83c:	4013      	ands	r3, r2
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	4b6d      	ldr	r3, [pc, #436]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b842:	78db      	ldrb	r3, [r3, #3]
 800b844:	4013      	ands	r3, r2
 800b846:	b2da      	uxtb	r2, r3
 800b848:	4b6b      	ldr	r3, [pc, #428]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b84a:	791b      	ldrb	r3, [r3, #4]
 800b84c:	4013      	ands	r3, r2
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	4b69      	ldr	r3, [pc, #420]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b852:	795b      	ldrb	r3, [r3, #5]
 800b854:	4013      	ands	r3, r2
 800b856:	b2da      	uxtb	r2, r3
 800b858:	4b67      	ldr	r3, [pc, #412]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b85a:	799b      	ldrb	r3, [r3, #6]
 800b85c:	4013      	ands	r3, r2
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	4b65      	ldr	r3, [pc, #404]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b862:	79db      	ldrb	r3, [r3, #7]
 800b864:	4013      	ands	r3, r2
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2bff      	cmp	r3, #255	; 0xff
 800b86a:	bf0c      	ite	eq
 800b86c:	2301      	moveq	r3, #1
 800b86e:	2300      	movne	r3, #0
 800b870:	b2da      	uxtb	r2, r3
 800b872:	4b61      	ldr	r3, [pc, #388]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b874:	7a1b      	ldrb	r3, [r3, #8]
 800b876:	2bfc      	cmp	r3, #252	; 0xfc
 800b878:	bf0c      	ite	eq
 800b87a:	2301      	moveq	r3, #1
 800b87c:	2300      	movne	r3, #0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	4013      	ands	r3, r2
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d004      	beq.n	800b892 <CAN1_RX0_IRQHandler+0xd6>
	  update_fsm(&state, MOTOR_CMD);
 800b888:	216d      	movs	r1, #109	; 0x6d
 800b88a:	485c      	ldr	r0, [pc, #368]	; (800b9fc <CAN1_RX0_IRQHandler+0x240>)
 800b88c:	f7fd ffd4 	bl	8009838 <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
	  controller.timeout = 0;					// Reset timeout counter
  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800b890:	e099      	b.n	800b9c6 <CAN1_RX0_IRQHandler+0x20a>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 800b892:	4b59      	ldr	r3, [pc, #356]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b894:	785a      	ldrb	r2, [r3, #1]
 800b896:	4b58      	ldr	r3, [pc, #352]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b898:	789b      	ldrb	r3, [r3, #2]
 800b89a:	4013      	ands	r3, r2
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	4b56      	ldr	r3, [pc, #344]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b8a0:	78db      	ldrb	r3, [r3, #3]
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	2bff      	cmp	r3, #255	; 0xff
 800b8a8:	bf0c      	ite	eq
 800b8aa:	2301      	moveq	r3, #1
 800b8ac:	2300      	movne	r3, #0
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4b51      	ldr	r3, [pc, #324]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b8b4:	791b      	ldrb	r3, [r3, #4]
 800b8b6:	2bff      	cmp	r3, #255	; 0xff
 800b8b8:	bf0c      	ite	eq
 800b8ba:	2301      	moveq	r3, #1
 800b8bc:	2300      	movne	r3, #0
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4b4d      	ldr	r3, [pc, #308]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b8c4:	795b      	ldrb	r3, [r3, #5]
 800b8c6:	2bff      	cmp	r3, #255	; 0xff
 800b8c8:	bf0c      	ite	eq
 800b8ca:	2301      	moveq	r3, #1
 800b8cc:	2300      	movne	r3, #0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	fb03 f301 	mul.w	r3, r3, r1
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	4a48      	ldr	r2, [pc, #288]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b8d8:	7992      	ldrb	r2, [r2, #6]
 800b8da:	2aff      	cmp	r2, #255	; 0xff
 800b8dc:	bf0c      	ite	eq
 800b8de:	2201      	moveq	r2, #1
 800b8e0:	2200      	movne	r2, #0
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	4a44      	ldr	r2, [pc, #272]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b8e8:	79d2      	ldrb	r2, [r2, #7]
 800b8ea:	2aff      	cmp	r2, #255	; 0xff
 800b8ec:	bf0c      	ite	eq
 800b8ee:	2201      	moveq	r2, #1
 800b8f0:	2200      	movne	r2, #0
 800b8f2:	b2d2      	uxtb	r2, r2
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	4a40      	ldr	r2, [pc, #256]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b8f8:	7a12      	ldrb	r2, [r2, #8]
 800b8fa:	2afd      	cmp	r2, #253	; 0xfd
 800b8fc:	bf0c      	ite	eq
 800b8fe:	2201      	moveq	r2, #1
 800b900:	2200      	movne	r2, #0
 800b902:	b2d2      	uxtb	r2, r2
 800b904:	4013      	ands	r3, r2
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <CAN1_RX0_IRQHandler+0x158>
      update_fsm(&state, MENU_CMD);
 800b90a:	211b      	movs	r1, #27
 800b90c:	483b      	ldr	r0, [pc, #236]	; (800b9fc <CAN1_RX0_IRQHandler+0x240>)
 800b90e:	f7fd ff93 	bl	8009838 <update_fsm>
}
 800b912:	e058      	b.n	800b9c6 <CAN1_RX0_IRQHandler+0x20a>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 800b914:	4b38      	ldr	r3, [pc, #224]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b916:	785a      	ldrb	r2, [r3, #1]
 800b918:	4b37      	ldr	r3, [pc, #220]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b91a:	789b      	ldrb	r3, [r3, #2]
 800b91c:	4013      	ands	r3, r2
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	4b35      	ldr	r3, [pc, #212]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b922:	78db      	ldrb	r3, [r3, #3]
 800b924:	4013      	ands	r3, r2
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2bff      	cmp	r3, #255	; 0xff
 800b92a:	bf0c      	ite	eq
 800b92c:	2301      	moveq	r3, #1
 800b92e:	2300      	movne	r3, #0
 800b930:	b2db      	uxtb	r3, r3
 800b932:	461a      	mov	r2, r3
 800b934:	4b30      	ldr	r3, [pc, #192]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b936:	791b      	ldrb	r3, [r3, #4]
 800b938:	2bff      	cmp	r3, #255	; 0xff
 800b93a:	bf0c      	ite	eq
 800b93c:	2301      	moveq	r3, #1
 800b93e:	2300      	movne	r3, #0
 800b940:	b2db      	uxtb	r3, r3
 800b942:	4619      	mov	r1, r3
 800b944:	4b2c      	ldr	r3, [pc, #176]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b946:	795b      	ldrb	r3, [r3, #5]
 800b948:	2bff      	cmp	r3, #255	; 0xff
 800b94a:	bf0c      	ite	eq
 800b94c:	2301      	moveq	r3, #1
 800b94e:	2300      	movne	r3, #0
 800b950:	b2db      	uxtb	r3, r3
 800b952:	fb03 f301 	mul.w	r3, r3, r1
 800b956:	4013      	ands	r3, r2
 800b958:	4a27      	ldr	r2, [pc, #156]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b95a:	7992      	ldrb	r2, [r2, #6]
 800b95c:	2aff      	cmp	r2, #255	; 0xff
 800b95e:	bf0c      	ite	eq
 800b960:	2201      	moveq	r2, #1
 800b962:	2200      	movne	r2, #0
 800b964:	b2d2      	uxtb	r2, r2
 800b966:	4013      	ands	r3, r2
 800b968:	4a23      	ldr	r2, [pc, #140]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b96a:	79d2      	ldrb	r2, [r2, #7]
 800b96c:	2aff      	cmp	r2, #255	; 0xff
 800b96e:	bf0c      	ite	eq
 800b970:	2201      	moveq	r2, #1
 800b972:	2200      	movne	r2, #0
 800b974:	b2d2      	uxtb	r2, r2
 800b976:	4013      	ands	r3, r2
 800b978:	4a1f      	ldr	r2, [pc, #124]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b97a:	7a12      	ldrb	r2, [r2, #8]
 800b97c:	2afe      	cmp	r2, #254	; 0xfe
 800b97e:	bf0c      	ite	eq
 800b980:	2201      	moveq	r2, #1
 800b982:	2200      	movne	r2, #0
 800b984:	b2d2      	uxtb	r2, r2
 800b986:	4013      	ands	r3, r2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <CAN1_RX0_IRQHandler+0x1da>
	  update_fsm(&state, ZERO_CMD);
 800b98c:	217a      	movs	r1, #122	; 0x7a
 800b98e:	481b      	ldr	r0, [pc, #108]	; (800b9fc <CAN1_RX0_IRQHandler+0x240>)
 800b990:	f7fd ff52 	bl	8009838 <update_fsm>
}
 800b994:	e017      	b.n	800b9c6 <CAN1_RX0_IRQHandler+0x20a>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 800b996:	4e18      	ldr	r6, [pc, #96]	; (800b9f8 <CAN1_RX0_IRQHandler+0x23c>)
 800b998:	4b19      	ldr	r3, [pc, #100]	; (800ba00 <CAN1_RX0_IRQHandler+0x244>)
 800b99a:	9310      	str	r3, [sp, #64]	; 0x40
 800b99c:	466d      	mov	r5, sp
 800b99e:	f106 0410 	add.w	r4, r6, #16
 800b9a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b9a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b9aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b9ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b9b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b9b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800b9ba:	f7fc fa6b 	bl	8007e94 <unpack_cmd>
	  controller.timeout = 0;					// Reset timeout counter
 800b9be:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <CAN1_RX0_IRQHandler+0x22c>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800b9c6:	bf00      	nop
 800b9c8:	370c      	adds	r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20000328 	.word	0x20000328
 800b9d4:	20009385 	.word	0x20009385
 800b9d8:	20009390 	.word	0x20009390
 800b9dc:	20008f5c 	.word	0x20008f5c
 800b9e0:	20000350 	.word	0x20000350
 800b9e4:	20000658 	.word	0x20000658
 800b9e8:	20000758 	.word	0x20000758
 800b9ec:	2000935c 	.word	0x2000935c
 800b9f0:	2000935d 	.word	0x2000935d
 800b9f4:	20009364 	.word	0x20009364
 800b9f8:	20009384 	.word	0x20009384
 800b9fc:	20000634 	.word	0x20000634
 800ba00:	20000824 	.word	0x20000824

0800ba04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 800ba08:	480c      	ldr	r0, [pc, #48]	; (800ba3c <TIM1_UP_TIM10_IRQHandler+0x38>)
 800ba0a:	f7fc fea3 	bl	8008754 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 800ba0e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ba40 <TIM1_UP_TIM10_IRQHandler+0x3c>
 800ba12:	480c      	ldr	r0, [pc, #48]	; (800ba44 <TIM1_UP_TIM10_IRQHandler+0x40>)
 800ba14:	f7ff f9f8 	bl	800ae08 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 800ba18:	480b      	ldr	r0, [pc, #44]	; (800ba48 <TIM1_UP_TIM10_IRQHandler+0x44>)
 800ba1a:	f7fd fd61 	bl	80094e0 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 800ba1e:	f000 f833 	bl	800ba88 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 800ba22:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <TIM1_UP_TIM10_IRQHandler+0x38>)
 800ba24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba28:	3301      	adds	r3, #1
 800ba2a:	4a04      	ldr	r2, [pc, #16]	; (800ba3c <TIM1_UP_TIM10_IRQHandler+0x38>)
 800ba2c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ba30:	4806      	ldr	r0, [pc, #24]	; (800ba4c <TIM1_UP_TIM10_IRQHandler+0x48>)
 800ba32:	f003 fce5 	bl	800f400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ba36:	bf00      	nop
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000758 	.word	0x20000758
 800ba40:	37d1b717 	.word	0x37d1b717
 800ba44:	20000350 	.word	0x20000350
 800ba48:	20000634 	.word	0x20000634
 800ba4c:	200094b0 	.word	0x200094b0

0800ba50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800ba56:	4809      	ldr	r0, [pc, #36]	; (800ba7c <USART2_IRQHandler+0x2c>)
 800ba58:	f004 fc90 	bl	801037c <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 800ba5c:	4b08      	ldr	r3, [pc, #32]	; (800ba80 <USART2_IRQHandler+0x30>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	4619      	mov	r1, r3
 800ba66:	4807      	ldr	r0, [pc, #28]	; (800ba84 <USART2_IRQHandler+0x34>)
 800ba68:	f7fd fee6 	bl	8009838 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ba6c:	4803      	ldr	r0, [pc, #12]	; (800ba7c <USART2_IRQHandler+0x2c>)
 800ba6e:	f004 fc85 	bl	801037c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	200094f8 	.word	0x200094f8
 800ba80:	20000630 	.word	0x20000630
 800ba84:	20000634 	.word	0x20000634

0800ba88 <can_tx_rx>:


/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 800ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8a:	b095      	sub	sp, #84	; 0x54
 800ba8c:	af12      	add	r7, sp, #72	; 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800ba8e:	4b84      	ldr	r3, [pc, #528]	; (800bca0 <can_tx_rx+0x218>)
 800ba90:	4a84      	ldr	r2, [pc, #528]	; (800bca4 <can_tx_rx+0x21c>)
 800ba92:	2100      	movs	r1, #0
 800ba94:	4884      	ldr	r0, [pc, #528]	; (800bca8 <can_tx_rx+0x220>)
 800ba96:	f001 fb84 	bl	800d1a2 <HAL_CAN_GetRxMessage>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f040 80f9 	bne.w	800bc98 <can_tx_rx+0x210>
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 800baa6:	4b81      	ldr	r3, [pc, #516]	; (800bcac <can_tx_rx+0x224>)
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	4a80      	ldr	r2, [pc, #512]	; (800bcb0 <can_tx_rx+0x228>)
 800baae:	ed92 7a03 	vldr	s14, [r2, #12]
 800bab2:	4a80      	ldr	r2, [pc, #512]	; (800bcb4 <can_tx_rx+0x22c>)
 800bab4:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800bab8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800babc:	4a7c      	ldr	r2, [pc, #496]	; (800bcb0 <can_tx_rx+0x228>)
 800babe:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 800bac2:	4a7c      	ldr	r2, [pc, #496]	; (800bcb4 <can_tx_rx+0x22c>)
 800bac4:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800bac8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800bacc:	4a7a      	ldr	r2, [pc, #488]	; (800bcb8 <can_tx_rx+0x230>)
 800bace:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 800bad2:	4a78      	ldr	r2, [pc, #480]	; (800bcb4 <can_tx_rx+0x22c>)
 800bad4:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800bad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800badc:	4a75      	ldr	r2, [pc, #468]	; (800bcb4 <can_tx_rx+0x22c>)
 800bade:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800bae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae6:	eeb0 1a67 	vmov.f32	s2, s15
 800baea:	eef0 0a46 	vmov.f32	s1, s12
 800baee:	eeb0 0a66 	vmov.f32	s0, s13
 800baf2:	4619      	mov	r1, r3
 800baf4:	4871      	ldr	r0, [pc, #452]	; (800bcbc <can_tx_rx+0x234>)
 800baf6:	f7fc f955 	bl	8007da4 <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 800bafa:	463b      	mov	r3, r7
 800bafc:	4a70      	ldr	r2, [pc, #448]	; (800bcc0 <can_tx_rx+0x238>)
 800bafe:	4971      	ldr	r1, [pc, #452]	; (800bcc4 <can_tx_rx+0x23c>)
 800bb00:	4869      	ldr	r0, [pc, #420]	; (800bca8 <can_tx_rx+0x220>)
 800bb02:	f001 fa73 	bl	800cfec <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800bb06:	4b70      	ldr	r3, [pc, #448]	; (800bcc8 <can_tx_rx+0x240>)
 800bb08:	785a      	ldrb	r2, [r3, #1]
 800bb0a:	4b6f      	ldr	r3, [pc, #444]	; (800bcc8 <can_tx_rx+0x240>)
 800bb0c:	789b      	ldrb	r3, [r3, #2]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	4b6d      	ldr	r3, [pc, #436]	; (800bcc8 <can_tx_rx+0x240>)
 800bb14:	78db      	ldrb	r3, [r3, #3]
 800bb16:	4013      	ands	r3, r2
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	4b6b      	ldr	r3, [pc, #428]	; (800bcc8 <can_tx_rx+0x240>)
 800bb1c:	791b      	ldrb	r3, [r3, #4]
 800bb1e:	4013      	ands	r3, r2
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	4b69      	ldr	r3, [pc, #420]	; (800bcc8 <can_tx_rx+0x240>)
 800bb24:	795b      	ldrb	r3, [r3, #5]
 800bb26:	4013      	ands	r3, r2
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b67      	ldr	r3, [pc, #412]	; (800bcc8 <can_tx_rx+0x240>)
 800bb2c:	799b      	ldrb	r3, [r3, #6]
 800bb2e:	4013      	ands	r3, r2
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	4b65      	ldr	r3, [pc, #404]	; (800bcc8 <can_tx_rx+0x240>)
 800bb34:	79db      	ldrb	r3, [r3, #7]
 800bb36:	4013      	ands	r3, r2
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2bff      	cmp	r3, #255	; 0xff
 800bb3c:	bf0c      	ite	eq
 800bb3e:	2301      	moveq	r3, #1
 800bb40:	2300      	movne	r3, #0
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	4b60      	ldr	r3, [pc, #384]	; (800bcc8 <can_tx_rx+0x240>)
 800bb46:	7a1b      	ldrb	r3, [r3, #8]
 800bb48:	2bfc      	cmp	r3, #252	; 0xfc
 800bb4a:	bf0c      	ite	eq
 800bb4c:	2301      	moveq	r3, #1
 800bb4e:	2300      	movne	r3, #0
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	4013      	ands	r3, r2
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d004      	beq.n	800bb64 <can_tx_rx+0xdc>
			  update_fsm(&state, MOTOR_CMD);
 800bb5a:	216d      	movs	r1, #109	; 0x6d
 800bb5c:	485b      	ldr	r0, [pc, #364]	; (800bccc <can_tx_rx+0x244>)
 800bb5e:	f7fd fe6b 	bl	8009838 <update_fsm>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
			  controller.timeout = 0;					// Reset timeout counter
		}
	}

}
 800bb62:	e099      	b.n	800bc98 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 800bb64:	4b58      	ldr	r3, [pc, #352]	; (800bcc8 <can_tx_rx+0x240>)
 800bb66:	785a      	ldrb	r2, [r3, #1]
 800bb68:	4b57      	ldr	r3, [pc, #348]	; (800bcc8 <can_tx_rx+0x240>)
 800bb6a:	789b      	ldrb	r3, [r3, #2]
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	4b55      	ldr	r3, [pc, #340]	; (800bcc8 <can_tx_rx+0x240>)
 800bb72:	78db      	ldrb	r3, [r3, #3]
 800bb74:	4013      	ands	r3, r2
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2bff      	cmp	r3, #255	; 0xff
 800bb7a:	bf0c      	ite	eq
 800bb7c:	2301      	moveq	r3, #1
 800bb7e:	2300      	movne	r3, #0
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	4b50      	ldr	r3, [pc, #320]	; (800bcc8 <can_tx_rx+0x240>)
 800bb86:	791b      	ldrb	r3, [r3, #4]
 800bb88:	2bff      	cmp	r3, #255	; 0xff
 800bb8a:	bf0c      	ite	eq
 800bb8c:	2301      	moveq	r3, #1
 800bb8e:	2300      	movne	r3, #0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	4619      	mov	r1, r3
 800bb94:	4b4c      	ldr	r3, [pc, #304]	; (800bcc8 <can_tx_rx+0x240>)
 800bb96:	795b      	ldrb	r3, [r3, #5]
 800bb98:	2bff      	cmp	r3, #255	; 0xff
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2301      	moveq	r3, #1
 800bb9e:	2300      	movne	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	fb03 f301 	mul.w	r3, r3, r1
 800bba6:	4013      	ands	r3, r2
 800bba8:	4a47      	ldr	r2, [pc, #284]	; (800bcc8 <can_tx_rx+0x240>)
 800bbaa:	7992      	ldrb	r2, [r2, #6]
 800bbac:	2aff      	cmp	r2, #255	; 0xff
 800bbae:	bf0c      	ite	eq
 800bbb0:	2201      	moveq	r2, #1
 800bbb2:	2200      	movne	r2, #0
 800bbb4:	b2d2      	uxtb	r2, r2
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	4a43      	ldr	r2, [pc, #268]	; (800bcc8 <can_tx_rx+0x240>)
 800bbba:	79d2      	ldrb	r2, [r2, #7]
 800bbbc:	2aff      	cmp	r2, #255	; 0xff
 800bbbe:	bf0c      	ite	eq
 800bbc0:	2201      	moveq	r2, #1
 800bbc2:	2200      	movne	r2, #0
 800bbc4:	b2d2      	uxtb	r2, r2
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	4a3f      	ldr	r2, [pc, #252]	; (800bcc8 <can_tx_rx+0x240>)
 800bbca:	7a12      	ldrb	r2, [r2, #8]
 800bbcc:	2afd      	cmp	r2, #253	; 0xfd
 800bbce:	bf0c      	ite	eq
 800bbd0:	2201      	moveq	r2, #1
 800bbd2:	2200      	movne	r2, #0
 800bbd4:	b2d2      	uxtb	r2, r2
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d004      	beq.n	800bbe6 <can_tx_rx+0x15e>
			update_fsm(&state, MENU_CMD);
 800bbdc:	211b      	movs	r1, #27
 800bbde:	483b      	ldr	r0, [pc, #236]	; (800bccc <can_tx_rx+0x244>)
 800bbe0:	f7fd fe2a 	bl	8009838 <update_fsm>
}
 800bbe4:	e058      	b.n	800bc98 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 800bbe6:	4b38      	ldr	r3, [pc, #224]	; (800bcc8 <can_tx_rx+0x240>)
 800bbe8:	785a      	ldrb	r2, [r3, #1]
 800bbea:	4b37      	ldr	r3, [pc, #220]	; (800bcc8 <can_tx_rx+0x240>)
 800bbec:	789b      	ldrb	r3, [r3, #2]
 800bbee:	4013      	ands	r3, r2
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b35      	ldr	r3, [pc, #212]	; (800bcc8 <can_tx_rx+0x240>)
 800bbf4:	78db      	ldrb	r3, [r3, #3]
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2bff      	cmp	r3, #255	; 0xff
 800bbfc:	bf0c      	ite	eq
 800bbfe:	2301      	moveq	r3, #1
 800bc00:	2300      	movne	r3, #0
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	461a      	mov	r2, r3
 800bc06:	4b30      	ldr	r3, [pc, #192]	; (800bcc8 <can_tx_rx+0x240>)
 800bc08:	791b      	ldrb	r3, [r3, #4]
 800bc0a:	2bff      	cmp	r3, #255	; 0xff
 800bc0c:	bf0c      	ite	eq
 800bc0e:	2301      	moveq	r3, #1
 800bc10:	2300      	movne	r3, #0
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	4619      	mov	r1, r3
 800bc16:	4b2c      	ldr	r3, [pc, #176]	; (800bcc8 <can_tx_rx+0x240>)
 800bc18:	795b      	ldrb	r3, [r3, #5]
 800bc1a:	2bff      	cmp	r3, #255	; 0xff
 800bc1c:	bf0c      	ite	eq
 800bc1e:	2301      	moveq	r3, #1
 800bc20:	2300      	movne	r3, #0
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	fb03 f301 	mul.w	r3, r3, r1
 800bc28:	4013      	ands	r3, r2
 800bc2a:	4a27      	ldr	r2, [pc, #156]	; (800bcc8 <can_tx_rx+0x240>)
 800bc2c:	7992      	ldrb	r2, [r2, #6]
 800bc2e:	2aff      	cmp	r2, #255	; 0xff
 800bc30:	bf0c      	ite	eq
 800bc32:	2201      	moveq	r2, #1
 800bc34:	2200      	movne	r2, #0
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	4013      	ands	r3, r2
 800bc3a:	4a23      	ldr	r2, [pc, #140]	; (800bcc8 <can_tx_rx+0x240>)
 800bc3c:	79d2      	ldrb	r2, [r2, #7]
 800bc3e:	2aff      	cmp	r2, #255	; 0xff
 800bc40:	bf0c      	ite	eq
 800bc42:	2201      	moveq	r2, #1
 800bc44:	2200      	movne	r2, #0
 800bc46:	b2d2      	uxtb	r2, r2
 800bc48:	4013      	ands	r3, r2
 800bc4a:	4a1f      	ldr	r2, [pc, #124]	; (800bcc8 <can_tx_rx+0x240>)
 800bc4c:	7a12      	ldrb	r2, [r2, #8]
 800bc4e:	2afe      	cmp	r2, #254	; 0xfe
 800bc50:	bf0c      	ite	eq
 800bc52:	2201      	moveq	r2, #1
 800bc54:	2200      	movne	r2, #0
 800bc56:	b2d2      	uxtb	r2, r2
 800bc58:	4013      	ands	r3, r2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <can_tx_rx+0x1e0>
			  update_fsm(&state, ZERO_CMD);
 800bc5e:	217a      	movs	r1, #122	; 0x7a
 800bc60:	481a      	ldr	r0, [pc, #104]	; (800bccc <can_tx_rx+0x244>)
 800bc62:	f7fd fde9 	bl	8009838 <update_fsm>
}
 800bc66:	e017      	b.n	800bc98 <can_tx_rx+0x210>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 800bc68:	4e17      	ldr	r6, [pc, #92]	; (800bcc8 <can_tx_rx+0x240>)
 800bc6a:	4b19      	ldr	r3, [pc, #100]	; (800bcd0 <can_tx_rx+0x248>)
 800bc6c:	9310      	str	r3, [sp, #64]	; 0x40
 800bc6e:	466d      	mov	r5, sp
 800bc70:	f106 0410 	add.w	r4, r6, #16
 800bc74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bc84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800bc88:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800bc8c:	f7fc f902 	bl	8007e94 <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 800bc90:	4b09      	ldr	r3, [pc, #36]	; (800bcb8 <can_tx_rx+0x230>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bca0:	20009385 	.word	0x20009385
 800bca4:	20009390 	.word	0x20009390
 800bca8:	20000328 	.word	0x20000328
 800bcac:	20008f5c 	.word	0x20008f5c
 800bcb0:	20000350 	.word	0x20000350
 800bcb4:	20000658 	.word	0x20000658
 800bcb8:	20000758 	.word	0x20000758
 800bcbc:	2000935c 	.word	0x2000935c
 800bcc0:	2000935d 	.word	0x2000935d
 800bcc4:	20009364 	.word	0x20009364
 800bcc8:	20009384 	.word	0x20009384
 800bccc:	20000634 	.word	0x20000634
 800bcd0:	20000824 	.word	0x20000824

0800bcd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
	return 1;
 800bcd8:	2301      	movs	r3, #1
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <_kill>:

int _kill(int pid, int sig)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bcee:	f7f4 fe91 	bl	8000a14 <__errno>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2216      	movs	r2, #22
 800bcf6:	601a      	str	r2, [r3, #0]
	return -1;
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <_exit>:

void _exit (int status)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bd0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7ff ffe7 	bl	800bce4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bd16:	e7fe      	b.n	800bd16 <_exit+0x12>

0800bd18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd24:	2300      	movs	r3, #0
 800bd26:	617b      	str	r3, [r7, #20]
 800bd28:	e00a      	b.n	800bd40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bd2a:	f3af 8000 	nop.w
 800bd2e:	4601      	mov	r1, r0
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	60ba      	str	r2, [r7, #8]
 800bd36:	b2ca      	uxtb	r2, r1
 800bd38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	dbf0      	blt.n	800bd2a <_read+0x12>
	}

return len;
 800bd48:	687b      	ldr	r3, [r7, #4]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b086      	sub	sp, #24
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	617b      	str	r3, [r7, #20]
 800bd62:	e009      	b.n	800bd78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	60ba      	str	r2, [r7, #8]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 fa17 	bl	800c1a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	3301      	adds	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	dbf1      	blt.n	800bd64 <_write+0x12>
	}
	return len;
 800bd80:	687b      	ldr	r3, [r7, #4]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <_close>:

int _close(int file)
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b083      	sub	sp, #12
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
	return -1;
 800bd92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bdb2:	605a      	str	r2, [r3, #4]
	return 0;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <_isatty>:

int _isatty(int file)
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b083      	sub	sp, #12
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
	return 1;
 800bdca:	2301      	movs	r3, #1
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
	return 0;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bdfc:	4b11      	ldr	r3, [pc, #68]	; (800be44 <_sbrk+0x50>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d102      	bne.n	800be0a <_sbrk+0x16>
		heap_end = &end;
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <_sbrk+0x50>)
 800be06:	4a10      	ldr	r2, [pc, #64]	; (800be48 <_sbrk+0x54>)
 800be08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800be0a:	4b0e      	ldr	r3, [pc, #56]	; (800be44 <_sbrk+0x50>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800be10:	4b0c      	ldr	r3, [pc, #48]	; (800be44 <_sbrk+0x50>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4413      	add	r3, r2
 800be18:	466a      	mov	r2, sp
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d907      	bls.n	800be2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800be1e:	f7f4 fdf9 	bl	8000a14 <__errno>
 800be22:	4603      	mov	r3, r0
 800be24:	220c      	movs	r2, #12
 800be26:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800be28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be2c:	e006      	b.n	800be3c <_sbrk+0x48>
	}

	heap_end += incr;
 800be2e:	4b05      	ldr	r3, [pc, #20]	; (800be44 <_sbrk+0x50>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4413      	add	r3, r2
 800be36:	4a03      	ldr	r2, [pc, #12]	; (800be44 <_sbrk+0x50>)
 800be38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800be3a:	68fb      	ldr	r3, [r7, #12]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	2000024c 	.word	0x2000024c
 800be48:	20009548 	.word	0x20009548

0800be4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800be4c:	b480      	push	{r7}
 800be4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800be50:	4b08      	ldr	r3, [pc, #32]	; (800be74 <SystemInit+0x28>)
 800be52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be56:	4a07      	ldr	r2, [pc, #28]	; (800be74 <SystemInit+0x28>)
 800be58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800be60:	4b04      	ldr	r3, [pc, #16]	; (800be74 <SystemInit+0x28>)
 800be62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800be66:	609a      	str	r2, [r3, #8]
#endif
}
 800be68:	bf00      	nop
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	e000ed00 	.word	0xe000ed00

0800be78 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b096      	sub	sp, #88	; 0x58
 800be7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	605a      	str	r2, [r3, #4]
 800be88:	609a      	str	r2, [r3, #8]
 800be8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800be8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800be96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	605a      	str	r2, [r3, #4]
 800bea0:	609a      	str	r2, [r3, #8]
 800bea2:	60da      	str	r2, [r3, #12]
 800bea4:	611a      	str	r2, [r3, #16]
 800bea6:	615a      	str	r2, [r3, #20]
 800bea8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800beaa:	1d3b      	adds	r3, r7, #4
 800beac:	2220      	movs	r2, #32
 800beae:	2100      	movs	r1, #0
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7f4 fe73 	bl	8000b9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800beb6:	4b4a      	ldr	r3, [pc, #296]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800beb8:	4a4a      	ldr	r2, [pc, #296]	; (800bfe4 <MX_TIM1_Init+0x16c>)
 800beba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800bebc:	4b48      	ldr	r3, [pc, #288]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800bec2:	4b47      	ldr	r3, [pc, #284]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bec4:	2220      	movs	r2, #32
 800bec6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 800bec8:	4b45      	ldr	r3, [pc, #276]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800beca:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800bece:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bed0:	4b43      	ldr	r3, [pc, #268]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800bed6:	4b42      	ldr	r3, [pc, #264]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bed8:	2201      	movs	r2, #1
 800beda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bedc:	4b40      	ldr	r3, [pc, #256]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bede:	2280      	movs	r2, #128	; 0x80
 800bee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800bee2:	483f      	ldr	r0, [pc, #252]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bee4:	f003 f8aa 	bl	800f03c <HAL_TIM_Base_Init>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800beee:	f7fe fdab 	bl	800aa48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800bef8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800befc:	4619      	mov	r1, r3
 800befe:	4838      	ldr	r0, [pc, #224]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bf00:	f003 fc44 	bl	800f78c <HAL_TIM_ConfigClockSource>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800bf0a:	f7fe fd9d 	bl	800aa48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800bf0e:	4834      	ldr	r0, [pc, #208]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bf10:	f003 f954 	bl	800f1bc <HAL_TIM_PWM_Init>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800bf1a:	f7fe fd95 	bl	800aa48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf22:	2300      	movs	r3, #0
 800bf24:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800bf26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	482c      	ldr	r0, [pc, #176]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bf2e:	f004 f833 	bl	800ff98 <HAL_TIMEx_MasterConfigSynchronization>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800bf38:	f7fe fd86 	bl	800aa48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bf3c:	2360      	movs	r3, #96	; 0x60
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800bf44:	2302      	movs	r3, #2
 800bf46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800bf4c:	2304      	movs	r3, #4
 800bf4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800bf50:	2300      	movs	r3, #0
 800bf52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800bf54:	2300      	movs	r3, #0
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bf58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4619      	mov	r1, r3
 800bf60:	481f      	ldr	r0, [pc, #124]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bf62:	f003 fb55 	bl	800f610 <HAL_TIM_PWM_ConfigChannel>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800bf6c:	f7fe fd6c 	bl	800aa48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bf70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf74:	2204      	movs	r2, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4819      	ldr	r0, [pc, #100]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bf7a:	f003 fb49 	bl	800f610 <HAL_TIM_PWM_ConfigChannel>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800bf84:	f7fe fd60 	bl	800aa48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800bf88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf8c:	2208      	movs	r2, #8
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4813      	ldr	r0, [pc, #76]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bf92:	f003 fb3d 	bl	800f610 <HAL_TIM_PWM_ConfigChannel>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800bf9c:	f7fe fd54 	bl	800aa48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800bfb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800bfbe:	1d3b      	adds	r3, r7, #4
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4807      	ldr	r0, [pc, #28]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bfc4:	f004 f864 	bl	8010090 <HAL_TIMEx_ConfigBreakDeadTime>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800bfce:	f7fe fd3b 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800bfd2:	4803      	ldr	r0, [pc, #12]	; (800bfe0 <MX_TIM1_Init+0x168>)
 800bfd4:	f000 f830 	bl	800c038 <HAL_TIM_MspPostInit>

}
 800bfd8:	bf00      	nop
 800bfda:	3758      	adds	r7, #88	; 0x58
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	200094b0 	.word	0x200094b0
 800bfe4:	40010000 	.word	0x40010000

0800bfe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a0e      	ldr	r2, [pc, #56]	; (800c030 <HAL_TIM_Base_MspInit+0x48>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d115      	bne.n	800c026 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <HAL_TIM_Base_MspInit+0x4c>)
 800c000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c002:	4a0c      	ldr	r2, [pc, #48]	; (800c034 <HAL_TIM_Base_MspInit+0x4c>)
 800c004:	f043 0301 	orr.w	r3, r3, #1
 800c008:	6453      	str	r3, [r2, #68]	; 0x44
 800c00a:	4b0a      	ldr	r3, [pc, #40]	; (800c034 <HAL_TIM_Base_MspInit+0x4c>)
 800c00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800c016:	2200      	movs	r2, #0
 800c018:	2100      	movs	r1, #0
 800c01a:	2019      	movs	r0, #25
 800c01c:	f001 fce7 	bl	800d9ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c020:	2019      	movs	r0, #25
 800c022:	f001 fd00 	bl	800da26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800c026:	bf00      	nop
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	40010000 	.word	0x40010000
 800c034:	40023800 	.word	0x40023800

0800c038 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c040:	f107 030c 	add.w	r3, r7, #12
 800c044:	2200      	movs	r2, #0
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	605a      	str	r2, [r3, #4]
 800c04a:	609a      	str	r2, [r3, #8]
 800c04c:	60da      	str	r2, [r3, #12]
 800c04e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a12      	ldr	r2, [pc, #72]	; (800c0a0 <HAL_TIM_MspPostInit+0x68>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d11e      	bne.n	800c098 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c05a:	2300      	movs	r3, #0
 800c05c:	60bb      	str	r3, [r7, #8]
 800c05e:	4b11      	ldr	r3, [pc, #68]	; (800c0a4 <HAL_TIM_MspPostInit+0x6c>)
 800c060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c062:	4a10      	ldr	r2, [pc, #64]	; (800c0a4 <HAL_TIM_MspPostInit+0x6c>)
 800c064:	f043 0301 	orr.w	r3, r3, #1
 800c068:	6313      	str	r3, [r2, #48]	; 0x30
 800c06a:	4b0e      	ldr	r3, [pc, #56]	; (800c0a4 <HAL_TIM_MspPostInit+0x6c>)
 800c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	60bb      	str	r3, [r7, #8]
 800c074:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800c076:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800c07a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c07c:	2302      	movs	r3, #2
 800c07e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c080:	2300      	movs	r3, #0
 800c082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c084:	2303      	movs	r3, #3
 800c086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c088:	2301      	movs	r3, #1
 800c08a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c08c:	f107 030c 	add.w	r3, r7, #12
 800c090:	4619      	mov	r1, r3
 800c092:	4805      	ldr	r0, [pc, #20]	; (800c0a8 <HAL_TIM_MspPostInit+0x70>)
 800c094:	f001 fd74 	bl	800db80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800c098:	bf00      	nop
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	40010000 	.word	0x40010000
 800c0a4:	40023800 	.word	0x40023800
 800c0a8:	40020000 	.word	0x40020000

0800c0ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c0b0:	4b11      	ldr	r3, [pc, #68]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0b2:	4a12      	ldr	r2, [pc, #72]	; (800c0fc <MX_USART2_UART_Init+0x50>)
 800c0b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800c0b6:	4b10      	ldr	r3, [pc, #64]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0b8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800c0bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c0be:	4b0e      	ldr	r3, [pc, #56]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c0c4:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c0d0:	4b09      	ldr	r3, [pc, #36]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0d2:	220c      	movs	r2, #12
 800c0d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c0d6:	4b08      	ldr	r3, [pc, #32]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c0e2:	4805      	ldr	r0, [pc, #20]	; (800c0f8 <MX_USART2_UART_Init+0x4c>)
 800c0e4:	f004 f83a 	bl	801015c <HAL_UART_Init>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800c0ee:	f7fe fcab 	bl	800aa48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c0f2:	bf00      	nop
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	200094f8 	.word	0x200094f8
 800c0fc:	40004400 	.word	0x40004400

0800c100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c108:	f107 0314 	add.w	r3, r7, #20
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	605a      	str	r2, [r3, #4]
 800c112:	609a      	str	r2, [r3, #8]
 800c114:	60da      	str	r2, [r3, #12]
 800c116:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a1d      	ldr	r2, [pc, #116]	; (800c194 <HAL_UART_MspInit+0x94>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d133      	bne.n	800c18a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c122:	2300      	movs	r3, #0
 800c124:	613b      	str	r3, [r7, #16]
 800c126:	4b1c      	ldr	r3, [pc, #112]	; (800c198 <HAL_UART_MspInit+0x98>)
 800c128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12a:	4a1b      	ldr	r2, [pc, #108]	; (800c198 <HAL_UART_MspInit+0x98>)
 800c12c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c130:	6413      	str	r3, [r2, #64]	; 0x40
 800c132:	4b19      	ldr	r3, [pc, #100]	; (800c198 <HAL_UART_MspInit+0x98>)
 800c134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	4b15      	ldr	r3, [pc, #84]	; (800c198 <HAL_UART_MspInit+0x98>)
 800c144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c146:	4a14      	ldr	r2, [pc, #80]	; (800c198 <HAL_UART_MspInit+0x98>)
 800c148:	f043 0301 	orr.w	r3, r3, #1
 800c14c:	6313      	str	r3, [r2, #48]	; 0x30
 800c14e:	4b12      	ldr	r3, [pc, #72]	; (800c198 <HAL_UART_MspInit+0x98>)
 800c150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800c15a:	230c      	movs	r3, #12
 800c15c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c15e:	2302      	movs	r3, #2
 800c160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c162:	2300      	movs	r3, #0
 800c164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c166:	2303      	movs	r3, #3
 800c168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c16a:	2307      	movs	r3, #7
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c16e:	f107 0314 	add.w	r3, r7, #20
 800c172:	4619      	mov	r1, r3
 800c174:	4809      	ldr	r0, [pc, #36]	; (800c19c <HAL_UART_MspInit+0x9c>)
 800c176:	f001 fd03 	bl	800db80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c17a:	2200      	movs	r2, #0
 800c17c:	2100      	movs	r1, #0
 800c17e:	2026      	movs	r0, #38	; 0x26
 800c180:	f001 fc35 	bl	800d9ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c184:	2026      	movs	r0, #38	; 0x26
 800c186:	f001 fc4e 	bl	800da26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c18a:	bf00      	nop
 800c18c:	3728      	adds	r7, #40	; 0x28
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	40004400 	.word	0x40004400
 800c198:	40023800 	.word	0x40023800
 800c19c:	40020000 	.word	0x40020000

0800c1a0 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 800c1a8:	1d39      	adds	r1, r7, #4
 800c1aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4803      	ldr	r0, [pc, #12]	; (800c1c0 <__io_putchar+0x20>)
 800c1b2:	f004 f820 	bl	80101f6 <HAL_UART_Transmit>
return 0;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	200094f8 	.word	0x200094f8

0800c1c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	4904      	ldr	r1, [pc, #16]	; (800c1e0 <HAL_UART_RxCpltCallback+0x1c>)
 800c1d0:	4804      	ldr	r0, [pc, #16]	; (800c1e4 <HAL_UART_RxCpltCallback+0x20>)
 800c1d2:	f004 f8a2 	bl	801031a <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000630 	.word	0x20000630
 800c1e4:	200094f8 	.word	0x200094f8

0800c1e8 <Reset_Handler>:
 800c1e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c220 <LoopFillZerobss+0x14>
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	e003      	b.n	800c1f8 <LoopCopyDataInit>

0800c1f0 <CopyDataInit>:
 800c1f0:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <LoopFillZerobss+0x18>)
 800c1f2:	585b      	ldr	r3, [r3, r1]
 800c1f4:	5043      	str	r3, [r0, r1]
 800c1f6:	3104      	adds	r1, #4

0800c1f8 <LoopCopyDataInit>:
 800c1f8:	480b      	ldr	r0, [pc, #44]	; (800c228 <LoopFillZerobss+0x1c>)
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <LoopFillZerobss+0x20>)
 800c1fc:	1842      	adds	r2, r0, r1
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d3f6      	bcc.n	800c1f0 <CopyDataInit>
 800c202:	4a0b      	ldr	r2, [pc, #44]	; (800c230 <LoopFillZerobss+0x24>)
 800c204:	e002      	b.n	800c20c <LoopFillZerobss>

0800c206 <FillZerobss>:
 800c206:	2300      	movs	r3, #0
 800c208:	f842 3b04 	str.w	r3, [r2], #4

0800c20c <LoopFillZerobss>:
 800c20c:	4b09      	ldr	r3, [pc, #36]	; (800c234 <LoopFillZerobss+0x28>)
 800c20e:	429a      	cmp	r2, r3
 800c210:	d3f9      	bcc.n	800c206 <FillZerobss>
 800c212:	f7ff fe1b 	bl	800be4c <SystemInit>
 800c216:	f7f4 fc03 	bl	8000a20 <__libc_init_array>
 800c21a:	f7fe f8bf 	bl	800a39c <main>
 800c21e:	4770      	bx	lr
 800c220:	20020000 	.word	0x20020000
 800c224:	08012440 	.word	0x08012440
 800c228:	20000000 	.word	0x20000000
 800c22c:	20000224 	.word	0x20000224
 800c230:	20000228 	.word	0x20000228
 800c234:	20009544 	.word	0x20009544

0800c238 <ADC_IRQHandler>:
 800c238:	e7fe      	b.n	800c238 <ADC_IRQHandler>
	...

0800c23c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c240:	4b0e      	ldr	r3, [pc, #56]	; (800c27c <HAL_Init+0x40>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a0d      	ldr	r2, [pc, #52]	; (800c27c <HAL_Init+0x40>)
 800c246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c24a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c24c:	4b0b      	ldr	r3, [pc, #44]	; (800c27c <HAL_Init+0x40>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0a      	ldr	r2, [pc, #40]	; (800c27c <HAL_Init+0x40>)
 800c252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c258:	4b08      	ldr	r3, [pc, #32]	; (800c27c <HAL_Init+0x40>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a07      	ldr	r2, [pc, #28]	; (800c27c <HAL_Init+0x40>)
 800c25e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c264:	2003      	movs	r0, #3
 800c266:	f001 fbb7 	bl	800d9d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c26a:	2000      	movs	r0, #0
 800c26c:	f000 f808 	bl	800c280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c270:	f7ff fa4e 	bl	800b710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	40023c00 	.word	0x40023c00

0800c280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c288:	4b12      	ldr	r3, [pc, #72]	; (800c2d4 <HAL_InitTick+0x54>)
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	4b12      	ldr	r3, [pc, #72]	; (800c2d8 <HAL_InitTick+0x58>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	4619      	mov	r1, r3
 800c292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c296:	fbb3 f3f1 	udiv	r3, r3, r1
 800c29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f001 fbcf 	bl	800da42 <HAL_SYSTICK_Config>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e00e      	b.n	800c2cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b0f      	cmp	r3, #15
 800c2b2:	d80a      	bhi.n	800c2ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2bc:	f001 fb97 	bl	800d9ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c2c0:	4a06      	ldr	r2, [pc, #24]	; (800c2dc <HAL_InitTick+0x5c>)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e000      	b.n	800c2cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20000218 	.word	0x20000218
 800c2d8:	20000220 	.word	0x20000220
 800c2dc:	2000021c 	.word	0x2000021c

0800c2e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c2e4:	4b06      	ldr	r3, [pc, #24]	; (800c300 <HAL_IncTick+0x20>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4b06      	ldr	r3, [pc, #24]	; (800c304 <HAL_IncTick+0x24>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	4a04      	ldr	r2, [pc, #16]	; (800c304 <HAL_IncTick+0x24>)
 800c2f2:	6013      	str	r3, [r2, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	20000220 	.word	0x20000220
 800c304:	2000953c 	.word	0x2000953c

0800c308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c308:	b480      	push	{r7}
 800c30a:	af00      	add	r7, sp, #0
  return uwTick;
 800c30c:	4b03      	ldr	r3, [pc, #12]	; (800c31c <HAL_GetTick+0x14>)
 800c30e:	681b      	ldr	r3, [r3, #0]
}
 800c310:	4618      	mov	r0, r3
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	2000953c 	.word	0x2000953c

0800c320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c328:	f7ff ffee 	bl	800c308 <HAL_GetTick>
 800c32c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c338:	d005      	beq.n	800c346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c33a:	4b0a      	ldr	r3, [pc, #40]	; (800c364 <HAL_Delay+0x44>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4413      	add	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c346:	bf00      	nop
 800c348:	f7ff ffde 	bl	800c308 <HAL_GetTick>
 800c34c:	4602      	mov	r2, r0
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	429a      	cmp	r2, r3
 800c356:	d8f7      	bhi.n	800c348 <HAL_Delay+0x28>
  {
  }
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	20000220 	.word	0x20000220

0800c368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e033      	b.n	800c3e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	d109      	bne.n	800c39a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7fa ffcc 	bl	8007324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39e:	f003 0310 	and.w	r3, r3, #16
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d118      	bne.n	800c3d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c3ae:	f023 0302 	bic.w	r3, r3, #2
 800c3b2:	f043 0202 	orr.w	r2, r3, #2
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fab4 	bl	800c928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ca:	f023 0303 	bic.w	r3, r3, #3
 800c3ce:	f043 0201 	orr.w	r2, r3, #1
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	641a      	str	r2, [r3, #64]	; 0x40
 800c3d6:	e001      	b.n	800c3dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
	...

0800c3f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c402:	2b01      	cmp	r3, #1
 800c404:	d101      	bne.n	800c40a <HAL_ADC_Start+0x1a>
 800c406:	2302      	movs	r3, #2
 800c408:	e0b2      	b.n	800c570 <HAL_ADC_Start+0x180>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d018      	beq.n	800c452 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f042 0201 	orr.w	r2, r2, #1
 800c42e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c430:	4b52      	ldr	r3, [pc, #328]	; (800c57c <HAL_ADC_Start+0x18c>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a52      	ldr	r2, [pc, #328]	; (800c580 <HAL_ADC_Start+0x190>)
 800c436:	fba2 2303 	umull	r2, r3, r2, r3
 800c43a:	0c9a      	lsrs	r2, r3, #18
 800c43c:	4613      	mov	r3, r2
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	4413      	add	r3, r2
 800c442:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c444:	e002      	b.n	800c44c <HAL_ADC_Start+0x5c>
    {
      counter--;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	3b01      	subs	r3, #1
 800c44a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1f9      	bne.n	800c446 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d17a      	bne.n	800c556 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c464:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c468:	f023 0301 	bic.w	r3, r3, #1
 800c46c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d007      	beq.n	800c492 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c486:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c48a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c49e:	d106      	bne.n	800c4ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a4:	f023 0206 	bic.w	r2, r3, #6
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	645a      	str	r2, [r3, #68]	; 0x44
 800c4ac:	e002      	b.n	800c4b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c4bc:	4b31      	ldr	r3, [pc, #196]	; (800c584 <HAL_ADC_Start+0x194>)
 800c4be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c4c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f003 031f 	and.w	r3, r3, #31
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d12a      	bne.n	800c52c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a2b      	ldr	r2, [pc, #172]	; (800c588 <HAL_ADC_Start+0x198>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d015      	beq.n	800c50c <HAL_ADC_Start+0x11c>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a29      	ldr	r2, [pc, #164]	; (800c58c <HAL_ADC_Start+0x19c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d105      	bne.n	800c4f6 <HAL_ADC_Start+0x106>
 800c4ea:	4b26      	ldr	r3, [pc, #152]	; (800c584 <HAL_ADC_Start+0x194>)
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f003 031f 	and.w	r3, r3, #31
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00a      	beq.n	800c50c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a25      	ldr	r2, [pc, #148]	; (800c590 <HAL_ADC_Start+0x1a0>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d136      	bne.n	800c56e <HAL_ADC_Start+0x17e>
 800c500:	4b20      	ldr	r3, [pc, #128]	; (800c584 <HAL_ADC_Start+0x194>)
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	f003 0310 	and.w	r3, r3, #16
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d130      	bne.n	800c56e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c516:	2b00      	cmp	r3, #0
 800c518:	d129      	bne.n	800c56e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c528:	609a      	str	r2, [r3, #8]
 800c52a:	e020      	b.n	800c56e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a15      	ldr	r2, [pc, #84]	; (800c588 <HAL_ADC_Start+0x198>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d11b      	bne.n	800c56e <HAL_ADC_Start+0x17e>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c540:	2b00      	cmp	r3, #0
 800c542:	d114      	bne.n	800c56e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689a      	ldr	r2, [r3, #8]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c552:	609a      	str	r2, [r3, #8]
 800c554:	e00b      	b.n	800c56e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55a:	f043 0210 	orr.w	r2, r3, #16
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c566:	f043 0201 	orr.w	r2, r3, #1
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	20000218 	.word	0x20000218
 800c580:	431bde83 	.word	0x431bde83
 800c584:	40012300 	.word	0x40012300
 800c588:	40012000 	.word	0x40012000
 800c58c:	40012100 	.word	0x40012100
 800c590:	40012200 	.word	0x40012200

0800c594 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5b0:	d113      	bne.n	800c5da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5c0:	d10b      	bne.n	800c5da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	f043 0220 	orr.w	r2, r3, #32
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e063      	b.n	800c6a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800c5da:	f7ff fe95 	bl	800c308 <HAL_GetTick>
 800c5de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c5e0:	e021      	b.n	800c626 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e8:	d01d      	beq.n	800c626 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d007      	beq.n	800c600 <HAL_ADC_PollForConversion+0x6c>
 800c5f0:	f7ff fe8a 	bl	800c308 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d212      	bcs.n	800c626 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d00b      	beq.n	800c626 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c612:	f043 0204 	orr.w	r2, r3, #4
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800c622:	2303      	movs	r3, #3
 800c624:	e03d      	b.n	800c6a2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 0302 	and.w	r3, r3, #2
 800c630:	2b02      	cmp	r3, #2
 800c632:	d1d6      	bne.n	800c5e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f06f 0212 	mvn.w	r2, #18
 800c63c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c642:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d123      	bne.n	800c6a0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d11f      	bne.n	800c6a0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c666:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d006      	beq.n	800c67c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d111      	bne.n	800c6a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c680:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d105      	bne.n	800c6a0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c698:	f043 0201 	orr.w	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d101      	bne.n	800c6e0 <HAL_ADC_ConfigChannel+0x1c>
 800c6dc:	2302      	movs	r3, #2
 800c6de:	e113      	b.n	800c908 <HAL_ADC_ConfigChannel+0x244>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b09      	cmp	r3, #9
 800c6ee:	d925      	bls.n	800c73c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68d9      	ldr	r1, [r3, #12]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	4613      	mov	r3, r2
 800c700:	005b      	lsls	r3, r3, #1
 800c702:	4413      	add	r3, r2
 800c704:	3b1e      	subs	r3, #30
 800c706:	2207      	movs	r2, #7
 800c708:	fa02 f303 	lsl.w	r3, r2, r3
 800c70c:	43da      	mvns	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	400a      	ands	r2, r1
 800c714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68d9      	ldr	r1, [r3, #12]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	689a      	ldr	r2, [r3, #8]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	b29b      	uxth	r3, r3
 800c726:	4618      	mov	r0, r3
 800c728:	4603      	mov	r3, r0
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	4403      	add	r3, r0
 800c72e:	3b1e      	subs	r3, #30
 800c730:	409a      	lsls	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	60da      	str	r2, [r3, #12]
 800c73a:	e022      	b.n	800c782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6919      	ldr	r1, [r3, #16]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	b29b      	uxth	r3, r3
 800c748:	461a      	mov	r2, r3
 800c74a:	4613      	mov	r3, r2
 800c74c:	005b      	lsls	r3, r3, #1
 800c74e:	4413      	add	r3, r2
 800c750:	2207      	movs	r2, #7
 800c752:	fa02 f303 	lsl.w	r3, r2, r3
 800c756:	43da      	mvns	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	400a      	ands	r2, r1
 800c75e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6919      	ldr	r1, [r3, #16]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	4618      	mov	r0, r3
 800c772:	4603      	mov	r3, r0
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	4403      	add	r3, r0
 800c778:	409a      	lsls	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	430a      	orrs	r2, r1
 800c780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	2b06      	cmp	r3, #6
 800c788:	d824      	bhi.n	800c7d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	3b05      	subs	r3, #5
 800c79c:	221f      	movs	r2, #31
 800c79e:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a2:	43da      	mvns	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	400a      	ands	r2, r1
 800c7aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	3b05      	subs	r3, #5
 800c7c6:	fa00 f203 	lsl.w	r2, r0, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	635a      	str	r2, [r3, #52]	; 0x34
 800c7d2:	e04c      	b.n	800c86e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	2b0c      	cmp	r3, #12
 800c7da:	d824      	bhi.n	800c826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	3b23      	subs	r3, #35	; 0x23
 800c7ee:	221f      	movs	r2, #31
 800c7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f4:	43da      	mvns	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	400a      	ands	r2, r1
 800c7fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	4618      	mov	r0, r3
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	4613      	mov	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	3b23      	subs	r3, #35	; 0x23
 800c818:	fa00 f203 	lsl.w	r2, r0, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	430a      	orrs	r2, r1
 800c822:	631a      	str	r2, [r3, #48]	; 0x30
 800c824:	e023      	b.n	800c86e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	4613      	mov	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	3b41      	subs	r3, #65	; 0x41
 800c838:	221f      	movs	r2, #31
 800c83a:	fa02 f303 	lsl.w	r3, r2, r3
 800c83e:	43da      	mvns	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	400a      	ands	r2, r1
 800c846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	b29b      	uxth	r3, r3
 800c854:	4618      	mov	r0, r3
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	3b41      	subs	r3, #65	; 0x41
 800c862:	fa00 f203 	lsl.w	r2, r0, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	430a      	orrs	r2, r1
 800c86c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c86e:	4b29      	ldr	r3, [pc, #164]	; (800c914 <HAL_ADC_ConfigChannel+0x250>)
 800c870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a28      	ldr	r2, [pc, #160]	; (800c918 <HAL_ADC_ConfigChannel+0x254>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d10f      	bne.n	800c89c <HAL_ADC_ConfigChannel+0x1d8>
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b12      	cmp	r3, #18
 800c882:	d10b      	bne.n	800c89c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a1d      	ldr	r2, [pc, #116]	; (800c918 <HAL_ADC_ConfigChannel+0x254>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d12b      	bne.n	800c8fe <HAL_ADC_ConfigChannel+0x23a>
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a1c      	ldr	r2, [pc, #112]	; (800c91c <HAL_ADC_ConfigChannel+0x258>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d003      	beq.n	800c8b8 <HAL_ADC_ConfigChannel+0x1f4>
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b11      	cmp	r3, #17
 800c8b6:	d122      	bne.n	800c8fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a11      	ldr	r2, [pc, #68]	; (800c91c <HAL_ADC_ConfigChannel+0x258>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d111      	bne.n	800c8fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c8da:	4b11      	ldr	r3, [pc, #68]	; (800c920 <HAL_ADC_ConfigChannel+0x25c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a11      	ldr	r2, [pc, #68]	; (800c924 <HAL_ADC_ConfigChannel+0x260>)
 800c8e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8e4:	0c9a      	lsrs	r2, r3, #18
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c8f0:	e002      	b.n	800c8f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1f9      	bne.n	800c8f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	40012300 	.word	0x40012300
 800c918:	40012000 	.word	0x40012000
 800c91c:	10000012 	.word	0x10000012
 800c920:	20000218 	.word	0x20000218
 800c924:	431bde83 	.word	0x431bde83

0800c928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c930:	4b79      	ldr	r3, [pc, #484]	; (800cb18 <ADC_Init+0x1f0>)
 800c932:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	431a      	orrs	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c95c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6859      	ldr	r1, [r3, #4]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	021a      	lsls	r2, r3, #8
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	430a      	orrs	r2, r1
 800c970:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6859      	ldr	r1, [r3, #4]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689a      	ldr	r2, [r3, #8]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	430a      	orrs	r2, r1
 800c992:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	689a      	ldr	r2, [r3, #8]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6899      	ldr	r1, [r3, #8]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68da      	ldr	r2, [r3, #12]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ba:	4a58      	ldr	r2, [pc, #352]	; (800cb1c <ADC_Init+0x1f4>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d022      	beq.n	800ca06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	689a      	ldr	r2, [r3, #8]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c9ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6899      	ldr	r1, [r3, #8]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	689a      	ldr	r2, [r3, #8]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c9f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	6899      	ldr	r1, [r3, #8]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	430a      	orrs	r2, r1
 800ca02:	609a      	str	r2, [r3, #8]
 800ca04:	e00f      	b.n	800ca26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689a      	ldr	r2, [r3, #8]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ca14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ca24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689a      	ldr	r2, [r3, #8]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f022 0202 	bic.w	r2, r2, #2
 800ca34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6899      	ldr	r1, [r3, #8]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	7e1b      	ldrb	r3, [r3, #24]
 800ca40:	005a      	lsls	r2, r3, #1
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	430a      	orrs	r2, r1
 800ca48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d01b      	beq.n	800ca8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ca72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	6859      	ldr	r1, [r3, #4]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	035a      	lsls	r2, r3, #13
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	430a      	orrs	r2, r1
 800ca88:	605a      	str	r2, [r3, #4]
 800ca8a:	e007      	b.n	800ca9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800caaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	051a      	lsls	r2, r3, #20
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	430a      	orrs	r2, r1
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689a      	ldr	r2, [r3, #8]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	6899      	ldr	r1, [r3, #8]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cade:	025a      	lsls	r2, r3, #9
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	430a      	orrs	r2, r1
 800cae6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	689a      	ldr	r2, [r3, #8]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6899      	ldr	r1, [r3, #8]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	029a      	lsls	r2, r3, #10
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	609a      	str	r2, [r3, #8]
}
 800cb0c:	bf00      	nop
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	40012300 	.word	0x40012300
 800cb1c:	0f000001 	.word	0x0f000001

0800cb20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d101      	bne.n	800cb38 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800cb34:	2302      	movs	r3, #2
 800cb36:	e031      	b.n	800cb9c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cb40:	4b19      	ldr	r3, [pc, #100]	; (800cba8 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	f023 021f 	bic.w	r2, r3, #31
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	685a      	ldr	r2, [r3, #4]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	431a      	orrs	r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	431a      	orrs	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	40012300 	.word	0x40012300

0800cbac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e0ed      	b.n	800cd9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d102      	bne.n	800cbd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7fb f852 	bl	8007c74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f022 0202 	bic.w	r2, r2, #2
 800cbde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cbe0:	f7ff fb92 	bl	800c308 <HAL_GetTick>
 800cbe4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cbe6:	e012      	b.n	800cc0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cbe8:	f7ff fb8e 	bl	800c308 <HAL_GetTick>
 800cbec:	4602      	mov	r2, r0
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	2b0a      	cmp	r3, #10
 800cbf4:	d90b      	bls.n	800cc0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2205      	movs	r2, #5
 800cc06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e0c5      	b.n	800cd9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	f003 0302 	and.w	r3, r3, #2
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1e5      	bne.n	800cbe8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f042 0201 	orr.w	r2, r2, #1
 800cc2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc2c:	f7ff fb6c 	bl	800c308 <HAL_GetTick>
 800cc30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cc32:	e012      	b.n	800cc5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cc34:	f7ff fb68 	bl	800c308 <HAL_GetTick>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	2b0a      	cmp	r3, #10
 800cc40:	d90b      	bls.n	800cc5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2205      	movs	r2, #5
 800cc52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e09f      	b.n	800cd9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0e5      	beq.n	800cc34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	7e1b      	ldrb	r3, [r3, #24]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d108      	bne.n	800cc82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cc7e:	601a      	str	r2, [r3, #0]
 800cc80:	e007      	b.n	800cc92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	7e5b      	ldrb	r3, [r3, #25]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d108      	bne.n	800ccac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	e007      	b.n	800ccbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	7e9b      	ldrb	r3, [r3, #26]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d108      	bne.n	800ccd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f042 0220 	orr.w	r2, r2, #32
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e007      	b.n	800cce6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f022 0220 	bic.w	r2, r2, #32
 800cce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7edb      	ldrb	r3, [r3, #27]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d108      	bne.n	800cd00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f022 0210 	bic.w	r2, r2, #16
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	e007      	b.n	800cd10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f042 0210 	orr.w	r2, r2, #16
 800cd0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	7f1b      	ldrb	r3, [r3, #28]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d108      	bne.n	800cd2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f042 0208 	orr.w	r2, r2, #8
 800cd26:	601a      	str	r2, [r3, #0]
 800cd28:	e007      	b.n	800cd3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f022 0208 	bic.w	r2, r2, #8
 800cd38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	7f5b      	ldrb	r3, [r3, #29]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d108      	bne.n	800cd54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f042 0204 	orr.w	r2, r2, #4
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	e007      	b.n	800cd64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f022 0204 	bic.w	r2, r2, #4
 800cd62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689a      	ldr	r2, [r3, #8]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	431a      	orrs	r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	431a      	orrs	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	ea42 0103 	orr.w	r1, r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	1e5a      	subs	r2, r3, #1
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	430a      	orrs	r2, r1
 800cd88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b087      	sub	sp, #28
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cdba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800cdbc:	7cfb      	ldrb	r3, [r7, #19]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d003      	beq.n	800cdca <HAL_CAN_ConfigFilter+0x26>
 800cdc2:	7cfb      	ldrb	r3, [r7, #19]
 800cdc4:	2b02      	cmp	r3, #2
 800cdc6:	f040 80be 	bne.w	800cf46 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800cdca:	4b65      	ldr	r3, [pc, #404]	; (800cf60 <HAL_CAN_ConfigFilter+0x1bc>)
 800cdcc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cdd4:	f043 0201 	orr.w	r2, r3, #1
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cde4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf8:	021b      	lsls	r3, r3, #8
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	f003 031f 	and.w	r3, r3, #31
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	43db      	mvns	r3, r3
 800ce1c:	401a      	ands	r2, r3
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	69db      	ldr	r3, [r3, #28]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d123      	bne.n	800ce74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	43db      	mvns	r3, r3
 800ce36:	401a      	ands	r2, r3
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ce4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	3248      	adds	r2, #72	; 0x48
 800ce54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ce68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ce6a:	6979      	ldr	r1, [r7, #20]
 800ce6c:	3348      	adds	r3, #72	; 0x48
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	440b      	add	r3, r1
 800ce72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	69db      	ldr	r3, [r3, #28]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d122      	bne.n	800cec2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	431a      	orrs	r2, r3
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ce9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	3248      	adds	r2, #72	; 0x48
 800cea2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ceb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ceb8:	6979      	ldr	r1, [r7, #20]
 800ceba:	3348      	adds	r3, #72	; 0x48
 800cebc:	00db      	lsls	r3, r3, #3
 800cebe:	440b      	add	r3, r1
 800cec0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d109      	bne.n	800cede <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	43db      	mvns	r3, r3
 800ced4:	401a      	ands	r2, r3
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cedc:	e007      	b.n	800ceee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	431a      	orrs	r2, r3
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d109      	bne.n	800cf0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	43db      	mvns	r3, r3
 800cf00:	401a      	ands	r2, r3
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800cf08:	e007      	b.n	800cf1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	431a      	orrs	r2, r3
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d107      	bne.n	800cf32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cf38:	f023 0201 	bic.w	r2, r3, #1
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	e006      	b.n	800cf54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
  }
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	371c      	adds	r7, #28
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr
 800cf60:	40006400 	.word	0x40006400

0800cf64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d12e      	bne.n	800cfd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f022 0201 	bic.w	r2, r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cf90:	f7ff f9ba 	bl	800c308 <HAL_GetTick>
 800cf94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800cf96:	e012      	b.n	800cfbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cf98:	f7ff f9b6 	bl	800c308 <HAL_GetTick>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	2b0a      	cmp	r3, #10
 800cfa4:	d90b      	bls.n	800cfbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2205      	movs	r2, #5
 800cfb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e012      	b.n	800cfe4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1e5      	bne.n	800cf98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	e006      	b.n	800cfe4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800cfe2:	2301      	movs	r3, #1
  }
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b089      	sub	sp, #36	; 0x24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
 800cff8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d000:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800d00a:	7ffb      	ldrb	r3, [r7, #31]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d003      	beq.n	800d018 <HAL_CAN_AddTxMessage+0x2c>
 800d010:	7ffb      	ldrb	r3, [r7, #31]
 800d012:	2b02      	cmp	r3, #2
 800d014:	f040 80b8 	bne.w	800d188 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10a      	bne.n	800d038 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d105      	bne.n	800d038 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 80a0 	beq.w	800d178 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	0e1b      	lsrs	r3, r3, #24
 800d03c:	f003 0303 	and.w	r3, r3, #3
 800d040:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	2b02      	cmp	r3, #2
 800d046:	d907      	bls.n	800d058 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d054:	2301      	movs	r3, #1
 800d056:	e09e      	b.n	800d196 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800d058:	2201      	movs	r2, #1
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	409a      	lsls	r2, r3
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10d      	bne.n	800d086 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d074:	68f9      	ldr	r1, [r7, #12]
 800d076:	6809      	ldr	r1, [r1, #0]
 800d078:	431a      	orrs	r2, r3
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	3318      	adds	r3, #24
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	440b      	add	r3, r1
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	e00f      	b.n	800d0a6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d090:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d096:	68f9      	ldr	r1, [r7, #12]
 800d098:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800d09a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	3318      	adds	r3, #24
 800d0a0:	011b      	lsls	r3, r3, #4
 800d0a2:	440b      	add	r3, r1
 800d0a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6819      	ldr	r1, [r3, #0]
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	691a      	ldr	r2, [r3, #16]
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	3318      	adds	r3, #24
 800d0b2:	011b      	lsls	r3, r3, #4
 800d0b4:	440b      	add	r3, r1
 800d0b6:	3304      	adds	r3, #4
 800d0b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	7d1b      	ldrb	r3, [r3, #20]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d111      	bne.n	800d0e6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	3318      	adds	r3, #24
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	4413      	add	r3, r2
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	6811      	ldr	r1, [r2, #0]
 800d0d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	3318      	adds	r3, #24
 800d0de:	011b      	lsls	r3, r3, #4
 800d0e0:	440b      	add	r3, r1
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	3307      	adds	r3, #7
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	061a      	lsls	r2, r3, #24
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3306      	adds	r3, #6
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	041b      	lsls	r3, r3, #16
 800d0f6:	431a      	orrs	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3305      	adds	r3, #5
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	021b      	lsls	r3, r3, #8
 800d100:	4313      	orrs	r3, r2
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	3204      	adds	r2, #4
 800d106:	7812      	ldrb	r2, [r2, #0]
 800d108:	4610      	mov	r0, r2
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	6811      	ldr	r1, [r2, #0]
 800d10e:	ea43 0200 	orr.w	r2, r3, r0
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	011b      	lsls	r3, r3, #4
 800d116:	440b      	add	r3, r1
 800d118:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800d11c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3303      	adds	r3, #3
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	061a      	lsls	r2, r3, #24
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	3302      	adds	r3, #2
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	041b      	lsls	r3, r3, #16
 800d12e:	431a      	orrs	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3301      	adds	r3, #1
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	4313      	orrs	r3, r2
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	7812      	ldrb	r2, [r2, #0]
 800d13e:	4610      	mov	r0, r2
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	6811      	ldr	r1, [r2, #0]
 800d144:	ea43 0200 	orr.w	r2, r3, r0
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	011b      	lsls	r3, r3, #4
 800d14c:	440b      	add	r3, r1
 800d14e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800d152:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	3318      	adds	r3, #24
 800d15c:	011b      	lsls	r3, r3, #4
 800d15e:	4413      	add	r3, r2
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	6811      	ldr	r1, [r2, #0]
 800d166:	f043 0201 	orr.w	r2, r3, #1
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	3318      	adds	r3, #24
 800d16e:	011b      	lsls	r3, r3, #4
 800d170:	440b      	add	r3, r1
 800d172:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800d174:	2300      	movs	r3, #0
 800d176:	e00e      	b.n	800d196 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	e006      	b.n	800d196 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
  }
}
 800d196:	4618      	mov	r0, r3
 800d198:	3724      	adds	r7, #36	; 0x24
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	b087      	sub	sp, #28
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	607a      	str	r2, [r7, #4]
 800d1ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d003      	beq.n	800d1c6 <HAL_CAN_GetRxMessage+0x24>
 800d1be:	7dfb      	ldrb	r3, [r7, #23]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	f040 80f3 	bne.w	800d3ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10e      	bne.n	800d1ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d116      	bne.n	800d208 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e0e7      	b.n	800d3ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	f003 0303 	and.w	r3, r3, #3
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d107      	bne.n	800d208 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e0d8      	b.n	800d3ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	331b      	adds	r3, #27
 800d210:	011b      	lsls	r3, r3, #4
 800d212:	4413      	add	r3, r2
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0204 	and.w	r2, r3, #4
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10c      	bne.n	800d240 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	331b      	adds	r3, #27
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	4413      	add	r3, r2
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	0d5b      	lsrs	r3, r3, #21
 800d236:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	e00b      	b.n	800d258 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	331b      	adds	r3, #27
 800d248:	011b      	lsls	r3, r3, #4
 800d24a:	4413      	add	r3, r2
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	08db      	lsrs	r3, r3, #3
 800d250:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	331b      	adds	r3, #27
 800d260:	011b      	lsls	r3, r3, #4
 800d262:	4413      	add	r3, r2
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0202 	and.w	r2, r3, #2
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	331b      	adds	r3, #27
 800d276:	011b      	lsls	r3, r3, #4
 800d278:	4413      	add	r3, r2
 800d27a:	3304      	adds	r3, #4
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f003 020f 	and.w	r2, r3, #15
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	331b      	adds	r3, #27
 800d28e:	011b      	lsls	r3, r3, #4
 800d290:	4413      	add	r3, r2
 800d292:	3304      	adds	r3, #4
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	0a1b      	lsrs	r3, r3, #8
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	331b      	adds	r3, #27
 800d2a6:	011b      	lsls	r3, r3, #4
 800d2a8:	4413      	add	r3, r2
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	0c1b      	lsrs	r3, r3, #16
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	011b      	lsls	r3, r3, #4
 800d2be:	4413      	add	r3, r2
 800d2c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	011b      	lsls	r3, r3, #4
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	0a1a      	lsrs	r2, r3, #8
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	b2d2      	uxtb	r2, r2
 800d2e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	011b      	lsls	r3, r3, #4
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	0c1a      	lsrs	r2, r3, #16
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	3302      	adds	r3, #2
 800d2fc:	b2d2      	uxtb	r2, r2
 800d2fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	4413      	add	r3, r2
 800d30a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	0e1a      	lsrs	r2, r3, #24
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	3303      	adds	r3, #3
 800d316:	b2d2      	uxtb	r2, r2
 800d318:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	011b      	lsls	r3, r3, #4
 800d322:	4413      	add	r3, r2
 800d324:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	3304      	adds	r3, #4
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	4413      	add	r3, r2
 800d33c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	0a1a      	lsrs	r2, r3, #8
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	3305      	adds	r3, #5
 800d348:	b2d2      	uxtb	r2, r2
 800d34a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	011b      	lsls	r3, r3, #4
 800d354:	4413      	add	r3, r2
 800d356:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	0c1a      	lsrs	r2, r3, #16
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	3306      	adds	r3, #6
 800d362:	b2d2      	uxtb	r2, r2
 800d364:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	011b      	lsls	r3, r3, #4
 800d36e:	4413      	add	r3, r2
 800d370:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	0e1a      	lsrs	r2, r3, #24
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	3307      	adds	r3, #7
 800d37c:	b2d2      	uxtb	r2, r2
 800d37e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d108      	bne.n	800d398 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	68da      	ldr	r2, [r3, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f042 0220 	orr.w	r2, r2, #32
 800d394:	60da      	str	r2, [r3, #12]
 800d396:	e007      	b.n	800d3a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f042 0220 	orr.w	r2, r2, #32
 800d3a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e006      	b.n	800d3ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d3b8:	2301      	movs	r3, #1
  }
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	371c      	adds	r7, #28
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr

0800d3c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b08a      	sub	sp, #40	; 0x28
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800d402:	6a3b      	ldr	r3, [r7, #32]
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d07c      	beq.n	800d506 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	d023      	beq.n	800d45e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2201      	movs	r2, #1
 800d41c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	f003 0302 	and.w	r3, r3, #2
 800d424:	2b00      	cmp	r3, #0
 800d426:	d003      	beq.n	800d430 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f983 	bl	800d734 <HAL_CAN_TxMailbox0CompleteCallback>
 800d42e:	e016      	b.n	800d45e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	f003 0304 	and.w	r3, r3, #4
 800d436:	2b00      	cmp	r3, #0
 800d438:	d004      	beq.n	800d444 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d440:	627b      	str	r3, [r7, #36]	; 0x24
 800d442:	e00c      	b.n	800d45e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	f003 0308 	and.w	r3, r3, #8
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d004      	beq.n	800d458 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d454:	627b      	str	r3, [r7, #36]	; 0x24
 800d456:	e002      	b.n	800d45e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f989 	bl	800d770 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d464:	2b00      	cmp	r3, #0
 800d466:	d024      	beq.n	800d4b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d470:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 f963 	bl	800d748 <HAL_CAN_TxMailbox1CompleteCallback>
 800d482:	e016      	b.n	800d4b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d004      	beq.n	800d498 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
 800d496:	e00c      	b.n	800d4b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d004      	beq.n	800d4ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
 800d4aa:	e002      	b.n	800d4b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f969 	bl	800d784 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d024      	beq.n	800d506 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d4c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d003      	beq.n	800d4d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 f943 	bl	800d75c <HAL_CAN_TxMailbox2CompleteCallback>
 800d4d6:	e016      	b.n	800d506 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d004      	beq.n	800d4ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ea:	e00c      	b.n	800d506 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d004      	beq.n	800d500 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d4fe:	e002      	b.n	800d506 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f949 	bl	800d798 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	f003 0308 	and.w	r3, r3, #8
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00c      	beq.n	800d52a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	f003 0310 	and.w	r3, r3, #16
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d520:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2210      	movs	r2, #16
 800d528:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	f003 0304 	and.w	r3, r3, #4
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00b      	beq.n	800d54c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f003 0308 	and.w	r3, r3, #8
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d006      	beq.n	800d54c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2208      	movs	r2, #8
 800d544:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f93a 	bl	800d7c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	f003 0302 	and.w	r3, r3, #2
 800d552:	2b00      	cmp	r3, #0
 800d554:	d009      	beq.n	800d56a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	f003 0303 	and.w	r3, r3, #3
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f921 	bl	800d7ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00c      	beq.n	800d58e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	f003 0310 	and.w	r3, r3, #16
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d007      	beq.n	800d58e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d584:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2210      	movs	r2, #16
 800d58c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d58e:	6a3b      	ldr	r3, [r7, #32]
 800d590:	f003 0320 	and.w	r3, r3, #32
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00b      	beq.n	800d5b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	f003 0308 	and.w	r3, r3, #8
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d006      	beq.n	800d5b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2208      	movs	r2, #8
 800d5a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f91c 	bl	800d7e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d5b0:	6a3b      	ldr	r3, [r7, #32]
 800d5b2:	f003 0310 	and.w	r3, r3, #16
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d009      	beq.n	800d5ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	f003 0303 	and.w	r3, r3, #3
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f903 	bl	800d7d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00b      	beq.n	800d5f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	f003 0310 	and.w	r3, r3, #16
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d006      	beq.n	800d5f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2210      	movs	r2, #16
 800d5e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f906 	bl	800d7fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00b      	beq.n	800d612 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	f003 0308 	and.w	r3, r3, #8
 800d600:	2b00      	cmp	r3, #0
 800d602:	d006      	beq.n	800d612 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2208      	movs	r2, #8
 800d60a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f8ff 	bl	800d810 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d612:	6a3b      	ldr	r3, [r7, #32]
 800d614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d07b      	beq.n	800d714 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	f003 0304 	and.w	r3, r3, #4
 800d622:	2b00      	cmp	r3, #0
 800d624:	d072      	beq.n	800d70c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d626:	6a3b      	ldr	r3, [r7, #32]
 800d628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d008      	beq.n	800d642 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d636:	2b00      	cmp	r3, #0
 800d638:	d003      	beq.n	800d642 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	f043 0301 	orr.w	r3, r3, #1
 800d640:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d008      	beq.n	800d65e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d652:	2b00      	cmp	r3, #0
 800d654:	d003      	beq.n	800d65e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	f043 0302 	orr.w	r3, r3, #2
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d664:	2b00      	cmp	r3, #0
 800d666:	d008      	beq.n	800d67a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d003      	beq.n	800d67a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	f043 0304 	orr.w	r3, r3, #4
 800d678:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d67a:	6a3b      	ldr	r3, [r7, #32]
 800d67c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d680:	2b00      	cmp	r3, #0
 800d682:	d043      	beq.n	800d70c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d03e      	beq.n	800d70c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d694:	2b60      	cmp	r3, #96	; 0x60
 800d696:	d02b      	beq.n	800d6f0 <HAL_CAN_IRQHandler+0x32a>
 800d698:	2b60      	cmp	r3, #96	; 0x60
 800d69a:	d82e      	bhi.n	800d6fa <HAL_CAN_IRQHandler+0x334>
 800d69c:	2b50      	cmp	r3, #80	; 0x50
 800d69e:	d022      	beq.n	800d6e6 <HAL_CAN_IRQHandler+0x320>
 800d6a0:	2b50      	cmp	r3, #80	; 0x50
 800d6a2:	d82a      	bhi.n	800d6fa <HAL_CAN_IRQHandler+0x334>
 800d6a4:	2b40      	cmp	r3, #64	; 0x40
 800d6a6:	d019      	beq.n	800d6dc <HAL_CAN_IRQHandler+0x316>
 800d6a8:	2b40      	cmp	r3, #64	; 0x40
 800d6aa:	d826      	bhi.n	800d6fa <HAL_CAN_IRQHandler+0x334>
 800d6ac:	2b30      	cmp	r3, #48	; 0x30
 800d6ae:	d010      	beq.n	800d6d2 <HAL_CAN_IRQHandler+0x30c>
 800d6b0:	2b30      	cmp	r3, #48	; 0x30
 800d6b2:	d822      	bhi.n	800d6fa <HAL_CAN_IRQHandler+0x334>
 800d6b4:	2b10      	cmp	r3, #16
 800d6b6:	d002      	beq.n	800d6be <HAL_CAN_IRQHandler+0x2f8>
 800d6b8:	2b20      	cmp	r3, #32
 800d6ba:	d005      	beq.n	800d6c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800d6bc:	e01d      	b.n	800d6fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	f043 0308 	orr.w	r3, r3, #8
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d6c6:	e019      	b.n	800d6fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	f043 0310 	orr.w	r3, r3, #16
 800d6ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d6d0:	e014      	b.n	800d6fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	f043 0320 	orr.w	r3, r3, #32
 800d6d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d6da:	e00f      	b.n	800d6fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d6e4:	e00a      	b.n	800d6fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d6ee:	e005      	b.n	800d6fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d6f8:	e000      	b.n	800d6fc <HAL_CAN_IRQHandler+0x336>
            break;
 800d6fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	699a      	ldr	r2, [r3, #24]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d70a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2204      	movs	r2, #4
 800d712:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	2b00      	cmp	r3, #0
 800d718:	d008      	beq.n	800d72c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	431a      	orrs	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f87c 	bl	800d824 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800d72c:	bf00      	nop
 800d72e:	3728      	adds	r7, #40	; 0x28
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800d818:	bf00      	nop
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f003 0307 	and.w	r3, r3, #7
 800d846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d848:	4b0c      	ldr	r3, [pc, #48]	; (800d87c <__NVIC_SetPriorityGrouping+0x44>)
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d854:	4013      	ands	r3, r2
 800d856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d86a:	4a04      	ldr	r2, [pc, #16]	; (800d87c <__NVIC_SetPriorityGrouping+0x44>)
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	60d3      	str	r3, [r2, #12]
}
 800d870:	bf00      	nop
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	e000ed00 	.word	0xe000ed00

0800d880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d880:	b480      	push	{r7}
 800d882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d884:	4b04      	ldr	r3, [pc, #16]	; (800d898 <__NVIC_GetPriorityGrouping+0x18>)
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	0a1b      	lsrs	r3, r3, #8
 800d88a:	f003 0307 	and.w	r3, r3, #7
}
 800d88e:	4618      	mov	r0, r3
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	e000ed00 	.word	0xe000ed00

0800d89c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	db0b      	blt.n	800d8c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d8ae:	79fb      	ldrb	r3, [r7, #7]
 800d8b0:	f003 021f 	and.w	r2, r3, #31
 800d8b4:	4907      	ldr	r1, [pc, #28]	; (800d8d4 <__NVIC_EnableIRQ+0x38>)
 800d8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8ba:	095b      	lsrs	r3, r3, #5
 800d8bc:	2001      	movs	r0, #1
 800d8be:	fa00 f202 	lsl.w	r2, r0, r2
 800d8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800d8c6:	bf00      	nop
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	e000e100 	.word	0xe000e100

0800d8d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	6039      	str	r1, [r7, #0]
 800d8e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	db0a      	blt.n	800d902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	490c      	ldr	r1, [pc, #48]	; (800d924 <__NVIC_SetPriority+0x4c>)
 800d8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8f6:	0112      	lsls	r2, r2, #4
 800d8f8:	b2d2      	uxtb	r2, r2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d900:	e00a      	b.n	800d918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	b2da      	uxtb	r2, r3
 800d906:	4908      	ldr	r1, [pc, #32]	; (800d928 <__NVIC_SetPriority+0x50>)
 800d908:	79fb      	ldrb	r3, [r7, #7]
 800d90a:	f003 030f 	and.w	r3, r3, #15
 800d90e:	3b04      	subs	r3, #4
 800d910:	0112      	lsls	r2, r2, #4
 800d912:	b2d2      	uxtb	r2, r2
 800d914:	440b      	add	r3, r1
 800d916:	761a      	strb	r2, [r3, #24]
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	e000e100 	.word	0xe000e100
 800d928:	e000ed00 	.word	0xe000ed00

0800d92c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b089      	sub	sp, #36	; 0x24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f003 0307 	and.w	r3, r3, #7
 800d93e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	f1c3 0307 	rsb	r3, r3, #7
 800d946:	2b04      	cmp	r3, #4
 800d948:	bf28      	it	cs
 800d94a:	2304      	movcs	r3, #4
 800d94c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	3304      	adds	r3, #4
 800d952:	2b06      	cmp	r3, #6
 800d954:	d902      	bls.n	800d95c <NVIC_EncodePriority+0x30>
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	3b03      	subs	r3, #3
 800d95a:	e000      	b.n	800d95e <NVIC_EncodePriority+0x32>
 800d95c:	2300      	movs	r3, #0
 800d95e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	fa02 f303 	lsl.w	r3, r2, r3
 800d96a:	43da      	mvns	r2, r3
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	401a      	ands	r2, r3
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	fa01 f303 	lsl.w	r3, r1, r3
 800d97e:	43d9      	mvns	r1, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d984:	4313      	orrs	r3, r2
         );
}
 800d986:	4618      	mov	r0, r3
 800d988:	3724      	adds	r7, #36	; 0x24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
	...

0800d994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d9a4:	d301      	bcc.n	800d9aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e00f      	b.n	800d9ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d9aa:	4a0a      	ldr	r2, [pc, #40]	; (800d9d4 <SysTick_Config+0x40>)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d9b2:	210f      	movs	r1, #15
 800d9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9b8:	f7ff ff8e 	bl	800d8d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d9bc:	4b05      	ldr	r3, [pc, #20]	; (800d9d4 <SysTick_Config+0x40>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d9c2:	4b04      	ldr	r3, [pc, #16]	; (800d9d4 <SysTick_Config+0x40>)
 800d9c4:	2207      	movs	r2, #7
 800d9c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	e000e010 	.word	0xe000e010

0800d9d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff ff29 	bl	800d838 <__NVIC_SetPriorityGrouping>
}
 800d9e6:	bf00      	nop
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b086      	sub	sp, #24
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	60b9      	str	r1, [r7, #8]
 800d9f8:	607a      	str	r2, [r7, #4]
 800d9fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800da00:	f7ff ff3e 	bl	800d880 <__NVIC_GetPriorityGrouping>
 800da04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	68b9      	ldr	r1, [r7, #8]
 800da0a:	6978      	ldr	r0, [r7, #20]
 800da0c:	f7ff ff8e 	bl	800d92c <NVIC_EncodePriority>
 800da10:	4602      	mov	r2, r0
 800da12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da16:	4611      	mov	r1, r2
 800da18:	4618      	mov	r0, r3
 800da1a:	f7ff ff5d 	bl	800d8d8 <__NVIC_SetPriority>
}
 800da1e:	bf00      	nop
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b082      	sub	sp, #8
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	4603      	mov	r3, r0
 800da2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800da30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da34:	4618      	mov	r0, r3
 800da36:	f7ff ff31 	bl	800d89c <__NVIC_EnableIRQ>
}
 800da3a:	bf00      	nop
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff ffa2 	bl	800d994 <SysTick_Config>
 800da50:	4603      	mov	r3, r0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b084      	sub	sp, #16
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800da68:	f7fe fc4e 	bl	800c308 <HAL_GetTick>
 800da6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da74:	b2db      	uxtb	r3, r3
 800da76:	2b02      	cmp	r3, #2
 800da78:	d008      	beq.n	800da8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2280      	movs	r2, #128	; 0x80
 800da7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	e052      	b.n	800db32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f022 0216 	bic.w	r2, r2, #22
 800da9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	695a      	ldr	r2, [r3, #20]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800daaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d103      	bne.n	800dabc <HAL_DMA_Abort+0x62>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d007      	beq.n	800dacc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f022 0208 	bic.w	r2, r2, #8
 800daca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f022 0201 	bic.w	r2, r2, #1
 800dada:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dadc:	e013      	b.n	800db06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800dade:	f7fe fc13 	bl	800c308 <HAL_GetTick>
 800dae2:	4602      	mov	r2, r0
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	2b05      	cmp	r3, #5
 800daea:	d90c      	bls.n	800db06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2220      	movs	r2, #32
 800daf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2203      	movs	r2, #3
 800dafe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800db02:	2303      	movs	r3, #3
 800db04:	e015      	b.n	800db32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1e4      	bne.n	800dade <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db18:	223f      	movs	r2, #63	; 0x3f
 800db1a:	409a      	lsls	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d004      	beq.n	800db58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2280      	movs	r2, #128	; 0x80
 800db52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	e00c      	b.n	800db72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2205      	movs	r2, #5
 800db5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f022 0201 	bic.w	r2, r2, #1
 800db6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr
	...

0800db80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800db80:	b480      	push	{r7}
 800db82:	b089      	sub	sp, #36	; 0x24
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800db8a:	2300      	movs	r3, #0
 800db8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800db8e:	2300      	movs	r3, #0
 800db90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800db92:	2300      	movs	r3, #0
 800db94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800db96:	2300      	movs	r3, #0
 800db98:	61fb      	str	r3, [r7, #28]
 800db9a:	e165      	b.n	800de68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800db9c:	2201      	movs	r2, #1
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	fa02 f303 	lsl.w	r3, r2, r3
 800dba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	4013      	ands	r3, r2
 800dbae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	f040 8154 	bne.w	800de62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f003 0303 	and.w	r3, r3, #3
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d005      	beq.n	800dbd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d130      	bne.n	800dc34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	2203      	movs	r2, #3
 800dbde:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe2:	43db      	mvns	r3, r3
 800dbe4:	69ba      	ldr	r2, [r7, #24]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	68da      	ldr	r2, [r3, #12]
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	005b      	lsls	r3, r3, #1
 800dbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf6:	69ba      	ldr	r2, [r7, #24]
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	69ba      	ldr	r2, [r7, #24]
 800dc00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dc08:	2201      	movs	r2, #1
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc10:	43db      	mvns	r3, r3
 800dc12:	69ba      	ldr	r2, [r7, #24]
 800dc14:	4013      	ands	r3, r2
 800dc16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	091b      	lsrs	r3, r3, #4
 800dc1e:	f003 0201 	and.w	r2, r3, #1
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	fa02 f303 	lsl.w	r3, r2, r3
 800dc28:	69ba      	ldr	r2, [r7, #24]
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	69ba      	ldr	r2, [r7, #24]
 800dc32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	f003 0303 	and.w	r3, r3, #3
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	d017      	beq.n	800dc70 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	005b      	lsls	r3, r3, #1
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc50:	43db      	mvns	r3, r3
 800dc52:	69ba      	ldr	r2, [r7, #24]
 800dc54:	4013      	ands	r3, r2
 800dc56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	689a      	ldr	r2, [r3, #8]
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	005b      	lsls	r3, r3, #1
 800dc60:	fa02 f303 	lsl.w	r3, r2, r3
 800dc64:	69ba      	ldr	r2, [r7, #24]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	f003 0303 	and.w	r3, r3, #3
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d123      	bne.n	800dcc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	08da      	lsrs	r2, r3, #3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3208      	adds	r2, #8
 800dc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	f003 0307 	and.w	r3, r3, #7
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	220f      	movs	r2, #15
 800dc94:	fa02 f303 	lsl.w	r3, r2, r3
 800dc98:	43db      	mvns	r3, r3
 800dc9a:	69ba      	ldr	r2, [r7, #24]
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	691a      	ldr	r2, [r3, #16]
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	f003 0307 	and.w	r3, r3, #7
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb0:	69ba      	ldr	r2, [r7, #24]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	08da      	lsrs	r2, r3, #3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3208      	adds	r2, #8
 800dcbe:	69b9      	ldr	r1, [r7, #24]
 800dcc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	2203      	movs	r2, #3
 800dcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd4:	43db      	mvns	r3, r3
 800dcd6:	69ba      	ldr	r2, [r7, #24]
 800dcd8:	4013      	ands	r3, r2
 800dcda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f003 0203 	and.w	r2, r3, #3
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcec:	69ba      	ldr	r2, [r7, #24]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	69ba      	ldr	r2, [r7, #24]
 800dcf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f000 80ae 	beq.w	800de62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd06:	2300      	movs	r3, #0
 800dd08:	60fb      	str	r3, [r7, #12]
 800dd0a:	4b5d      	ldr	r3, [pc, #372]	; (800de80 <HAL_GPIO_Init+0x300>)
 800dd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd0e:	4a5c      	ldr	r2, [pc, #368]	; (800de80 <HAL_GPIO_Init+0x300>)
 800dd10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd14:	6453      	str	r3, [r2, #68]	; 0x44
 800dd16:	4b5a      	ldr	r3, [pc, #360]	; (800de80 <HAL_GPIO_Init+0x300>)
 800dd18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800dd22:	4a58      	ldr	r2, [pc, #352]	; (800de84 <HAL_GPIO_Init+0x304>)
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	089b      	lsrs	r3, r3, #2
 800dd28:	3302      	adds	r3, #2
 800dd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	f003 0303 	and.w	r3, r3, #3
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	220f      	movs	r2, #15
 800dd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd3e:	43db      	mvns	r3, r3
 800dd40:	69ba      	ldr	r2, [r7, #24]
 800dd42:	4013      	ands	r3, r2
 800dd44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a4f      	ldr	r2, [pc, #316]	; (800de88 <HAL_GPIO_Init+0x308>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d025      	beq.n	800dd9a <HAL_GPIO_Init+0x21a>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a4e      	ldr	r2, [pc, #312]	; (800de8c <HAL_GPIO_Init+0x30c>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d01f      	beq.n	800dd96 <HAL_GPIO_Init+0x216>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a4d      	ldr	r2, [pc, #308]	; (800de90 <HAL_GPIO_Init+0x310>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d019      	beq.n	800dd92 <HAL_GPIO_Init+0x212>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a4c      	ldr	r2, [pc, #304]	; (800de94 <HAL_GPIO_Init+0x314>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d013      	beq.n	800dd8e <HAL_GPIO_Init+0x20e>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a4b      	ldr	r2, [pc, #300]	; (800de98 <HAL_GPIO_Init+0x318>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d00d      	beq.n	800dd8a <HAL_GPIO_Init+0x20a>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a4a      	ldr	r2, [pc, #296]	; (800de9c <HAL_GPIO_Init+0x31c>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d007      	beq.n	800dd86 <HAL_GPIO_Init+0x206>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a49      	ldr	r2, [pc, #292]	; (800dea0 <HAL_GPIO_Init+0x320>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d101      	bne.n	800dd82 <HAL_GPIO_Init+0x202>
 800dd7e:	2306      	movs	r3, #6
 800dd80:	e00c      	b.n	800dd9c <HAL_GPIO_Init+0x21c>
 800dd82:	2307      	movs	r3, #7
 800dd84:	e00a      	b.n	800dd9c <HAL_GPIO_Init+0x21c>
 800dd86:	2305      	movs	r3, #5
 800dd88:	e008      	b.n	800dd9c <HAL_GPIO_Init+0x21c>
 800dd8a:	2304      	movs	r3, #4
 800dd8c:	e006      	b.n	800dd9c <HAL_GPIO_Init+0x21c>
 800dd8e:	2303      	movs	r3, #3
 800dd90:	e004      	b.n	800dd9c <HAL_GPIO_Init+0x21c>
 800dd92:	2302      	movs	r3, #2
 800dd94:	e002      	b.n	800dd9c <HAL_GPIO_Init+0x21c>
 800dd96:	2301      	movs	r3, #1
 800dd98:	e000      	b.n	800dd9c <HAL_GPIO_Init+0x21c>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	69fa      	ldr	r2, [r7, #28]
 800dd9e:	f002 0203 	and.w	r2, r2, #3
 800dda2:	0092      	lsls	r2, r2, #2
 800dda4:	4093      	lsls	r3, r2
 800dda6:	69ba      	ldr	r2, [r7, #24]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ddac:	4935      	ldr	r1, [pc, #212]	; (800de84 <HAL_GPIO_Init+0x304>)
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	089b      	lsrs	r3, r3, #2
 800ddb2:	3302      	adds	r3, #2
 800ddb4:	69ba      	ldr	r2, [r7, #24]
 800ddb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ddba:	4b3a      	ldr	r3, [pc, #232]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	43db      	mvns	r3, r3
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800ddd6:	69ba      	ldr	r2, [r7, #24]
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ddde:	4a31      	ldr	r2, [pc, #196]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800dde4:	4b2f      	ldr	r3, [pc, #188]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	43db      	mvns	r3, r3
 800ddee:	69ba      	ldr	r2, [r7, #24]
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d003      	beq.n	800de08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800de00:	69ba      	ldr	r2, [r7, #24]
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	4313      	orrs	r3, r2
 800de06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800de08:	4a26      	ldr	r2, [pc, #152]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800de0e:	4b25      	ldr	r3, [pc, #148]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	43db      	mvns	r3, r3
 800de18:	69ba      	ldr	r2, [r7, #24]
 800de1a:	4013      	ands	r3, r2
 800de1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de26:	2b00      	cmp	r3, #0
 800de28:	d003      	beq.n	800de32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800de2a:	69ba      	ldr	r2, [r7, #24]
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	4313      	orrs	r3, r2
 800de30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800de32:	4a1c      	ldr	r2, [pc, #112]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800de38:	4b1a      	ldr	r3, [pc, #104]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	43db      	mvns	r3, r3
 800de42:	69ba      	ldr	r2, [r7, #24]
 800de44:	4013      	ands	r3, r2
 800de46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d003      	beq.n	800de5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800de54:	69ba      	ldr	r2, [r7, #24]
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	4313      	orrs	r3, r2
 800de5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800de5c:	4a11      	ldr	r2, [pc, #68]	; (800dea4 <HAL_GPIO_Init+0x324>)
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	3301      	adds	r3, #1
 800de66:	61fb      	str	r3, [r7, #28]
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	2b0f      	cmp	r3, #15
 800de6c:	f67f ae96 	bls.w	800db9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800de70:	bf00      	nop
 800de72:	bf00      	nop
 800de74:	3724      	adds	r7, #36	; 0x24
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	40023800 	.word	0x40023800
 800de84:	40013800 	.word	0x40013800
 800de88:	40020000 	.word	0x40020000
 800de8c:	40020400 	.word	0x40020400
 800de90:	40020800 	.word	0x40020800
 800de94:	40020c00 	.word	0x40020c00
 800de98:	40021000 	.word	0x40021000
 800de9c:	40021400 	.word	0x40021400
 800dea0:	40021800 	.word	0x40021800
 800dea4:	40013c00 	.word	0x40013c00

0800dea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	460b      	mov	r3, r1
 800deb2:	807b      	strh	r3, [r7, #2]
 800deb4:	4613      	mov	r3, r2
 800deb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800deb8:	787b      	ldrb	r3, [r7, #1]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800debe:	887a      	ldrh	r2, [r7, #2]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800dec4:	e003      	b.n	800dece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800dec6:	887b      	ldrh	r3, [r7, #2]
 800dec8:	041a      	lsls	r2, r3, #16
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	619a      	str	r2, [r3, #24]
}
 800dece:	bf00      	nop
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
	...

0800dedc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800dee2:	2300      	movs	r3, #0
 800dee4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800dee6:	2300      	movs	r3, #0
 800dee8:	603b      	str	r3, [r7, #0]
 800deea:	4b20      	ldr	r3, [pc, #128]	; (800df6c <HAL_PWREx_EnableOverDrive+0x90>)
 800deec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deee:	4a1f      	ldr	r2, [pc, #124]	; (800df6c <HAL_PWREx_EnableOverDrive+0x90>)
 800def0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800def4:	6413      	str	r3, [r2, #64]	; 0x40
 800def6:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <HAL_PWREx_EnableOverDrive+0x90>)
 800def8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800df02:	4b1b      	ldr	r3, [pc, #108]	; (800df70 <HAL_PWREx_EnableOverDrive+0x94>)
 800df04:	2201      	movs	r2, #1
 800df06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800df08:	f7fe f9fe 	bl	800c308 <HAL_GetTick>
 800df0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800df0e:	e009      	b.n	800df24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800df10:	f7fe f9fa 	bl	800c308 <HAL_GetTick>
 800df14:	4602      	mov	r2, r0
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df1e:	d901      	bls.n	800df24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800df20:	2303      	movs	r3, #3
 800df22:	e01f      	b.n	800df64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800df24:	4b13      	ldr	r3, [pc, #76]	; (800df74 <HAL_PWREx_EnableOverDrive+0x98>)
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df30:	d1ee      	bne.n	800df10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800df32:	4b11      	ldr	r3, [pc, #68]	; (800df78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800df34:	2201      	movs	r2, #1
 800df36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800df38:	f7fe f9e6 	bl	800c308 <HAL_GetTick>
 800df3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800df3e:	e009      	b.n	800df54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800df40:	f7fe f9e2 	bl	800c308 <HAL_GetTick>
 800df44:	4602      	mov	r2, r0
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df4e:	d901      	bls.n	800df54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800df50:	2303      	movs	r3, #3
 800df52:	e007      	b.n	800df64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800df54:	4b07      	ldr	r3, [pc, #28]	; (800df74 <HAL_PWREx_EnableOverDrive+0x98>)
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df60:	d1ee      	bne.n	800df40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	40023800 	.word	0x40023800
 800df70:	420e0040 	.word	0x420e0040
 800df74:	40007000 	.word	0x40007000
 800df78:	420e0044 	.word	0x420e0044

0800df7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d101      	bne.n	800df90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800df8c:	2301      	movs	r3, #1
 800df8e:	e0cc      	b.n	800e12a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800df90:	4b68      	ldr	r3, [pc, #416]	; (800e134 <HAL_RCC_ClockConfig+0x1b8>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f003 030f 	and.w	r3, r3, #15
 800df98:	683a      	ldr	r2, [r7, #0]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d90c      	bls.n	800dfb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df9e:	4b65      	ldr	r3, [pc, #404]	; (800e134 <HAL_RCC_ClockConfig+0x1b8>)
 800dfa0:	683a      	ldr	r2, [r7, #0]
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dfa6:	4b63      	ldr	r3, [pc, #396]	; (800e134 <HAL_RCC_ClockConfig+0x1b8>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f003 030f 	and.w	r3, r3, #15
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d001      	beq.n	800dfb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e0b8      	b.n	800e12a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f003 0302 	and.w	r3, r3, #2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d020      	beq.n	800e006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f003 0304 	and.w	r3, r3, #4
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d005      	beq.n	800dfdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dfd0:	4b59      	ldr	r3, [pc, #356]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	4a58      	ldr	r2, [pc, #352]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800dfd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dfda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f003 0308 	and.w	r3, r3, #8
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d005      	beq.n	800dff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dfe8:	4b53      	ldr	r3, [pc, #332]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	4a52      	ldr	r2, [pc, #328]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800dfee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dff4:	4b50      	ldr	r3, [pc, #320]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	494d      	ldr	r1, [pc, #308]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e002:	4313      	orrs	r3, r2
 800e004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f003 0301 	and.w	r3, r3, #1
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d044      	beq.n	800e09c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d107      	bne.n	800e02a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e01a:	4b47      	ldr	r3, [pc, #284]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e022:	2b00      	cmp	r3, #0
 800e024:	d119      	bne.n	800e05a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	e07f      	b.n	800e12a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d003      	beq.n	800e03a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e036:	2b03      	cmp	r3, #3
 800e038:	d107      	bne.n	800e04a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e03a:	4b3f      	ldr	r3, [pc, #252]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e042:	2b00      	cmp	r3, #0
 800e044:	d109      	bne.n	800e05a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e06f      	b.n	800e12a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e04a:	4b3b      	ldr	r3, [pc, #236]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f003 0302 	and.w	r3, r3, #2
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e067      	b.n	800e12a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e05a:	4b37      	ldr	r3, [pc, #220]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	f023 0203 	bic.w	r2, r3, #3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	4934      	ldr	r1, [pc, #208]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e068:	4313      	orrs	r3, r2
 800e06a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e06c:	f7fe f94c 	bl	800c308 <HAL_GetTick>
 800e070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e072:	e00a      	b.n	800e08a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e074:	f7fe f948 	bl	800c308 <HAL_GetTick>
 800e078:	4602      	mov	r2, r0
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	1ad3      	subs	r3, r2, r3
 800e07e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e082:	4293      	cmp	r3, r2
 800e084:	d901      	bls.n	800e08a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e086:	2303      	movs	r3, #3
 800e088:	e04f      	b.n	800e12a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e08a:	4b2b      	ldr	r3, [pc, #172]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	f003 020c 	and.w	r2, r3, #12
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	429a      	cmp	r2, r3
 800e09a:	d1eb      	bne.n	800e074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e09c:	4b25      	ldr	r3, [pc, #148]	; (800e134 <HAL_RCC_ClockConfig+0x1b8>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 030f 	and.w	r3, r3, #15
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d20c      	bcs.n	800e0c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e0aa:	4b22      	ldr	r3, [pc, #136]	; (800e134 <HAL_RCC_ClockConfig+0x1b8>)
 800e0ac:	683a      	ldr	r2, [r7, #0]
 800e0ae:	b2d2      	uxtb	r2, r2
 800e0b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0b2:	4b20      	ldr	r3, [pc, #128]	; (800e134 <HAL_RCC_ClockConfig+0x1b8>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f003 030f 	and.w	r3, r3, #15
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d001      	beq.n	800e0c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e032      	b.n	800e12a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f003 0304 	and.w	r3, r3, #4
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d008      	beq.n	800e0e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e0d0:	4b19      	ldr	r3, [pc, #100]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	4916      	ldr	r1, [pc, #88]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 0308 	and.w	r3, r3, #8
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d009      	beq.n	800e102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e0ee:	4b12      	ldr	r3, [pc, #72]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	490e      	ldr	r1, [pc, #56]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e0fe:	4313      	orrs	r3, r2
 800e100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e102:	f000 f855 	bl	800e1b0 <HAL_RCC_GetSysClockFreq>
 800e106:	4602      	mov	r2, r0
 800e108:	4b0b      	ldr	r3, [pc, #44]	; (800e138 <HAL_RCC_ClockConfig+0x1bc>)
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	091b      	lsrs	r3, r3, #4
 800e10e:	f003 030f 	and.w	r3, r3, #15
 800e112:	490a      	ldr	r1, [pc, #40]	; (800e13c <HAL_RCC_ClockConfig+0x1c0>)
 800e114:	5ccb      	ldrb	r3, [r1, r3]
 800e116:	fa22 f303 	lsr.w	r3, r2, r3
 800e11a:	4a09      	ldr	r2, [pc, #36]	; (800e140 <HAL_RCC_ClockConfig+0x1c4>)
 800e11c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e11e:	4b09      	ldr	r3, [pc, #36]	; (800e144 <HAL_RCC_ClockConfig+0x1c8>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe f8ac 	bl	800c280 <HAL_InitTick>

  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	40023c00 	.word	0x40023c00
 800e138:	40023800 	.word	0x40023800
 800e13c:	08012288 	.word	0x08012288
 800e140:	20000218 	.word	0x20000218
 800e144:	2000021c 	.word	0x2000021c

0800e148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e148:	b480      	push	{r7}
 800e14a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e14c:	4b03      	ldr	r3, [pc, #12]	; (800e15c <HAL_RCC_GetHCLKFreq+0x14>)
 800e14e:	681b      	ldr	r3, [r3, #0]
}
 800e150:	4618      	mov	r0, r3
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	20000218 	.word	0x20000218

0800e160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e164:	f7ff fff0 	bl	800e148 <HAL_RCC_GetHCLKFreq>
 800e168:	4602      	mov	r2, r0
 800e16a:	4b05      	ldr	r3, [pc, #20]	; (800e180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	0a9b      	lsrs	r3, r3, #10
 800e170:	f003 0307 	and.w	r3, r3, #7
 800e174:	4903      	ldr	r1, [pc, #12]	; (800e184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e176:	5ccb      	ldrb	r3, [r1, r3]
 800e178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	40023800 	.word	0x40023800
 800e184:	08012298 	.word	0x08012298

0800e188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e18c:	f7ff ffdc 	bl	800e148 <HAL_RCC_GetHCLKFreq>
 800e190:	4602      	mov	r2, r0
 800e192:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	0b5b      	lsrs	r3, r3, #13
 800e198:	f003 0307 	and.w	r3, r3, #7
 800e19c:	4903      	ldr	r1, [pc, #12]	; (800e1ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800e19e:	5ccb      	ldrb	r3, [r1, r3]
 800e1a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	40023800 	.word	0x40023800
 800e1ac:	08012298 	.word	0x08012298

0800e1b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e1b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1b4:	b088      	sub	sp, #32
 800e1b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e1cc:	4bce      	ldr	r3, [pc, #824]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	f003 030c 	and.w	r3, r3, #12
 800e1d4:	2b0c      	cmp	r3, #12
 800e1d6:	f200 818d 	bhi.w	800e4f4 <HAL_RCC_GetSysClockFreq+0x344>
 800e1da:	a201      	add	r2, pc, #4	; (adr r2, 800e1e0 <HAL_RCC_GetSysClockFreq+0x30>)
 800e1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e0:	0800e215 	.word	0x0800e215
 800e1e4:	0800e4f5 	.word	0x0800e4f5
 800e1e8:	0800e4f5 	.word	0x0800e4f5
 800e1ec:	0800e4f5 	.word	0x0800e4f5
 800e1f0:	0800e21b 	.word	0x0800e21b
 800e1f4:	0800e4f5 	.word	0x0800e4f5
 800e1f8:	0800e4f5 	.word	0x0800e4f5
 800e1fc:	0800e4f5 	.word	0x0800e4f5
 800e200:	0800e221 	.word	0x0800e221
 800e204:	0800e4f5 	.word	0x0800e4f5
 800e208:	0800e4f5 	.word	0x0800e4f5
 800e20c:	0800e4f5 	.word	0x0800e4f5
 800e210:	0800e395 	.word	0x0800e395
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e214:	4bbd      	ldr	r3, [pc, #756]	; (800e50c <HAL_RCC_GetSysClockFreq+0x35c>)
 800e216:	61bb      	str	r3, [r7, #24]
       break;
 800e218:	e16f      	b.n	800e4fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e21a:	4bbd      	ldr	r3, [pc, #756]	; (800e510 <HAL_RCC_GetSysClockFreq+0x360>)
 800e21c:	61bb      	str	r3, [r7, #24]
      break;
 800e21e:	e16c      	b.n	800e4fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e220:	4bb9      	ldr	r3, [pc, #740]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e228:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e22a:	4bb7      	ldr	r3, [pc, #732]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e232:	2b00      	cmp	r3, #0
 800e234:	d053      	beq.n	800e2de <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e236:	4bb4      	ldr	r3, [pc, #720]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	099b      	lsrs	r3, r3, #6
 800e23c:	461a      	mov	r2, r3
 800e23e:	f04f 0300 	mov.w	r3, #0
 800e242:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e246:	f04f 0100 	mov.w	r1, #0
 800e24a:	ea02 0400 	and.w	r4, r2, r0
 800e24e:	603c      	str	r4, [r7, #0]
 800e250:	400b      	ands	r3, r1
 800e252:	607b      	str	r3, [r7, #4]
 800e254:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e258:	4620      	mov	r0, r4
 800e25a:	4629      	mov	r1, r5
 800e25c:	f04f 0200 	mov.w	r2, #0
 800e260:	f04f 0300 	mov.w	r3, #0
 800e264:	014b      	lsls	r3, r1, #5
 800e266:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e26a:	0142      	lsls	r2, r0, #5
 800e26c:	4610      	mov	r0, r2
 800e26e:	4619      	mov	r1, r3
 800e270:	4623      	mov	r3, r4
 800e272:	1ac0      	subs	r0, r0, r3
 800e274:	462b      	mov	r3, r5
 800e276:	eb61 0103 	sbc.w	r1, r1, r3
 800e27a:	f04f 0200 	mov.w	r2, #0
 800e27e:	f04f 0300 	mov.w	r3, #0
 800e282:	018b      	lsls	r3, r1, #6
 800e284:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e288:	0182      	lsls	r2, r0, #6
 800e28a:	1a12      	subs	r2, r2, r0
 800e28c:	eb63 0301 	sbc.w	r3, r3, r1
 800e290:	f04f 0000 	mov.w	r0, #0
 800e294:	f04f 0100 	mov.w	r1, #0
 800e298:	00d9      	lsls	r1, r3, #3
 800e29a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e29e:	00d0      	lsls	r0, r2, #3
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	1852      	adds	r2, r2, r1
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	eb43 0101 	adc.w	r1, r3, r1
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	f04f 0000 	mov.w	r0, #0
 800e2b4:	f04f 0100 	mov.w	r1, #0
 800e2b8:	0259      	lsls	r1, r3, #9
 800e2ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e2be:	0250      	lsls	r0, r2, #9
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	f04f 0300 	mov.w	r3, #0
 800e2d0:	f7f8 fd78 	bl	8006dc4 <__aeabi_uldivmod>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4613      	mov	r3, r2
 800e2da:	61fb      	str	r3, [r7, #28]
 800e2dc:	e04c      	b.n	800e378 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e2de:	4b8a      	ldr	r3, [pc, #552]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	099b      	lsrs	r3, r3, #6
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	f04f 0300 	mov.w	r3, #0
 800e2ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e2ee:	f04f 0100 	mov.w	r1, #0
 800e2f2:	ea02 0a00 	and.w	sl, r2, r0
 800e2f6:	ea03 0b01 	and.w	fp, r3, r1
 800e2fa:	4650      	mov	r0, sl
 800e2fc:	4659      	mov	r1, fp
 800e2fe:	f04f 0200 	mov.w	r2, #0
 800e302:	f04f 0300 	mov.w	r3, #0
 800e306:	014b      	lsls	r3, r1, #5
 800e308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e30c:	0142      	lsls	r2, r0, #5
 800e30e:	4610      	mov	r0, r2
 800e310:	4619      	mov	r1, r3
 800e312:	ebb0 000a 	subs.w	r0, r0, sl
 800e316:	eb61 010b 	sbc.w	r1, r1, fp
 800e31a:	f04f 0200 	mov.w	r2, #0
 800e31e:	f04f 0300 	mov.w	r3, #0
 800e322:	018b      	lsls	r3, r1, #6
 800e324:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e328:	0182      	lsls	r2, r0, #6
 800e32a:	1a12      	subs	r2, r2, r0
 800e32c:	eb63 0301 	sbc.w	r3, r3, r1
 800e330:	f04f 0000 	mov.w	r0, #0
 800e334:	f04f 0100 	mov.w	r1, #0
 800e338:	00d9      	lsls	r1, r3, #3
 800e33a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e33e:	00d0      	lsls	r0, r2, #3
 800e340:	4602      	mov	r2, r0
 800e342:	460b      	mov	r3, r1
 800e344:	eb12 020a 	adds.w	r2, r2, sl
 800e348:	eb43 030b 	adc.w	r3, r3, fp
 800e34c:	f04f 0000 	mov.w	r0, #0
 800e350:	f04f 0100 	mov.w	r1, #0
 800e354:	0299      	lsls	r1, r3, #10
 800e356:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e35a:	0290      	lsls	r0, r2, #10
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	4610      	mov	r0, r2
 800e362:	4619      	mov	r1, r3
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	461a      	mov	r2, r3
 800e368:	f04f 0300 	mov.w	r3, #0
 800e36c:	f7f8 fd2a 	bl	8006dc4 <__aeabi_uldivmod>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4613      	mov	r3, r2
 800e376:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e378:	4b63      	ldr	r3, [pc, #396]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	0c1b      	lsrs	r3, r3, #16
 800e37e:	f003 0303 	and.w	r3, r3, #3
 800e382:	3301      	adds	r3, #1
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800e388:	69fa      	ldr	r2, [r7, #28]
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e390:	61bb      	str	r3, [r7, #24]
      break;
 800e392:	e0b2      	b.n	800e4fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e394:	4b5c      	ldr	r3, [pc, #368]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e39c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e39e:	4b5a      	ldr	r3, [pc, #360]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d04d      	beq.n	800e446 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e3aa:	4b57      	ldr	r3, [pc, #348]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	099b      	lsrs	r3, r3, #6
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	f04f 0300 	mov.w	r3, #0
 800e3b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e3ba:	f04f 0100 	mov.w	r1, #0
 800e3be:	ea02 0800 	and.w	r8, r2, r0
 800e3c2:	ea03 0901 	and.w	r9, r3, r1
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f04f 0200 	mov.w	r2, #0
 800e3ce:	f04f 0300 	mov.w	r3, #0
 800e3d2:	014b      	lsls	r3, r1, #5
 800e3d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e3d8:	0142      	lsls	r2, r0, #5
 800e3da:	4610      	mov	r0, r2
 800e3dc:	4619      	mov	r1, r3
 800e3de:	ebb0 0008 	subs.w	r0, r0, r8
 800e3e2:	eb61 0109 	sbc.w	r1, r1, r9
 800e3e6:	f04f 0200 	mov.w	r2, #0
 800e3ea:	f04f 0300 	mov.w	r3, #0
 800e3ee:	018b      	lsls	r3, r1, #6
 800e3f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e3f4:	0182      	lsls	r2, r0, #6
 800e3f6:	1a12      	subs	r2, r2, r0
 800e3f8:	eb63 0301 	sbc.w	r3, r3, r1
 800e3fc:	f04f 0000 	mov.w	r0, #0
 800e400:	f04f 0100 	mov.w	r1, #0
 800e404:	00d9      	lsls	r1, r3, #3
 800e406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e40a:	00d0      	lsls	r0, r2, #3
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	eb12 0208 	adds.w	r2, r2, r8
 800e414:	eb43 0309 	adc.w	r3, r3, r9
 800e418:	f04f 0000 	mov.w	r0, #0
 800e41c:	f04f 0100 	mov.w	r1, #0
 800e420:	0259      	lsls	r1, r3, #9
 800e422:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e426:	0250      	lsls	r0, r2, #9
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4610      	mov	r0, r2
 800e42e:	4619      	mov	r1, r3
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	461a      	mov	r2, r3
 800e434:	f04f 0300 	mov.w	r3, #0
 800e438:	f7f8 fcc4 	bl	8006dc4 <__aeabi_uldivmod>
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	4613      	mov	r3, r2
 800e442:	61fb      	str	r3, [r7, #28]
 800e444:	e04a      	b.n	800e4dc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e446:	4b30      	ldr	r3, [pc, #192]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	099b      	lsrs	r3, r3, #6
 800e44c:	461a      	mov	r2, r3
 800e44e:	f04f 0300 	mov.w	r3, #0
 800e452:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e456:	f04f 0100 	mov.w	r1, #0
 800e45a:	ea02 0400 	and.w	r4, r2, r0
 800e45e:	ea03 0501 	and.w	r5, r3, r1
 800e462:	4620      	mov	r0, r4
 800e464:	4629      	mov	r1, r5
 800e466:	f04f 0200 	mov.w	r2, #0
 800e46a:	f04f 0300 	mov.w	r3, #0
 800e46e:	014b      	lsls	r3, r1, #5
 800e470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e474:	0142      	lsls	r2, r0, #5
 800e476:	4610      	mov	r0, r2
 800e478:	4619      	mov	r1, r3
 800e47a:	1b00      	subs	r0, r0, r4
 800e47c:	eb61 0105 	sbc.w	r1, r1, r5
 800e480:	f04f 0200 	mov.w	r2, #0
 800e484:	f04f 0300 	mov.w	r3, #0
 800e488:	018b      	lsls	r3, r1, #6
 800e48a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e48e:	0182      	lsls	r2, r0, #6
 800e490:	1a12      	subs	r2, r2, r0
 800e492:	eb63 0301 	sbc.w	r3, r3, r1
 800e496:	f04f 0000 	mov.w	r0, #0
 800e49a:	f04f 0100 	mov.w	r1, #0
 800e49e:	00d9      	lsls	r1, r3, #3
 800e4a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e4a4:	00d0      	lsls	r0, r2, #3
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	1912      	adds	r2, r2, r4
 800e4ac:	eb45 0303 	adc.w	r3, r5, r3
 800e4b0:	f04f 0000 	mov.w	r0, #0
 800e4b4:	f04f 0100 	mov.w	r1, #0
 800e4b8:	0299      	lsls	r1, r3, #10
 800e4ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e4be:	0290      	lsls	r0, r2, #10
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f04f 0300 	mov.w	r3, #0
 800e4d0:	f7f8 fc78 	bl	8006dc4 <__aeabi_uldivmod>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4613      	mov	r3, r2
 800e4da:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	; (800e508 <HAL_RCC_GetSysClockFreq+0x358>)
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	0f1b      	lsrs	r3, r3, #28
 800e4e2:	f003 0307 	and.w	r3, r3, #7
 800e4e6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800e4e8:	69fa      	ldr	r2, [r7, #28]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4f0:	61bb      	str	r3, [r7, #24]
      break;
 800e4f2:	e002      	b.n	800e4fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e4f4:	4b05      	ldr	r3, [pc, #20]	; (800e50c <HAL_RCC_GetSysClockFreq+0x35c>)
 800e4f6:	61bb      	str	r3, [r7, #24]
      break;
 800e4f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e4fa:	69bb      	ldr	r3, [r7, #24]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3720      	adds	r7, #32
 800e500:	46bd      	mov	sp, r7
 800e502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e506:	bf00      	nop
 800e508:	40023800 	.word	0x40023800
 800e50c:	00f42400 	.word	0x00f42400
 800e510:	007a1200 	.word	0x007a1200

0800e514 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	e28d      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f000 8083 	beq.w	800e63a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e534:	4b94      	ldr	r3, [pc, #592]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	f003 030c 	and.w	r3, r3, #12
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	d019      	beq.n	800e574 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e540:	4b91      	ldr	r3, [pc, #580]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e548:	2b08      	cmp	r3, #8
 800e54a:	d106      	bne.n	800e55a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e54c:	4b8e      	ldr	r3, [pc, #568]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e558:	d00c      	beq.n	800e574 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e55a:	4b8b      	ldr	r3, [pc, #556]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e562:	2b0c      	cmp	r3, #12
 800e564:	d112      	bne.n	800e58c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e566:	4b88      	ldr	r3, [pc, #544]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e56e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e572:	d10b      	bne.n	800e58c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e574:	4b84      	ldr	r3, [pc, #528]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d05b      	beq.n	800e638 <HAL_RCC_OscConfig+0x124>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d157      	bne.n	800e638 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	e25a      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e594:	d106      	bne.n	800e5a4 <HAL_RCC_OscConfig+0x90>
 800e596:	4b7c      	ldr	r3, [pc, #496]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a7b      	ldr	r2, [pc, #492]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e59c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	e01d      	b.n	800e5e0 <HAL_RCC_OscConfig+0xcc>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e5ac:	d10c      	bne.n	800e5c8 <HAL_RCC_OscConfig+0xb4>
 800e5ae:	4b76      	ldr	r3, [pc, #472]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a75      	ldr	r2, [pc, #468]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e5b8:	6013      	str	r3, [r2, #0]
 800e5ba:	4b73      	ldr	r3, [pc, #460]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a72      	ldr	r2, [pc, #456]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5c4:	6013      	str	r3, [r2, #0]
 800e5c6:	e00b      	b.n	800e5e0 <HAL_RCC_OscConfig+0xcc>
 800e5c8:	4b6f      	ldr	r3, [pc, #444]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a6e      	ldr	r2, [pc, #440]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	4b6c      	ldr	r3, [pc, #432]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a6b      	ldr	r2, [pc, #428]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e5da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e5de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d013      	beq.n	800e610 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5e8:	f7fd fe8e 	bl	800c308 <HAL_GetTick>
 800e5ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e5ee:	e008      	b.n	800e602 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e5f0:	f7fd fe8a 	bl	800c308 <HAL_GetTick>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	2b64      	cmp	r3, #100	; 0x64
 800e5fc:	d901      	bls.n	800e602 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e5fe:	2303      	movs	r3, #3
 800e600:	e21f      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e602:	4b61      	ldr	r3, [pc, #388]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d0f0      	beq.n	800e5f0 <HAL_RCC_OscConfig+0xdc>
 800e60e:	e014      	b.n	800e63a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e610:	f7fd fe7a 	bl	800c308 <HAL_GetTick>
 800e614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e616:	e008      	b.n	800e62a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e618:	f7fd fe76 	bl	800c308 <HAL_GetTick>
 800e61c:	4602      	mov	r2, r0
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	2b64      	cmp	r3, #100	; 0x64
 800e624:	d901      	bls.n	800e62a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e626:	2303      	movs	r3, #3
 800e628:	e20b      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e62a:	4b57      	ldr	r3, [pc, #348]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1f0      	bne.n	800e618 <HAL_RCC_OscConfig+0x104>
 800e636:	e000      	b.n	800e63a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d06f      	beq.n	800e726 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e646:	4b50      	ldr	r3, [pc, #320]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	f003 030c 	and.w	r3, r3, #12
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d017      	beq.n	800e682 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e652:	4b4d      	ldr	r3, [pc, #308]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e65a:	2b08      	cmp	r3, #8
 800e65c:	d105      	bne.n	800e66a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e65e:	4b4a      	ldr	r3, [pc, #296]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00b      	beq.n	800e682 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e66a:	4b47      	ldr	r3, [pc, #284]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e672:	2b0c      	cmp	r3, #12
 800e674:	d11c      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e676:	4b44      	ldr	r3, [pc, #272]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d116      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e682:	4b41      	ldr	r3, [pc, #260]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f003 0302 	and.w	r3, r3, #2
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d005      	beq.n	800e69a <HAL_RCC_OscConfig+0x186>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d001      	beq.n	800e69a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e1d3      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e69a:	4b3b      	ldr	r3, [pc, #236]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	4937      	ldr	r1, [pc, #220]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e6ae:	e03a      	b.n	800e726 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d020      	beq.n	800e6fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e6b8:	4b34      	ldr	r3, [pc, #208]	; (800e78c <HAL_RCC_OscConfig+0x278>)
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6be:	f7fd fe23 	bl	800c308 <HAL_GetTick>
 800e6c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e6c4:	e008      	b.n	800e6d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e6c6:	f7fd fe1f 	bl	800c308 <HAL_GetTick>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d901      	bls.n	800e6d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	e1b4      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e6d8:	4b2b      	ldr	r3, [pc, #172]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f003 0302 	and.w	r3, r3, #2
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d0f0      	beq.n	800e6c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e6e4:	4b28      	ldr	r3, [pc, #160]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	00db      	lsls	r3, r3, #3
 800e6f2:	4925      	ldr	r1, [pc, #148]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	600b      	str	r3, [r1, #0]
 800e6f8:	e015      	b.n	800e726 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e6fa:	4b24      	ldr	r3, [pc, #144]	; (800e78c <HAL_RCC_OscConfig+0x278>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e700:	f7fd fe02 	bl	800c308 <HAL_GetTick>
 800e704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e706:	e008      	b.n	800e71a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e708:	f7fd fdfe 	bl	800c308 <HAL_GetTick>
 800e70c:	4602      	mov	r2, r0
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	2b02      	cmp	r3, #2
 800e714:	d901      	bls.n	800e71a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e716:	2303      	movs	r3, #3
 800e718:	e193      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e71a:	4b1b      	ldr	r3, [pc, #108]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f003 0302 	and.w	r3, r3, #2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d1f0      	bne.n	800e708 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f003 0308 	and.w	r3, r3, #8
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d036      	beq.n	800e7a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	695b      	ldr	r3, [r3, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d016      	beq.n	800e768 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e73a:	4b15      	ldr	r3, [pc, #84]	; (800e790 <HAL_RCC_OscConfig+0x27c>)
 800e73c:	2201      	movs	r2, #1
 800e73e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e740:	f7fd fde2 	bl	800c308 <HAL_GetTick>
 800e744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e746:	e008      	b.n	800e75a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e748:	f7fd fdde 	bl	800c308 <HAL_GetTick>
 800e74c:	4602      	mov	r2, r0
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	1ad3      	subs	r3, r2, r3
 800e752:	2b02      	cmp	r3, #2
 800e754:	d901      	bls.n	800e75a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800e756:	2303      	movs	r3, #3
 800e758:	e173      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e75a:	4b0b      	ldr	r3, [pc, #44]	; (800e788 <HAL_RCC_OscConfig+0x274>)
 800e75c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e75e:	f003 0302 	and.w	r3, r3, #2
 800e762:	2b00      	cmp	r3, #0
 800e764:	d0f0      	beq.n	800e748 <HAL_RCC_OscConfig+0x234>
 800e766:	e01b      	b.n	800e7a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e768:	4b09      	ldr	r3, [pc, #36]	; (800e790 <HAL_RCC_OscConfig+0x27c>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e76e:	f7fd fdcb 	bl	800c308 <HAL_GetTick>
 800e772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e774:	e00e      	b.n	800e794 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e776:	f7fd fdc7 	bl	800c308 <HAL_GetTick>
 800e77a:	4602      	mov	r2, r0
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	2b02      	cmp	r3, #2
 800e782:	d907      	bls.n	800e794 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800e784:	2303      	movs	r3, #3
 800e786:	e15c      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
 800e788:	40023800 	.word	0x40023800
 800e78c:	42470000 	.word	0x42470000
 800e790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e794:	4b8a      	ldr	r3, [pc, #552]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e798:	f003 0302 	and.w	r3, r3, #2
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1ea      	bne.n	800e776 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f003 0304 	and.w	r3, r3, #4
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 8097 	beq.w	800e8dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e7b2:	4b83      	ldr	r3, [pc, #524]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10f      	bne.n	800e7de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60bb      	str	r3, [r7, #8]
 800e7c2:	4b7f      	ldr	r3, [pc, #508]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c6:	4a7e      	ldr	r2, [pc, #504]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e7c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7cc:	6413      	str	r3, [r2, #64]	; 0x40
 800e7ce:	4b7c      	ldr	r3, [pc, #496]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7d6:	60bb      	str	r3, [r7, #8]
 800e7d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e7de:	4b79      	ldr	r3, [pc, #484]	; (800e9c4 <HAL_RCC_OscConfig+0x4b0>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d118      	bne.n	800e81c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e7ea:	4b76      	ldr	r3, [pc, #472]	; (800e9c4 <HAL_RCC_OscConfig+0x4b0>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a75      	ldr	r2, [pc, #468]	; (800e9c4 <HAL_RCC_OscConfig+0x4b0>)
 800e7f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e7f6:	f7fd fd87 	bl	800c308 <HAL_GetTick>
 800e7fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e7fc:	e008      	b.n	800e810 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e7fe:	f7fd fd83 	bl	800c308 <HAL_GetTick>
 800e802:	4602      	mov	r2, r0
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	1ad3      	subs	r3, r2, r3
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d901      	bls.n	800e810 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800e80c:	2303      	movs	r3, #3
 800e80e:	e118      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e810:	4b6c      	ldr	r3, [pc, #432]	; (800e9c4 <HAL_RCC_OscConfig+0x4b0>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d0f0      	beq.n	800e7fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d106      	bne.n	800e832 <HAL_RCC_OscConfig+0x31e>
 800e824:	4b66      	ldr	r3, [pc, #408]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e828:	4a65      	ldr	r2, [pc, #404]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e82a:	f043 0301 	orr.w	r3, r3, #1
 800e82e:	6713      	str	r3, [r2, #112]	; 0x70
 800e830:	e01c      	b.n	800e86c <HAL_RCC_OscConfig+0x358>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	2b05      	cmp	r3, #5
 800e838:	d10c      	bne.n	800e854 <HAL_RCC_OscConfig+0x340>
 800e83a:	4b61      	ldr	r3, [pc, #388]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e83e:	4a60      	ldr	r2, [pc, #384]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e840:	f043 0304 	orr.w	r3, r3, #4
 800e844:	6713      	str	r3, [r2, #112]	; 0x70
 800e846:	4b5e      	ldr	r3, [pc, #376]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e84a:	4a5d      	ldr	r2, [pc, #372]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e84c:	f043 0301 	orr.w	r3, r3, #1
 800e850:	6713      	str	r3, [r2, #112]	; 0x70
 800e852:	e00b      	b.n	800e86c <HAL_RCC_OscConfig+0x358>
 800e854:	4b5a      	ldr	r3, [pc, #360]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e858:	4a59      	ldr	r2, [pc, #356]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e85a:	f023 0301 	bic.w	r3, r3, #1
 800e85e:	6713      	str	r3, [r2, #112]	; 0x70
 800e860:	4b57      	ldr	r3, [pc, #348]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e864:	4a56      	ldr	r2, [pc, #344]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e866:	f023 0304 	bic.w	r3, r3, #4
 800e86a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d015      	beq.n	800e8a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e874:	f7fd fd48 	bl	800c308 <HAL_GetTick>
 800e878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e87a:	e00a      	b.n	800e892 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e87c:	f7fd fd44 	bl	800c308 <HAL_GetTick>
 800e880:	4602      	mov	r2, r0
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	f241 3288 	movw	r2, #5000	; 0x1388
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d901      	bls.n	800e892 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800e88e:	2303      	movs	r3, #3
 800e890:	e0d7      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e892:	4b4b      	ldr	r3, [pc, #300]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e896:	f003 0302 	and.w	r3, r3, #2
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d0ee      	beq.n	800e87c <HAL_RCC_OscConfig+0x368>
 800e89e:	e014      	b.n	800e8ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e8a0:	f7fd fd32 	bl	800c308 <HAL_GetTick>
 800e8a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e8a6:	e00a      	b.n	800e8be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e8a8:	f7fd fd2e 	bl	800c308 <HAL_GetTick>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d901      	bls.n	800e8be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e0c1      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e8be:	4b40      	ldr	r3, [pc, #256]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c2:	f003 0302 	and.w	r3, r3, #2
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1ee      	bne.n	800e8a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e8ca:	7dfb      	ldrb	r3, [r7, #23]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d105      	bne.n	800e8dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e8d0:	4b3b      	ldr	r3, [pc, #236]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d4:	4a3a      	ldr	r2, [pc, #232]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e8d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	699b      	ldr	r3, [r3, #24]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 80ad 	beq.w	800ea40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e8e6:	4b36      	ldr	r3, [pc, #216]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f003 030c 	and.w	r3, r3, #12
 800e8ee:	2b08      	cmp	r3, #8
 800e8f0:	d060      	beq.n	800e9b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d145      	bne.n	800e986 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e8fa:	4b33      	ldr	r3, [pc, #204]	; (800e9c8 <HAL_RCC_OscConfig+0x4b4>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e900:	f7fd fd02 	bl	800c308 <HAL_GetTick>
 800e904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e906:	e008      	b.n	800e91a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e908:	f7fd fcfe 	bl	800c308 <HAL_GetTick>
 800e90c:	4602      	mov	r2, r0
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	2b02      	cmp	r3, #2
 800e914:	d901      	bls.n	800e91a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800e916:	2303      	movs	r3, #3
 800e918:	e093      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e91a:	4b29      	ldr	r3, [pc, #164]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1f0      	bne.n	800e908 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	69da      	ldr	r2, [r3, #28]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a1b      	ldr	r3, [r3, #32]
 800e92e:	431a      	orrs	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e934:	019b      	lsls	r3, r3, #6
 800e936:	431a      	orrs	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e93c:	085b      	lsrs	r3, r3, #1
 800e93e:	3b01      	subs	r3, #1
 800e940:	041b      	lsls	r3, r3, #16
 800e942:	431a      	orrs	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	061b      	lsls	r3, r3, #24
 800e94a:	431a      	orrs	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e950:	071b      	lsls	r3, r3, #28
 800e952:	491b      	ldr	r1, [pc, #108]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e954:	4313      	orrs	r3, r2
 800e956:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e958:	4b1b      	ldr	r3, [pc, #108]	; (800e9c8 <HAL_RCC_OscConfig+0x4b4>)
 800e95a:	2201      	movs	r2, #1
 800e95c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e95e:	f7fd fcd3 	bl	800c308 <HAL_GetTick>
 800e962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e964:	e008      	b.n	800e978 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e966:	f7fd fccf 	bl	800c308 <HAL_GetTick>
 800e96a:	4602      	mov	r2, r0
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	2b02      	cmp	r3, #2
 800e972:	d901      	bls.n	800e978 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800e974:	2303      	movs	r3, #3
 800e976:	e064      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e978:	4b11      	ldr	r3, [pc, #68]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e980:	2b00      	cmp	r3, #0
 800e982:	d0f0      	beq.n	800e966 <HAL_RCC_OscConfig+0x452>
 800e984:	e05c      	b.n	800ea40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e986:	4b10      	ldr	r3, [pc, #64]	; (800e9c8 <HAL_RCC_OscConfig+0x4b4>)
 800e988:	2200      	movs	r2, #0
 800e98a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e98c:	f7fd fcbc 	bl	800c308 <HAL_GetTick>
 800e990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e992:	e008      	b.n	800e9a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e994:	f7fd fcb8 	bl	800c308 <HAL_GetTick>
 800e998:	4602      	mov	r2, r0
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d901      	bls.n	800e9a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	e04d      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9a6:	4b06      	ldr	r3, [pc, #24]	; (800e9c0 <HAL_RCC_OscConfig+0x4ac>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d1f0      	bne.n	800e994 <HAL_RCC_OscConfig+0x480>
 800e9b2:	e045      	b.n	800ea40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d107      	bne.n	800e9cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	e040      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
 800e9c0:	40023800 	.word	0x40023800
 800e9c4:	40007000 	.word	0x40007000
 800e9c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e9cc:	4b1f      	ldr	r3, [pc, #124]	; (800ea4c <HAL_RCC_OscConfig+0x538>)
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	699b      	ldr	r3, [r3, #24]
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d030      	beq.n	800ea3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d129      	bne.n	800ea3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d122      	bne.n	800ea3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e9fc:	4013      	ands	r3, r2
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ea02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d119      	bne.n	800ea3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea12:	085b      	lsrs	r3, r3, #1
 800ea14:	3b01      	subs	r3, #1
 800ea16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d10f      	bne.n	800ea3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d107      	bne.n	800ea3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d001      	beq.n	800ea40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e000      	b.n	800ea42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	40023800 	.word	0x40023800

0800ea50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d101      	bne.n	800ea62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e07b      	b.n	800eb5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d108      	bne.n	800ea7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea72:	d009      	beq.n	800ea88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	61da      	str	r2, [r3, #28]
 800ea7a:	e005      	b.n	800ea88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d106      	bne.n	800eaa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7fc fc94 	bl	800b3d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2202      	movs	r2, #2
 800eaac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eabe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ead0:	431a      	orrs	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eada:	431a      	orrs	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	691b      	ldr	r3, [r3, #16]
 800eae0:	f003 0302 	and.w	r3, r3, #2
 800eae4:	431a      	orrs	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	431a      	orrs	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eaf8:	431a      	orrs	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb02:	431a      	orrs	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
 800eb08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb0c:	ea42 0103 	orr.w	r1, r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	430a      	orrs	r2, r1
 800eb1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	699b      	ldr	r3, [r3, #24]
 800eb24:	0c1b      	lsrs	r3, r3, #16
 800eb26:	f003 0104 	and.w	r1, r3, #4
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2e:	f003 0210 	and.w	r2, r3, #16
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	430a      	orrs	r2, r1
 800eb38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	69da      	ldr	r2, [r3, #28]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eb58:	2300      	movs	r3, #0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b08c      	sub	sp, #48	; 0x30
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	607a      	str	r2, [r7, #4]
 800eb6e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800eb70:	2301      	movs	r3, #1
 800eb72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d101      	bne.n	800eb88 <HAL_SPI_TransmitReceive+0x26>
 800eb84:	2302      	movs	r3, #2
 800eb86:	e18a      	b.n	800ee9e <HAL_SPI_TransmitReceive+0x33c>
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb90:	f7fd fbba 	bl	800c308 <HAL_GetTick>
 800eb94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800eba6:	887b      	ldrh	r3, [r7, #2]
 800eba8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ebaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d00f      	beq.n	800ebd2 <HAL_SPI_TransmitReceive+0x70>
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebb8:	d107      	bne.n	800ebca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d103      	bne.n	800ebca <HAL_SPI_TransmitReceive+0x68>
 800ebc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebc6:	2b04      	cmp	r3, #4
 800ebc8:	d003      	beq.n	800ebd2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ebca:	2302      	movs	r3, #2
 800ebcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebd0:	e15b      	b.n	800ee8a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d005      	beq.n	800ebe4 <HAL_SPI_TransmitReceive+0x82>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d002      	beq.n	800ebe4 <HAL_SPI_TransmitReceive+0x82>
 800ebde:	887b      	ldrh	r3, [r7, #2]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d103      	bne.n	800ebec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebea:	e14e      	b.n	800ee8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	d003      	beq.n	800ec00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2205      	movs	r2, #5
 800ebfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2200      	movs	r2, #0
 800ec04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	887a      	ldrh	r2, [r7, #2]
 800ec10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	887a      	ldrh	r2, [r7, #2]
 800ec16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	887a      	ldrh	r2, [r7, #2]
 800ec22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	887a      	ldrh	r2, [r7, #2]
 800ec28:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec40:	2b40      	cmp	r3, #64	; 0x40
 800ec42:	d007      	beq.n	800ec54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec5c:	d178      	bne.n	800ed50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d002      	beq.n	800ec6c <HAL_SPI_TransmitReceive+0x10a>
 800ec66:	8b7b      	ldrh	r3, [r7, #26]
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d166      	bne.n	800ed3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec70:	881a      	ldrh	r2, [r3, #0]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec7c:	1c9a      	adds	r2, r3, #2
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec90:	e053      	b.n	800ed3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	f003 0302 	and.w	r3, r3, #2
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d11b      	bne.n	800ecd8 <HAL_SPI_TransmitReceive+0x176>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d016      	beq.n	800ecd8 <HAL_SPI_TransmitReceive+0x176>
 800ecaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d113      	bne.n	800ecd8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb4:	881a      	ldrh	r2, [r3, #0]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc0:	1c9a      	adds	r2, r3, #2
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	3b01      	subs	r3, #1
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	f003 0301 	and.w	r3, r3, #1
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d119      	bne.n	800ed1a <HAL_SPI_TransmitReceive+0x1b8>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d014      	beq.n	800ed1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	68da      	ldr	r2, [r3, #12]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecfa:	b292      	uxth	r2, r2
 800ecfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed02:	1c9a      	adds	r2, r3, #2
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed16:	2301      	movs	r3, #1
 800ed18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ed1a:	f7fd faf5 	bl	800c308 <HAL_GetTick>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d807      	bhi.n	800ed3a <HAL_SPI_TransmitReceive+0x1d8>
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed30:	d003      	beq.n	800ed3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed38:	e0a7      	b.n	800ee8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d1a6      	bne.n	800ec92 <HAL_SPI_TransmitReceive+0x130>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1a1      	bne.n	800ec92 <HAL_SPI_TransmitReceive+0x130>
 800ed4e:	e07c      	b.n	800ee4a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <HAL_SPI_TransmitReceive+0x1fc>
 800ed58:	8b7b      	ldrh	r3, [r7, #26]
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d16b      	bne.n	800ee36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	330c      	adds	r3, #12
 800ed68:	7812      	ldrb	r2, [r2, #0]
 800ed6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed70:	1c5a      	adds	r2, r3, #1
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed84:	e057      	b.n	800ee36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d11c      	bne.n	800edce <HAL_SPI_TransmitReceive+0x26c>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d017      	beq.n	800edce <HAL_SPI_TransmitReceive+0x26c>
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d114      	bne.n	800edce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	330c      	adds	r3, #12
 800edae:	7812      	ldrb	r2, [r2, #0]
 800edb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb6:	1c5a      	adds	r2, r3, #1
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	3b01      	subs	r3, #1
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800edca:	2300      	movs	r3, #0
 800edcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	f003 0301 	and.w	r3, r3, #1
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d119      	bne.n	800ee10 <HAL_SPI_TransmitReceive+0x2ae>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d014      	beq.n	800ee10 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68da      	ldr	r2, [r3, #12]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf0:	b2d2      	uxtb	r2, r2
 800edf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	3b01      	subs	r3, #1
 800ee06:	b29a      	uxth	r2, r3
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ee10:	f7fd fa7a 	bl	800c308 <HAL_GetTick>
 800ee14:	4602      	mov	r2, r0
 800ee16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d803      	bhi.n	800ee28 <HAL_SPI_TransmitReceive+0x2c6>
 800ee20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee26:	d102      	bne.n	800ee2e <HAL_SPI_TransmitReceive+0x2cc>
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d103      	bne.n	800ee36 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ee34:	e029      	b.n	800ee8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1a2      	bne.n	800ed86 <HAL_SPI_TransmitReceive+0x224>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d19d      	bne.n	800ed86 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f000 f8b2 	bl	800efb8 <SPI_EndRxTxTransaction>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d006      	beq.n	800ee68 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2220      	movs	r2, #32
 800ee64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ee66:	e010      	b.n	800ee8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	689b      	ldr	r3, [r3, #8]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10b      	bne.n	800ee88 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee70:	2300      	movs	r3, #0
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	617b      	str	r3, [r7, #20]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	617b      	str	r3, [r7, #20]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	e000      	b.n	800ee8a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ee88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ee9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3730      	adds	r7, #48	; 0x30
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
	...

0800eea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	603b      	str	r3, [r7, #0]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eeb8:	f7fd fa26 	bl	800c308 <HAL_GetTick>
 800eebc:	4602      	mov	r2, r0
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	1a9b      	subs	r3, r3, r2
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	4413      	add	r3, r2
 800eec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eec8:	f7fd fa1e 	bl	800c308 <HAL_GetTick>
 800eecc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eece:	4b39      	ldr	r3, [pc, #228]	; (800efb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	015b      	lsls	r3, r3, #5
 800eed4:	0d1b      	lsrs	r3, r3, #20
 800eed6:	69fa      	ldr	r2, [r7, #28]
 800eed8:	fb02 f303 	mul.w	r3, r2, r3
 800eedc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eede:	e054      	b.n	800ef8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eee6:	d050      	beq.n	800ef8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eee8:	f7fd fa0e 	bl	800c308 <HAL_GetTick>
 800eeec:	4602      	mov	r2, r0
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	69fa      	ldr	r2, [r7, #28]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d902      	bls.n	800eefe <SPI_WaitFlagStateUntilTimeout+0x56>
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d13d      	bne.n	800ef7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	685a      	ldr	r2, [r3, #4]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ef0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef16:	d111      	bne.n	800ef3c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef20:	d004      	beq.n	800ef2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef2a:	d107      	bne.n	800ef3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef44:	d10f      	bne.n	800ef66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ef76:	2303      	movs	r3, #3
 800ef78:	e017      	b.n	800efaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ef80:	2300      	movs	r3, #0
 800ef82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	689a      	ldr	r2, [r3, #8]
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	4013      	ands	r3, r2
 800ef94:	68ba      	ldr	r2, [r7, #8]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	bf0c      	ite	eq
 800ef9a:	2301      	moveq	r3, #1
 800ef9c:	2300      	movne	r3, #0
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	461a      	mov	r2, r3
 800efa2:	79fb      	ldrb	r3, [r7, #7]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d19b      	bne.n	800eee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3720      	adds	r7, #32
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20000218 	.word	0x20000218

0800efb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b088      	sub	sp, #32
 800efbc:	af02      	add	r7, sp, #8
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800efc4:	4b1b      	ldr	r3, [pc, #108]	; (800f034 <SPI_EndRxTxTransaction+0x7c>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4a1b      	ldr	r2, [pc, #108]	; (800f038 <SPI_EndRxTxTransaction+0x80>)
 800efca:	fba2 2303 	umull	r2, r3, r2, r3
 800efce:	0d5b      	lsrs	r3, r3, #21
 800efd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800efd4:	fb02 f303 	mul.w	r3, r2, r3
 800efd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efe2:	d112      	bne.n	800f00a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	2200      	movs	r2, #0
 800efec:	2180      	movs	r1, #128	; 0x80
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff ff5a 	bl	800eea8 <SPI_WaitFlagStateUntilTimeout>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d016      	beq.n	800f028 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800effe:	f043 0220 	orr.w	r2, r3, #32
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f006:	2303      	movs	r3, #3
 800f008:	e00f      	b.n	800f02a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00a      	beq.n	800f026 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	3b01      	subs	r3, #1
 800f014:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f020:	2b80      	cmp	r3, #128	; 0x80
 800f022:	d0f2      	beq.n	800f00a <SPI_EndRxTxTransaction+0x52>
 800f024:	e000      	b.n	800f028 <SPI_EndRxTxTransaction+0x70>
        break;
 800f026:	bf00      	nop
  }

  return HAL_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3718      	adds	r7, #24
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	20000218 	.word	0x20000218
 800f038:	165e9f81 	.word	0x165e9f81

0800f03c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d101      	bne.n	800f04e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f04a:	2301      	movs	r3, #1
 800f04c:	e041      	b.n	800f0d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f054:	b2db      	uxtb	r3, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d106      	bne.n	800f068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7fc ffc0 	bl	800bfe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2202      	movs	r2, #2
 800f06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3304      	adds	r3, #4
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f000 fc7c 	bl	800f978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2201      	movs	r2, #1
 800f08c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
	...

0800f0dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d001      	beq.n	800f0f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e04e      	b.n	800f192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2202      	movs	r2, #2
 800f0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	68da      	ldr	r2, [r3, #12]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f042 0201 	orr.w	r2, r2, #1
 800f10a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a23      	ldr	r2, [pc, #140]	; (800f1a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d022      	beq.n	800f15c <HAL_TIM_Base_Start_IT+0x80>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f11e:	d01d      	beq.n	800f15c <HAL_TIM_Base_Start_IT+0x80>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a1f      	ldr	r2, [pc, #124]	; (800f1a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d018      	beq.n	800f15c <HAL_TIM_Base_Start_IT+0x80>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4a1e      	ldr	r2, [pc, #120]	; (800f1a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d013      	beq.n	800f15c <HAL_TIM_Base_Start_IT+0x80>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a1c      	ldr	r2, [pc, #112]	; (800f1ac <HAL_TIM_Base_Start_IT+0xd0>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d00e      	beq.n	800f15c <HAL_TIM_Base_Start_IT+0x80>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4a1b      	ldr	r2, [pc, #108]	; (800f1b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d009      	beq.n	800f15c <HAL_TIM_Base_Start_IT+0x80>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a19      	ldr	r2, [pc, #100]	; (800f1b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d004      	beq.n	800f15c <HAL_TIM_Base_Start_IT+0x80>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a18      	ldr	r2, [pc, #96]	; (800f1b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d111      	bne.n	800f180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	f003 0307 	and.w	r3, r3, #7
 800f166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2b06      	cmp	r3, #6
 800f16c:	d010      	beq.n	800f190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f042 0201 	orr.w	r2, r2, #1
 800f17c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f17e:	e007      	b.n	800f190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f042 0201 	orr.w	r2, r2, #1
 800f18e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3714      	adds	r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	40010000 	.word	0x40010000
 800f1a4:	40000400 	.word	0x40000400
 800f1a8:	40000800 	.word	0x40000800
 800f1ac:	40000c00 	.word	0x40000c00
 800f1b0:	40010400 	.word	0x40010400
 800f1b4:	40014000 	.word	0x40014000
 800f1b8:	40001800 	.word	0x40001800

0800f1bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d101      	bne.n	800f1ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e041      	b.n	800f252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 f839 	bl	800f25a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	3304      	adds	r3, #4
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4610      	mov	r0, r2
 800f1fc:	f000 fbbc 	bl	800f978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2201      	movs	r2, #1
 800f214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2201      	movs	r2, #1
 800f224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2201      	movs	r2, #1
 800f234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2201      	movs	r2, #1
 800f23c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2201      	movs	r2, #1
 800f244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2201      	movs	r2, #1
 800f24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f25a:	b480      	push	{r7}
 800f25c:	b083      	sub	sp, #12
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f262:	bf00      	nop
 800f264:	370c      	adds	r7, #12
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
	...

0800f270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d109      	bne.n	800f294 <HAL_TIM_PWM_Start+0x24>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f286:	b2db      	uxtb	r3, r3
 800f288:	2b01      	cmp	r3, #1
 800f28a:	bf14      	ite	ne
 800f28c:	2301      	movne	r3, #1
 800f28e:	2300      	moveq	r3, #0
 800f290:	b2db      	uxtb	r3, r3
 800f292:	e022      	b.n	800f2da <HAL_TIM_PWM_Start+0x6a>
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	2b04      	cmp	r3, #4
 800f298:	d109      	bne.n	800f2ae <HAL_TIM_PWM_Start+0x3e>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	bf14      	ite	ne
 800f2a6:	2301      	movne	r3, #1
 800f2a8:	2300      	moveq	r3, #0
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	e015      	b.n	800f2da <HAL_TIM_PWM_Start+0x6a>
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	2b08      	cmp	r3, #8
 800f2b2:	d109      	bne.n	800f2c8 <HAL_TIM_PWM_Start+0x58>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	bf14      	ite	ne
 800f2c0:	2301      	movne	r3, #1
 800f2c2:	2300      	moveq	r3, #0
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	e008      	b.n	800f2da <HAL_TIM_PWM_Start+0x6a>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	bf14      	ite	ne
 800f2d4:	2301      	movne	r3, #1
 800f2d6:	2300      	moveq	r3, #0
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e07c      	b.n	800f3dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d104      	bne.n	800f2f2 <HAL_TIM_PWM_Start+0x82>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2f0:	e013      	b.n	800f31a <HAL_TIM_PWM_Start+0xaa>
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	2b04      	cmp	r3, #4
 800f2f6:	d104      	bne.n	800f302 <HAL_TIM_PWM_Start+0x92>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2202      	movs	r2, #2
 800f2fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f300:	e00b      	b.n	800f31a <HAL_TIM_PWM_Start+0xaa>
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	2b08      	cmp	r3, #8
 800f306:	d104      	bne.n	800f312 <HAL_TIM_PWM_Start+0xa2>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2202      	movs	r2, #2
 800f30c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f310:	e003      	b.n	800f31a <HAL_TIM_PWM_Start+0xaa>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2202      	movs	r2, #2
 800f316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2201      	movs	r2, #1
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	4618      	mov	r0, r3
 800f324:	f000 fe12 	bl	800ff4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a2d      	ldr	r2, [pc, #180]	; (800f3e4 <HAL_TIM_PWM_Start+0x174>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d004      	beq.n	800f33c <HAL_TIM_PWM_Start+0xcc>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a2c      	ldr	r2, [pc, #176]	; (800f3e8 <HAL_TIM_PWM_Start+0x178>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d101      	bne.n	800f340 <HAL_TIM_PWM_Start+0xd0>
 800f33c:	2301      	movs	r3, #1
 800f33e:	e000      	b.n	800f342 <HAL_TIM_PWM_Start+0xd2>
 800f340:	2300      	movs	r3, #0
 800f342:	2b00      	cmp	r3, #0
 800f344:	d007      	beq.n	800f356 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a22      	ldr	r2, [pc, #136]	; (800f3e4 <HAL_TIM_PWM_Start+0x174>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d022      	beq.n	800f3a6 <HAL_TIM_PWM_Start+0x136>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f368:	d01d      	beq.n	800f3a6 <HAL_TIM_PWM_Start+0x136>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a1f      	ldr	r2, [pc, #124]	; (800f3ec <HAL_TIM_PWM_Start+0x17c>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d018      	beq.n	800f3a6 <HAL_TIM_PWM_Start+0x136>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4a1d      	ldr	r2, [pc, #116]	; (800f3f0 <HAL_TIM_PWM_Start+0x180>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d013      	beq.n	800f3a6 <HAL_TIM_PWM_Start+0x136>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	4a1c      	ldr	r2, [pc, #112]	; (800f3f4 <HAL_TIM_PWM_Start+0x184>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d00e      	beq.n	800f3a6 <HAL_TIM_PWM_Start+0x136>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a16      	ldr	r2, [pc, #88]	; (800f3e8 <HAL_TIM_PWM_Start+0x178>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d009      	beq.n	800f3a6 <HAL_TIM_PWM_Start+0x136>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4a18      	ldr	r2, [pc, #96]	; (800f3f8 <HAL_TIM_PWM_Start+0x188>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d004      	beq.n	800f3a6 <HAL_TIM_PWM_Start+0x136>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a16      	ldr	r2, [pc, #88]	; (800f3fc <HAL_TIM_PWM_Start+0x18c>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d111      	bne.n	800f3ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	f003 0307 	and.w	r3, r3, #7
 800f3b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2b06      	cmp	r3, #6
 800f3b6:	d010      	beq.n	800f3da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f042 0201 	orr.w	r2, r2, #1
 800f3c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3c8:	e007      	b.n	800f3da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f042 0201 	orr.w	r2, r2, #1
 800f3d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3da:	2300      	movs	r3, #0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	40010000 	.word	0x40010000
 800f3e8:	40010400 	.word	0x40010400
 800f3ec:	40000400 	.word	0x40000400
 800f3f0:	40000800 	.word	0x40000800
 800f3f4:	40000c00 	.word	0x40000c00
 800f3f8:	40014000 	.word	0x40014000
 800f3fc:	40001800 	.word	0x40001800

0800f400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	f003 0302 	and.w	r3, r3, #2
 800f412:	2b02      	cmp	r3, #2
 800f414:	d122      	bne.n	800f45c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	f003 0302 	and.w	r3, r3, #2
 800f420:	2b02      	cmp	r3, #2
 800f422:	d11b      	bne.n	800f45c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f06f 0202 	mvn.w	r2, #2
 800f42c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	699b      	ldr	r3, [r3, #24]
 800f43a:	f003 0303 	and.w	r3, r3, #3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d003      	beq.n	800f44a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 fa7a 	bl	800f93c <HAL_TIM_IC_CaptureCallback>
 800f448:	e005      	b.n	800f456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 fa6c 	bl	800f928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 fa7d 	bl	800f950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	f003 0304 	and.w	r3, r3, #4
 800f466:	2b04      	cmp	r3, #4
 800f468:	d122      	bne.n	800f4b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	f003 0304 	and.w	r3, r3, #4
 800f474:	2b04      	cmp	r3, #4
 800f476:	d11b      	bne.n	800f4b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f06f 0204 	mvn.w	r2, #4
 800f480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2202      	movs	r2, #2
 800f486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	699b      	ldr	r3, [r3, #24]
 800f48e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fa50 	bl	800f93c <HAL_TIM_IC_CaptureCallback>
 800f49c:	e005      	b.n	800f4aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fa42 	bl	800f928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 fa53 	bl	800f950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	f003 0308 	and.w	r3, r3, #8
 800f4ba:	2b08      	cmp	r3, #8
 800f4bc:	d122      	bne.n	800f504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	f003 0308 	and.w	r3, r3, #8
 800f4c8:	2b08      	cmp	r3, #8
 800f4ca:	d11b      	bne.n	800f504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f06f 0208 	mvn.w	r2, #8
 800f4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2204      	movs	r2, #4
 800f4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	f003 0303 	and.w	r3, r3, #3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d003      	beq.n	800f4f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fa26 	bl	800f93c <HAL_TIM_IC_CaptureCallback>
 800f4f0:	e005      	b.n	800f4fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 fa18 	bl	800f928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 fa29 	bl	800f950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	691b      	ldr	r3, [r3, #16]
 800f50a:	f003 0310 	and.w	r3, r3, #16
 800f50e:	2b10      	cmp	r3, #16
 800f510:	d122      	bne.n	800f558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	f003 0310 	and.w	r3, r3, #16
 800f51c:	2b10      	cmp	r3, #16
 800f51e:	d11b      	bne.n	800f558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f06f 0210 	mvn.w	r2, #16
 800f528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2208      	movs	r2, #8
 800f52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	69db      	ldr	r3, [r3, #28]
 800f536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d003      	beq.n	800f546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 f9fc 	bl	800f93c <HAL_TIM_IC_CaptureCallback>
 800f544:	e005      	b.n	800f552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f000 f9ee 	bl	800f928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 f9ff 	bl	800f950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b01      	cmp	r3, #1
 800f564:	d10e      	bne.n	800f584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	f003 0301 	and.w	r3, r3, #1
 800f570:	2b01      	cmp	r3, #1
 800f572:	d107      	bne.n	800f584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f06f 0201 	mvn.w	r2, #1
 800f57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 f9c8 	bl	800f914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	691b      	ldr	r3, [r3, #16]
 800f58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f58e:	2b80      	cmp	r3, #128	; 0x80
 800f590:	d10e      	bne.n	800f5b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f59c:	2b80      	cmp	r3, #128	; 0x80
 800f59e:	d107      	bne.n	800f5b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fdcc 	bl	8010148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5ba:	2b40      	cmp	r3, #64	; 0x40
 800f5bc:	d10e      	bne.n	800f5dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5c8:	2b40      	cmp	r3, #64	; 0x40
 800f5ca:	d107      	bne.n	800f5dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 f9c4 	bl	800f964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	f003 0320 	and.w	r3, r3, #32
 800f5e6:	2b20      	cmp	r3, #32
 800f5e8:	d10e      	bne.n	800f608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	f003 0320 	and.w	r3, r3, #32
 800f5f4:	2b20      	cmp	r3, #32
 800f5f6:	d107      	bne.n	800f608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f06f 0220 	mvn.w	r2, #32
 800f600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 fd96 	bl	8010134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f622:	2b01      	cmp	r3, #1
 800f624:	d101      	bne.n	800f62a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f626:	2302      	movs	r3, #2
 800f628:	e0ac      	b.n	800f784 <HAL_TIM_PWM_ConfigChannel+0x174>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2201      	movs	r2, #1
 800f62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b0c      	cmp	r3, #12
 800f636:	f200 809f 	bhi.w	800f778 <HAL_TIM_PWM_ConfigChannel+0x168>
 800f63a:	a201      	add	r2, pc, #4	; (adr r2, 800f640 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f640:	0800f675 	.word	0x0800f675
 800f644:	0800f779 	.word	0x0800f779
 800f648:	0800f779 	.word	0x0800f779
 800f64c:	0800f779 	.word	0x0800f779
 800f650:	0800f6b5 	.word	0x0800f6b5
 800f654:	0800f779 	.word	0x0800f779
 800f658:	0800f779 	.word	0x0800f779
 800f65c:	0800f779 	.word	0x0800f779
 800f660:	0800f6f7 	.word	0x0800f6f7
 800f664:	0800f779 	.word	0x0800f779
 800f668:	0800f779 	.word	0x0800f779
 800f66c:	0800f779 	.word	0x0800f779
 800f670:	0800f737 	.word	0x0800f737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	68b9      	ldr	r1, [r7, #8]
 800f67a:	4618      	mov	r0, r3
 800f67c:	f000 fa1c 	bl	800fab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	699a      	ldr	r2, [r3, #24]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f042 0208 	orr.w	r2, r2, #8
 800f68e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	699a      	ldr	r2, [r3, #24]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f022 0204 	bic.w	r2, r2, #4
 800f69e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6999      	ldr	r1, [r3, #24]
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	691a      	ldr	r2, [r3, #16]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	619a      	str	r2, [r3, #24]
      break;
 800f6b2:	e062      	b.n	800f77a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68b9      	ldr	r1, [r7, #8]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 fa6c 	bl	800fb98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	699a      	ldr	r2, [r3, #24]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	699a      	ldr	r2, [r3, #24]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6999      	ldr	r1, [r3, #24]
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	691b      	ldr	r3, [r3, #16]
 800f6ea:	021a      	lsls	r2, r3, #8
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	430a      	orrs	r2, r1
 800f6f2:	619a      	str	r2, [r3, #24]
      break;
 800f6f4:	e041      	b.n	800f77a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	68b9      	ldr	r1, [r7, #8]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 fac1 	bl	800fc84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	69da      	ldr	r2, [r3, #28]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f042 0208 	orr.w	r2, r2, #8
 800f710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	69da      	ldr	r2, [r3, #28]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f022 0204 	bic.w	r2, r2, #4
 800f720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	69d9      	ldr	r1, [r3, #28]
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	691a      	ldr	r2, [r3, #16]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	430a      	orrs	r2, r1
 800f732:	61da      	str	r2, [r3, #28]
      break;
 800f734:	e021      	b.n	800f77a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	68b9      	ldr	r1, [r7, #8]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f000 fb15 	bl	800fd6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	69da      	ldr	r2, [r3, #28]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	69da      	ldr	r2, [r3, #28]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	69d9      	ldr	r1, [r3, #28]
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	021a      	lsls	r2, r3, #8
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	430a      	orrs	r2, r1
 800f774:	61da      	str	r2, [r3, #28]
      break;
 800f776:	e000      	b.n	800f77a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800f778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2200      	movs	r2, #0
 800f77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f782:	2300      	movs	r3, #0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3710      	adds	r7, #16
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d101      	bne.n	800f7a4 <HAL_TIM_ConfigClockSource+0x18>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	e0b3      	b.n	800f90c <HAL_TIM_ConfigClockSource+0x180>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f7c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f7ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7dc:	d03e      	beq.n	800f85c <HAL_TIM_ConfigClockSource+0xd0>
 800f7de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7e2:	f200 8087 	bhi.w	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f7e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7ea:	f000 8085 	beq.w	800f8f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f7ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7f2:	d87f      	bhi.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f7f4:	2b70      	cmp	r3, #112	; 0x70
 800f7f6:	d01a      	beq.n	800f82e <HAL_TIM_ConfigClockSource+0xa2>
 800f7f8:	2b70      	cmp	r3, #112	; 0x70
 800f7fa:	d87b      	bhi.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f7fc:	2b60      	cmp	r3, #96	; 0x60
 800f7fe:	d050      	beq.n	800f8a2 <HAL_TIM_ConfigClockSource+0x116>
 800f800:	2b60      	cmp	r3, #96	; 0x60
 800f802:	d877      	bhi.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f804:	2b50      	cmp	r3, #80	; 0x50
 800f806:	d03c      	beq.n	800f882 <HAL_TIM_ConfigClockSource+0xf6>
 800f808:	2b50      	cmp	r3, #80	; 0x50
 800f80a:	d873      	bhi.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f80c:	2b40      	cmp	r3, #64	; 0x40
 800f80e:	d058      	beq.n	800f8c2 <HAL_TIM_ConfigClockSource+0x136>
 800f810:	2b40      	cmp	r3, #64	; 0x40
 800f812:	d86f      	bhi.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f814:	2b30      	cmp	r3, #48	; 0x30
 800f816:	d064      	beq.n	800f8e2 <HAL_TIM_ConfigClockSource+0x156>
 800f818:	2b30      	cmp	r3, #48	; 0x30
 800f81a:	d86b      	bhi.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f81c:	2b20      	cmp	r3, #32
 800f81e:	d060      	beq.n	800f8e2 <HAL_TIM_ConfigClockSource+0x156>
 800f820:	2b20      	cmp	r3, #32
 800f822:	d867      	bhi.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
 800f824:	2b00      	cmp	r3, #0
 800f826:	d05c      	beq.n	800f8e2 <HAL_TIM_ConfigClockSource+0x156>
 800f828:	2b10      	cmp	r3, #16
 800f82a:	d05a      	beq.n	800f8e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f82c:	e062      	b.n	800f8f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6818      	ldr	r0, [r3, #0]
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	6899      	ldr	r1, [r3, #8]
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	685a      	ldr	r2, [r3, #4]
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	f000 fb65 	bl	800ff0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f850:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	609a      	str	r2, [r3, #8]
      break;
 800f85a:	e04e      	b.n	800f8fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6818      	ldr	r0, [r3, #0]
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	6899      	ldr	r1, [r3, #8]
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	685a      	ldr	r2, [r3, #4]
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	f000 fb4e 	bl	800ff0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	689a      	ldr	r2, [r3, #8]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f87e:	609a      	str	r2, [r3, #8]
      break;
 800f880:	e03b      	b.n	800f8fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6818      	ldr	r0, [r3, #0]
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	6859      	ldr	r1, [r3, #4]
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	461a      	mov	r2, r3
 800f890:	f000 fac2 	bl	800fe18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2150      	movs	r1, #80	; 0x50
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 fb1b 	bl	800fed6 <TIM_ITRx_SetConfig>
      break;
 800f8a0:	e02b      	b.n	800f8fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6818      	ldr	r0, [r3, #0]
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	6859      	ldr	r1, [r3, #4]
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	f000 fae1 	bl	800fe76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2160      	movs	r1, #96	; 0x60
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f000 fb0b 	bl	800fed6 <TIM_ITRx_SetConfig>
      break;
 800f8c0:	e01b      	b.n	800f8fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6818      	ldr	r0, [r3, #0]
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	6859      	ldr	r1, [r3, #4]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	f000 faa2 	bl	800fe18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	2140      	movs	r1, #64	; 0x40
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 fafb 	bl	800fed6 <TIM_ITRx_SetConfig>
      break;
 800f8e0:	e00b      	b.n	800f8fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	f000 faf2 	bl	800fed6 <TIM_ITRx_SetConfig>
        break;
 800f8f2:	e002      	b.n	800f8fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f8f4:	bf00      	nop
 800f8f6:	e000      	b.n	800f8fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f8f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f96c:	bf00      	nop
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a40      	ldr	r2, [pc, #256]	; (800fa8c <TIM_Base_SetConfig+0x114>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d013      	beq.n	800f9b8 <TIM_Base_SetConfig+0x40>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f996:	d00f      	beq.n	800f9b8 <TIM_Base_SetConfig+0x40>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a3d      	ldr	r2, [pc, #244]	; (800fa90 <TIM_Base_SetConfig+0x118>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d00b      	beq.n	800f9b8 <TIM_Base_SetConfig+0x40>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a3c      	ldr	r2, [pc, #240]	; (800fa94 <TIM_Base_SetConfig+0x11c>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d007      	beq.n	800f9b8 <TIM_Base_SetConfig+0x40>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4a3b      	ldr	r2, [pc, #236]	; (800fa98 <TIM_Base_SetConfig+0x120>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d003      	beq.n	800f9b8 <TIM_Base_SetConfig+0x40>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4a3a      	ldr	r2, [pc, #232]	; (800fa9c <TIM_Base_SetConfig+0x124>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d108      	bne.n	800f9ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a2f      	ldr	r2, [pc, #188]	; (800fa8c <TIM_Base_SetConfig+0x114>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d02b      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9d8:	d027      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a2c      	ldr	r2, [pc, #176]	; (800fa90 <TIM_Base_SetConfig+0x118>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d023      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a2b      	ldr	r2, [pc, #172]	; (800fa94 <TIM_Base_SetConfig+0x11c>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d01f      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4a2a      	ldr	r2, [pc, #168]	; (800fa98 <TIM_Base_SetConfig+0x120>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d01b      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a29      	ldr	r2, [pc, #164]	; (800fa9c <TIM_Base_SetConfig+0x124>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d017      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a28      	ldr	r2, [pc, #160]	; (800faa0 <TIM_Base_SetConfig+0x128>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d013      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a27      	ldr	r2, [pc, #156]	; (800faa4 <TIM_Base_SetConfig+0x12c>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d00f      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4a26      	ldr	r2, [pc, #152]	; (800faa8 <TIM_Base_SetConfig+0x130>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d00b      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4a25      	ldr	r2, [pc, #148]	; (800faac <TIM_Base_SetConfig+0x134>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d007      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a24      	ldr	r2, [pc, #144]	; (800fab0 <TIM_Base_SetConfig+0x138>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d003      	beq.n	800fa2a <TIM_Base_SetConfig+0xb2>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a23      	ldr	r2, [pc, #140]	; (800fab4 <TIM_Base_SetConfig+0x13c>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d108      	bne.n	800fa3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	68db      	ldr	r3, [r3, #12]
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	695b      	ldr	r3, [r3, #20]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	689a      	ldr	r2, [r3, #8]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4a0a      	ldr	r2, [pc, #40]	; (800fa8c <TIM_Base_SetConfig+0x114>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d003      	beq.n	800fa70 <TIM_Base_SetConfig+0xf8>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a0c      	ldr	r2, [pc, #48]	; (800fa9c <TIM_Base_SetConfig+0x124>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d103      	bne.n	800fa78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	691a      	ldr	r2, [r3, #16]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	615a      	str	r2, [r3, #20]
}
 800fa7e:	bf00      	nop
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	40010000 	.word	0x40010000
 800fa90:	40000400 	.word	0x40000400
 800fa94:	40000800 	.word	0x40000800
 800fa98:	40000c00 	.word	0x40000c00
 800fa9c:	40010400 	.word	0x40010400
 800faa0:	40014000 	.word	0x40014000
 800faa4:	40014400 	.word	0x40014400
 800faa8:	40014800 	.word	0x40014800
 800faac:	40001800 	.word	0x40001800
 800fab0:	40001c00 	.word	0x40001c00
 800fab4:	40002000 	.word	0x40002000

0800fab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fab8:	b480      	push	{r7}
 800faba:	b087      	sub	sp, #28
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6a1b      	ldr	r3, [r3, #32]
 800fac6:	f023 0201 	bic.w	r2, r3, #1
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	699b      	ldr	r3, [r3, #24]
 800fade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f023 0303 	bic.w	r3, r3, #3
 800faee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	4313      	orrs	r3, r2
 800faf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	f023 0302 	bic.w	r3, r3, #2
 800fb00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	697a      	ldr	r2, [r7, #20]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4a20      	ldr	r2, [pc, #128]	; (800fb90 <TIM_OC1_SetConfig+0xd8>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d003      	beq.n	800fb1c <TIM_OC1_SetConfig+0x64>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4a1f      	ldr	r2, [pc, #124]	; (800fb94 <TIM_OC1_SetConfig+0xdc>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d10c      	bne.n	800fb36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	f023 0308 	bic.w	r3, r3, #8
 800fb22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	697a      	ldr	r2, [r7, #20]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	f023 0304 	bic.w	r3, r3, #4
 800fb34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4a15      	ldr	r2, [pc, #84]	; (800fb90 <TIM_OC1_SetConfig+0xd8>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d003      	beq.n	800fb46 <TIM_OC1_SetConfig+0x8e>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4a14      	ldr	r2, [pc, #80]	; (800fb94 <TIM_OC1_SetConfig+0xdc>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d111      	bne.n	800fb6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	695b      	ldr	r3, [r3, #20]
 800fb5a:	693a      	ldr	r2, [r7, #16]
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	699b      	ldr	r3, [r3, #24]
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	4313      	orrs	r3, r2
 800fb68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	685a      	ldr	r2, [r3, #4]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	621a      	str	r2, [r3, #32]
}
 800fb84:	bf00      	nop
 800fb86:	371c      	adds	r7, #28
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr
 800fb90:	40010000 	.word	0x40010000
 800fb94:	40010400 	.word	0x40010400

0800fb98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6a1b      	ldr	r3, [r3, #32]
 800fba6:	f023 0210 	bic.w	r2, r3, #16
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	699b      	ldr	r3, [r3, #24]
 800fbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	021b      	lsls	r3, r3, #8
 800fbd6:	68fa      	ldr	r2, [r7, #12]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f023 0320 	bic.w	r3, r3, #32
 800fbe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	011b      	lsls	r3, r3, #4
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a22      	ldr	r2, [pc, #136]	; (800fc7c <TIM_OC2_SetConfig+0xe4>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d003      	beq.n	800fc00 <TIM_OC2_SetConfig+0x68>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4a21      	ldr	r2, [pc, #132]	; (800fc80 <TIM_OC2_SetConfig+0xe8>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d10d      	bne.n	800fc1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	011b      	lsls	r3, r3, #4
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	4313      	orrs	r3, r2
 800fc12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a17      	ldr	r2, [pc, #92]	; (800fc7c <TIM_OC2_SetConfig+0xe4>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d003      	beq.n	800fc2c <TIM_OC2_SetConfig+0x94>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a16      	ldr	r2, [pc, #88]	; (800fc80 <TIM_OC2_SetConfig+0xe8>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d113      	bne.n	800fc54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	695b      	ldr	r3, [r3, #20]
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	693a      	ldr	r2, [r7, #16]
 800fc44:	4313      	orrs	r3, r2
 800fc46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	699b      	ldr	r3, [r3, #24]
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	4313      	orrs	r3, r2
 800fc52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	697a      	ldr	r2, [r7, #20]
 800fc6c:	621a      	str	r2, [r3, #32]
}
 800fc6e:	bf00      	nop
 800fc70:	371c      	adds	r7, #28
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop
 800fc7c:	40010000 	.word	0x40010000
 800fc80:	40010400 	.word	0x40010400

0800fc84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b087      	sub	sp, #28
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6a1b      	ldr	r3, [r3, #32]
 800fc92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a1b      	ldr	r3, [r3, #32]
 800fc9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	69db      	ldr	r3, [r3, #28]
 800fcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f023 0303 	bic.w	r3, r3, #3
 800fcba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	021b      	lsls	r3, r3, #8
 800fcd4:	697a      	ldr	r2, [r7, #20]
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4a21      	ldr	r2, [pc, #132]	; (800fd64 <TIM_OC3_SetConfig+0xe0>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d003      	beq.n	800fcea <TIM_OC3_SetConfig+0x66>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4a20      	ldr	r2, [pc, #128]	; (800fd68 <TIM_OC3_SetConfig+0xe4>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d10d      	bne.n	800fd06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	021b      	lsls	r3, r3, #8
 800fcf8:	697a      	ldr	r2, [r7, #20]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4a16      	ldr	r2, [pc, #88]	; (800fd64 <TIM_OC3_SetConfig+0xe0>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d003      	beq.n	800fd16 <TIM_OC3_SetConfig+0x92>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4a15      	ldr	r2, [pc, #84]	; (800fd68 <TIM_OC3_SetConfig+0xe4>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d113      	bne.n	800fd3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	695b      	ldr	r3, [r3, #20]
 800fd2a:	011b      	lsls	r3, r3, #4
 800fd2c:	693a      	ldr	r2, [r7, #16]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	699b      	ldr	r3, [r3, #24]
 800fd36:	011b      	lsls	r3, r3, #4
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	693a      	ldr	r2, [r7, #16]
 800fd42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	68fa      	ldr	r2, [r7, #12]
 800fd48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	685a      	ldr	r2, [r3, #4]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	697a      	ldr	r2, [r7, #20]
 800fd56:	621a      	str	r2, [r3, #32]
}
 800fd58:	bf00      	nop
 800fd5a:	371c      	adds	r7, #28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr
 800fd64:	40010000 	.word	0x40010000
 800fd68:	40010400 	.word	0x40010400

0800fd6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b087      	sub	sp, #28
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a1b      	ldr	r3, [r3, #32]
 800fd7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	69db      	ldr	r3, [r3, #28]
 800fd92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fda2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	021b      	lsls	r3, r3, #8
 800fdaa:	68fa      	ldr	r2, [r7, #12]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fdb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	031b      	lsls	r3, r3, #12
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	4a12      	ldr	r2, [pc, #72]	; (800fe10 <TIM_OC4_SetConfig+0xa4>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d003      	beq.n	800fdd4 <TIM_OC4_SetConfig+0x68>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	4a11      	ldr	r2, [pc, #68]	; (800fe14 <TIM_OC4_SetConfig+0xa8>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d109      	bne.n	800fde8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fdda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	695b      	ldr	r3, [r3, #20]
 800fde0:	019b      	lsls	r3, r3, #6
 800fde2:	697a      	ldr	r2, [r7, #20]
 800fde4:	4313      	orrs	r3, r2
 800fde6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	697a      	ldr	r2, [r7, #20]
 800fdec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	685a      	ldr	r2, [r3, #4]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	693a      	ldr	r2, [r7, #16]
 800fe00:	621a      	str	r2, [r3, #32]
}
 800fe02:	bf00      	nop
 800fe04:	371c      	adds	r7, #28
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	40010000 	.word	0x40010000
 800fe14:	40010400 	.word	0x40010400

0800fe18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b087      	sub	sp, #28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6a1b      	ldr	r3, [r3, #32]
 800fe28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6a1b      	ldr	r3, [r3, #32]
 800fe2e:	f023 0201 	bic.w	r2, r3, #1
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	011b      	lsls	r3, r3, #4
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f023 030a 	bic.w	r3, r3, #10
 800fe54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	693a      	ldr	r2, [r7, #16]
 800fe62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	697a      	ldr	r2, [r7, #20]
 800fe68:	621a      	str	r2, [r3, #32]
}
 800fe6a:	bf00      	nop
 800fe6c:	371c      	adds	r7, #28
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe76:	b480      	push	{r7}
 800fe78:	b087      	sub	sp, #28
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	60f8      	str	r0, [r7, #12]
 800fe7e:	60b9      	str	r1, [r7, #8]
 800fe80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6a1b      	ldr	r3, [r3, #32]
 800fe86:	f023 0210 	bic.w	r2, r3, #16
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	699b      	ldr	r3, [r3, #24]
 800fe92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6a1b      	ldr	r3, [r3, #32]
 800fe98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	031b      	lsls	r3, r3, #12
 800fea6:	697a      	ldr	r2, [r7, #20]
 800fea8:	4313      	orrs	r3, r2
 800feaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800feb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	011b      	lsls	r3, r3, #4
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	4313      	orrs	r3, r2
 800febc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	697a      	ldr	r2, [r7, #20]
 800fec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	693a      	ldr	r2, [r7, #16]
 800fec8:	621a      	str	r2, [r3, #32]
}
 800feca:	bf00      	nop
 800fecc:	371c      	adds	r7, #28
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr

0800fed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fed6:	b480      	push	{r7}
 800fed8:	b085      	sub	sp, #20
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
 800fede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	689b      	ldr	r3, [r3, #8]
 800fee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	4313      	orrs	r3, r2
 800fef4:	f043 0307 	orr.w	r3, r3, #7
 800fef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	609a      	str	r2, [r3, #8]
}
 800ff00:	bf00      	nop
 800ff02:	3714      	adds	r7, #20
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b087      	sub	sp, #28
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
 800ff18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	021a      	lsls	r2, r3, #8
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	4313      	orrs	r3, r2
 800ff34:	697a      	ldr	r2, [r7, #20]
 800ff36:	4313      	orrs	r3, r2
 800ff38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	697a      	ldr	r2, [r7, #20]
 800ff3e:	609a      	str	r2, [r3, #8]
}
 800ff40:	bf00      	nop
 800ff42:	371c      	adds	r7, #28
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	f003 031f 	and.w	r3, r3, #31
 800ff5e:	2201      	movs	r2, #1
 800ff60:	fa02 f303 	lsl.w	r3, r2, r3
 800ff64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6a1a      	ldr	r2, [r3, #32]
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	43db      	mvns	r3, r3
 800ff6e:	401a      	ands	r2, r3
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6a1a      	ldr	r2, [r3, #32]
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	f003 031f 	and.w	r3, r3, #31
 800ff7e:	6879      	ldr	r1, [r7, #4]
 800ff80:	fa01 f303 	lsl.w	r3, r1, r3
 800ff84:	431a      	orrs	r2, r3
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	621a      	str	r2, [r3, #32]
}
 800ff8a:	bf00      	nop
 800ff8c:	371c      	adds	r7, #28
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
	...

0800ff98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d101      	bne.n	800ffb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffac:	2302      	movs	r3, #2
 800ffae:	e05a      	b.n	8010066 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2202      	movs	r2, #2
 800ffbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a21      	ldr	r2, [pc, #132]	; (8010074 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d022      	beq.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fffc:	d01d      	beq.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a1d      	ldr	r2, [pc, #116]	; (8010078 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d018      	beq.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a1b      	ldr	r2, [pc, #108]	; (801007c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d013      	beq.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a1a      	ldr	r2, [pc, #104]	; (8010080 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d00e      	beq.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a18      	ldr	r2, [pc, #96]	; (8010084 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d009      	beq.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a17      	ldr	r2, [pc, #92]	; (8010088 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d004      	beq.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a15      	ldr	r2, [pc, #84]	; (801008c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d10c      	bne.n	8010054 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	4313      	orrs	r3, r2
 801004a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2201      	movs	r2, #1
 8010058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3714      	adds	r7, #20
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	40010000 	.word	0x40010000
 8010078:	40000400 	.word	0x40000400
 801007c:	40000800 	.word	0x40000800
 8010080:	40000c00 	.word	0x40000c00
 8010084:	40010400 	.word	0x40010400
 8010088:	40014000 	.word	0x40014000
 801008c:	40001800 	.word	0x40001800

08010090 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801009a:	2300      	movs	r3, #0
 801009c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d101      	bne.n	80100ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80100a8:	2302      	movs	r3, #2
 80100aa:	e03d      	b.n	8010128 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2201      	movs	r2, #1
 80100b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	4313      	orrs	r3, r2
 80100c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	4313      	orrs	r3, r2
 80100ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	4313      	orrs	r3, r2
 80100dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4313      	orrs	r3, r2
 80100ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	691b      	ldr	r3, [r3, #16]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	695b      	ldr	r3, [r3, #20]
 8010104:	4313      	orrs	r3, r2
 8010106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	69db      	ldr	r3, [r3, #28]
 8010112:	4313      	orrs	r3, r2
 8010114:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010126:	2300      	movs	r3, #0
}
 8010128:	4618      	mov	r0, r3
 801012a:	3714      	adds	r7, #20
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801013c:	bf00      	nop
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010150:	bf00      	nop
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d101      	bne.n	801016e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801016a:	2301      	movs	r3, #1
 801016c:	e03f      	b.n	80101ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010174:	b2db      	uxtb	r3, r3
 8010176:	2b00      	cmp	r3, #0
 8010178:	d106      	bne.n	8010188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7fb ffbc 	bl	800c100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2224      	movs	r2, #36	; 0x24
 801018c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	68da      	ldr	r2, [r3, #12]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801019e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 fc7b 	bl	8010a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	691a      	ldr	r2, [r3, #16]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80101b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	695a      	ldr	r2, [r3, #20]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80101c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	68da      	ldr	r2, [r3, #12]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80101d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2220      	movs	r2, #32
 80101e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2220      	movs	r2, #32
 80101e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b08a      	sub	sp, #40	; 0x28
 80101fa:	af02      	add	r7, sp, #8
 80101fc:	60f8      	str	r0, [r7, #12]
 80101fe:	60b9      	str	r1, [r7, #8]
 8010200:	603b      	str	r3, [r7, #0]
 8010202:	4613      	mov	r3, r2
 8010204:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010206:	2300      	movs	r3, #0
 8010208:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010210:	b2db      	uxtb	r3, r3
 8010212:	2b20      	cmp	r3, #32
 8010214:	d17c      	bne.n	8010310 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d002      	beq.n	8010222 <HAL_UART_Transmit+0x2c>
 801021c:	88fb      	ldrh	r3, [r7, #6]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d101      	bne.n	8010226 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010222:	2301      	movs	r3, #1
 8010224:	e075      	b.n	8010312 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801022c:	2b01      	cmp	r3, #1
 801022e:	d101      	bne.n	8010234 <HAL_UART_Transmit+0x3e>
 8010230:	2302      	movs	r3, #2
 8010232:	e06e      	b.n	8010312 <HAL_UART_Transmit+0x11c>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2201      	movs	r2, #1
 8010238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2221      	movs	r2, #33	; 0x21
 8010246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801024a:	f7fc f85d 	bl	800c308 <HAL_GetTick>
 801024e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	88fa      	ldrh	r2, [r7, #6]
 8010254:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	88fa      	ldrh	r2, [r7, #6]
 801025a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	689b      	ldr	r3, [r3, #8]
 8010260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010264:	d108      	bne.n	8010278 <HAL_UART_Transmit+0x82>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d104      	bne.n	8010278 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801026e:	2300      	movs	r3, #0
 8010270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	61bb      	str	r3, [r7, #24]
 8010276:	e003      	b.n	8010280 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801027c:	2300      	movs	r3, #0
 801027e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2200      	movs	r2, #0
 8010284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8010288:	e02a      	b.n	80102e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2200      	movs	r2, #0
 8010292:	2180      	movs	r1, #128	; 0x80
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f000 fa3d 	bl	8010714 <UART_WaitOnFlagUntilTimeout>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d001      	beq.n	80102a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80102a0:	2303      	movs	r3, #3
 80102a2:	e036      	b.n	8010312 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d10b      	bne.n	80102c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	881b      	ldrh	r3, [r3, #0]
 80102ae:	461a      	mov	r2, r3
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	3302      	adds	r3, #2
 80102be:	61bb      	str	r3, [r7, #24]
 80102c0:	e007      	b.n	80102d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	781a      	ldrb	r2, [r3, #0]
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	3301      	adds	r3, #1
 80102d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	3b01      	subs	r3, #1
 80102da:	b29a      	uxth	r2, r3
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1cf      	bne.n	801028a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2200      	movs	r2, #0
 80102f2:	2140      	movs	r1, #64	; 0x40
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f000 fa0d 	bl	8010714 <UART_WaitOnFlagUntilTimeout>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d001      	beq.n	8010304 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010300:	2303      	movs	r3, #3
 8010302:	e006      	b.n	8010312 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2220      	movs	r2, #32
 8010308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801030c:	2300      	movs	r3, #0
 801030e:	e000      	b.n	8010312 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010310:	2302      	movs	r3, #2
  }
}
 8010312:	4618      	mov	r0, r3
 8010314:	3720      	adds	r7, #32
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b084      	sub	sp, #16
 801031e:	af00      	add	r7, sp, #0
 8010320:	60f8      	str	r0, [r7, #12]
 8010322:	60b9      	str	r1, [r7, #8]
 8010324:	4613      	mov	r3, r2
 8010326:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b20      	cmp	r3, #32
 8010332:	d11d      	bne.n	8010370 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d002      	beq.n	8010340 <HAL_UART_Receive_IT+0x26>
 801033a:	88fb      	ldrh	r3, [r7, #6]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010340:	2301      	movs	r3, #1
 8010342:	e016      	b.n	8010372 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801034a:	2b01      	cmp	r3, #1
 801034c:	d101      	bne.n	8010352 <HAL_UART_Receive_IT+0x38>
 801034e:	2302      	movs	r3, #2
 8010350:	e00f      	b.n	8010372 <HAL_UART_Receive_IT+0x58>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2201      	movs	r2, #1
 8010356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2200      	movs	r2, #0
 801035e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8010360:	88fb      	ldrh	r3, [r7, #6]
 8010362:	461a      	mov	r2, r3
 8010364:	68b9      	ldr	r1, [r7, #8]
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f000 fa1e 	bl	80107a8 <UART_Start_Receive_IT>
 801036c:	4603      	mov	r3, r0
 801036e:	e000      	b.n	8010372 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010370:	2302      	movs	r3, #2
  }
}
 8010372:	4618      	mov	r0, r3
 8010374:	3710      	adds	r7, #16
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
	...

0801037c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b08a      	sub	sp, #40	; 0x28
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	695b      	ldr	r3, [r3, #20]
 801039a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 801039c:	2300      	movs	r3, #0
 801039e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80103a0:	2300      	movs	r3, #0
 80103a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80103a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a6:	f003 030f 	and.w	r3, r3, #15
 80103aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d10d      	bne.n	80103ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b4:	f003 0320 	and.w	r3, r3, #32
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d008      	beq.n	80103ce <HAL_UART_IRQHandler+0x52>
 80103bc:	6a3b      	ldr	r3, [r7, #32]
 80103be:	f003 0320 	and.w	r3, r3, #32
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d003      	beq.n	80103ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 fad1 	bl	801096e <UART_Receive_IT>
      return;
 80103cc:	e17c      	b.n	80106c8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 80b1 	beq.w	8010538 <HAL_UART_IRQHandler+0x1bc>
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	f003 0301 	and.w	r3, r3, #1
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d105      	bne.n	80103ec <HAL_UART_IRQHandler+0x70>
 80103e0:	6a3b      	ldr	r3, [r7, #32]
 80103e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	f000 80a6 	beq.w	8010538 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	f003 0301 	and.w	r3, r3, #1
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d00a      	beq.n	801040c <HAL_UART_IRQHandler+0x90>
 80103f6:	6a3b      	ldr	r3, [r7, #32]
 80103f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d005      	beq.n	801040c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010404:	f043 0201 	orr.w	r2, r3, #1
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040e:	f003 0304 	and.w	r3, r3, #4
 8010412:	2b00      	cmp	r3, #0
 8010414:	d00a      	beq.n	801042c <HAL_UART_IRQHandler+0xb0>
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	f003 0301 	and.w	r3, r3, #1
 801041c:	2b00      	cmp	r3, #0
 801041e:	d005      	beq.n	801042c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010424:	f043 0202 	orr.w	r2, r3, #2
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042e:	f003 0302 	and.w	r3, r3, #2
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00a      	beq.n	801044c <HAL_UART_IRQHandler+0xd0>
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	f003 0301 	and.w	r3, r3, #1
 801043c:	2b00      	cmp	r3, #0
 801043e:	d005      	beq.n	801044c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010444:	f043 0204 	orr.w	r2, r3, #4
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044e:	f003 0308 	and.w	r3, r3, #8
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00f      	beq.n	8010476 <HAL_UART_IRQHandler+0xfa>
 8010456:	6a3b      	ldr	r3, [r7, #32]
 8010458:	f003 0320 	and.w	r3, r3, #32
 801045c:	2b00      	cmp	r3, #0
 801045e:	d104      	bne.n	801046a <HAL_UART_IRQHandler+0xee>
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	d005      	beq.n	8010476 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801046e:	f043 0208 	orr.w	r2, r3, #8
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801047a:	2b00      	cmp	r3, #0
 801047c:	f000 811f 	beq.w	80106be <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010482:	f003 0320 	and.w	r3, r3, #32
 8010486:	2b00      	cmp	r3, #0
 8010488:	d007      	beq.n	801049a <HAL_UART_IRQHandler+0x11e>
 801048a:	6a3b      	ldr	r3, [r7, #32]
 801048c:	f003 0320 	and.w	r3, r3, #32
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f000 fa6a 	bl	801096e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	695b      	ldr	r3, [r3, #20]
 80104a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a4:	2b40      	cmp	r3, #64	; 0x40
 80104a6:	bf0c      	ite	eq
 80104a8:	2301      	moveq	r3, #1
 80104aa:	2300      	movne	r3, #0
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104b4:	f003 0308 	and.w	r3, r3, #8
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d102      	bne.n	80104c2 <HAL_UART_IRQHandler+0x146>
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d031      	beq.n	8010526 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 f9aa 	bl	801081c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	695b      	ldr	r3, [r3, #20]
 80104ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104d2:	2b40      	cmp	r3, #64	; 0x40
 80104d4:	d123      	bne.n	801051e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	695a      	ldr	r2, [r3, #20]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d013      	beq.n	8010516 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104f2:	4a77      	ldr	r2, [pc, #476]	; (80106d0 <HAL_UART_IRQHandler+0x354>)
 80104f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fd fb1d 	bl	800db3a <HAL_DMA_Abort_IT>
 8010500:	4603      	mov	r3, r0
 8010502:	2b00      	cmp	r3, #0
 8010504:	d016      	beq.n	8010534 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801050a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010510:	4610      	mov	r0, r2
 8010512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010514:	e00e      	b.n	8010534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 f8e6 	bl	80106e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801051c:	e00a      	b.n	8010534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f8e2 	bl	80106e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010524:	e006      	b.n	8010534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f8de 	bl	80106e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010532:	e0c4      	b.n	80106be <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010534:	bf00      	nop
    return;
 8010536:	e0c2      	b.n	80106be <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801053c:	2b01      	cmp	r3, #1
 801053e:	f040 80a2 	bne.w	8010686 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8010542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010544:	f003 0310 	and.w	r3, r3, #16
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 809c 	beq.w	8010686 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	f003 0310 	and.w	r3, r3, #16
 8010554:	2b00      	cmp	r3, #0
 8010556:	f000 8096 	beq.w	8010686 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801055a:	2300      	movs	r3, #0
 801055c:	60fb      	str	r3, [r7, #12]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	60fb      	str	r3, [r7, #12]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	60fb      	str	r3, [r7, #12]
 801056e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	695b      	ldr	r3, [r3, #20]
 8010576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801057a:	2b40      	cmp	r3, #64	; 0x40
 801057c:	d14f      	bne.n	801061e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8010588:	8a3b      	ldrh	r3, [r7, #16]
 801058a:	2b00      	cmp	r3, #0
 801058c:	f000 8099 	beq.w	80106c2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010594:	8a3a      	ldrh	r2, [r7, #16]
 8010596:	429a      	cmp	r2, r3
 8010598:	f080 8093 	bcs.w	80106c2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	8a3a      	ldrh	r2, [r7, #16]
 80105a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a6:	69db      	ldr	r3, [r3, #28]
 80105a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105ac:	d02b      	beq.n	8010606 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	68da      	ldr	r2, [r3, #12]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80105bc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	695a      	ldr	r2, [r3, #20]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f022 0201 	bic.w	r2, r2, #1
 80105cc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	695a      	ldr	r2, [r3, #20]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105dc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2220      	movs	r2, #32
 80105e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	68da      	ldr	r2, [r3, #12]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f022 0210 	bic.w	r2, r2, #16
 80105fa:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010600:	4618      	mov	r0, r3
 8010602:	f7fd fa2a 	bl	800da5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801060e:	b29b      	uxth	r3, r3
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	b29b      	uxth	r3, r3
 8010614:	4619      	mov	r1, r3
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 f870 	bl	80106fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801061c:	e051      	b.n	80106c2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010626:	b29b      	uxth	r3, r3
 8010628:	1ad3      	subs	r3, r2, r3
 801062a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010630:	b29b      	uxth	r3, r3
 8010632:	2b00      	cmp	r3, #0
 8010634:	d047      	beq.n	80106c6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8010636:	8a7b      	ldrh	r3, [r7, #18]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d044      	beq.n	80106c6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68da      	ldr	r2, [r3, #12]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801064a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	695a      	ldr	r2, [r3, #20]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f022 0201 	bic.w	r2, r2, #1
 801065a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2220      	movs	r2, #32
 8010660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	68da      	ldr	r2, [r3, #12]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f022 0210 	bic.w	r2, r2, #16
 8010678:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801067a:	8a7b      	ldrh	r3, [r7, #18]
 801067c:	4619      	mov	r1, r3
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 f83c 	bl	80106fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010684:	e01f      	b.n	80106c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801068c:	2b00      	cmp	r3, #0
 801068e:	d008      	beq.n	80106a2 <HAL_UART_IRQHandler+0x326>
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010696:	2b00      	cmp	r3, #0
 8010698:	d003      	beq.n	80106a2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 f8ff 	bl	801089e <UART_Transmit_IT>
    return;
 80106a0:	e012      	b.n	80106c8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80106a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00d      	beq.n	80106c8 <HAL_UART_IRQHandler+0x34c>
 80106ac:	6a3b      	ldr	r3, [r7, #32]
 80106ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d008      	beq.n	80106c8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 f941 	bl	801093e <UART_EndTransmit_IT>
    return;
 80106bc:	e004      	b.n	80106c8 <HAL_UART_IRQHandler+0x34c>
    return;
 80106be:	bf00      	nop
 80106c0:	e002      	b.n	80106c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80106c2:	bf00      	nop
 80106c4:	e000      	b.n	80106c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80106c6:	bf00      	nop
  }
}
 80106c8:	3728      	adds	r7, #40	; 0x28
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	08010877 	.word	0x08010877

080106d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010708:	bf00      	nop
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	603b      	str	r3, [r7, #0]
 8010720:	4613      	mov	r3, r2
 8010722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010724:	e02c      	b.n	8010780 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801072c:	d028      	beq.n	8010780 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d007      	beq.n	8010744 <UART_WaitOnFlagUntilTimeout+0x30>
 8010734:	f7fb fde8 	bl	800c308 <HAL_GetTick>
 8010738:	4602      	mov	r2, r0
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	69ba      	ldr	r2, [r7, #24]
 8010740:	429a      	cmp	r2, r3
 8010742:	d21d      	bcs.n	8010780 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68da      	ldr	r2, [r3, #12]
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010752:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	695a      	ldr	r2, [r3, #20]
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f022 0201 	bic.w	r2, r2, #1
 8010762:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2220      	movs	r2, #32
 8010768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2220      	movs	r2, #32
 8010770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2200      	movs	r2, #0
 8010778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801077c:	2303      	movs	r3, #3
 801077e:	e00f      	b.n	80107a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	4013      	ands	r3, r2
 801078a:	68ba      	ldr	r2, [r7, #8]
 801078c:	429a      	cmp	r2, r3
 801078e:	bf0c      	ite	eq
 8010790:	2301      	moveq	r3, #1
 8010792:	2300      	movne	r3, #0
 8010794:	b2db      	uxtb	r3, r3
 8010796:	461a      	mov	r2, r3
 8010798:	79fb      	ldrb	r3, [r7, #7]
 801079a:	429a      	cmp	r2, r3
 801079c:	d0c3      	beq.n	8010726 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3710      	adds	r7, #16
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	4613      	mov	r3, r2
 80107b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	68ba      	ldr	r2, [r7, #8]
 80107ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	88fa      	ldrh	r2, [r7, #6]
 80107c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	88fa      	ldrh	r2, [r7, #6]
 80107c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2200      	movs	r2, #0
 80107cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2222      	movs	r2, #34	; 0x22
 80107d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	68da      	ldr	r2, [r3, #12]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107ec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	695a      	ldr	r2, [r3, #20]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f042 0201 	orr.w	r2, r2, #1
 80107fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	68da      	ldr	r2, [r3, #12]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f042 0220 	orr.w	r2, r2, #32
 801080c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	3714      	adds	r7, #20
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	68da      	ldr	r2, [r3, #12]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010832:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	695a      	ldr	r2, [r3, #20]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f022 0201 	bic.w	r2, r2, #1
 8010842:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010848:	2b01      	cmp	r3, #1
 801084a:	d107      	bne.n	801085c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68da      	ldr	r2, [r3, #12]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f022 0210 	bic.w	r2, r2, #16
 801085a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2220      	movs	r2, #32
 8010860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	631a      	str	r2, [r3, #48]	; 0x30
}
 801086a:	bf00      	nop
 801086c:	370c      	adds	r7, #12
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr

08010876 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b084      	sub	sp, #16
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010882:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2200      	movs	r2, #0
 8010888:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2200      	movs	r2, #0
 801088e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7ff ff29 	bl	80106e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801089e:	b480      	push	{r7}
 80108a0:	b085      	sub	sp, #20
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b21      	cmp	r3, #33	; 0x21
 80108b0:	d13e      	bne.n	8010930 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	689b      	ldr	r3, [r3, #8]
 80108b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108ba:	d114      	bne.n	80108e6 <UART_Transmit_IT+0x48>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	691b      	ldr	r3, [r3, #16]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d110      	bne.n	80108e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	461a      	mov	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80108d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6a1b      	ldr	r3, [r3, #32]
 80108de:	1c9a      	adds	r2, r3, #2
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	621a      	str	r2, [r3, #32]
 80108e4:	e008      	b.n	80108f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6a1b      	ldr	r3, [r3, #32]
 80108ea:	1c59      	adds	r1, r3, #1
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	6211      	str	r1, [r2, #32]
 80108f0:	781a      	ldrb	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	3b01      	subs	r3, #1
 8010900:	b29b      	uxth	r3, r3
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	4619      	mov	r1, r3
 8010906:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010908:	2b00      	cmp	r3, #0
 801090a:	d10f      	bne.n	801092c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	68da      	ldr	r2, [r3, #12]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801091a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	68da      	ldr	r2, [r3, #12]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801092a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801092c:	2300      	movs	r3, #0
 801092e:	e000      	b.n	8010932 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010930:	2302      	movs	r3, #2
  }
}
 8010932:	4618      	mov	r0, r3
 8010934:	3714      	adds	r7, #20
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr

0801093e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b082      	sub	sp, #8
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68da      	ldr	r2, [r3, #12]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010954:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2220      	movs	r2, #32
 801095a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7ff feb8 	bl	80106d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010964:	2300      	movs	r3, #0
}
 8010966:	4618      	mov	r0, r3
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b084      	sub	sp, #16
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801097c:	b2db      	uxtb	r3, r3
 801097e:	2b22      	cmp	r3, #34	; 0x22
 8010980:	f040 8087 	bne.w	8010a92 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801098c:	d117      	bne.n	80109be <UART_Receive_IT+0x50>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	691b      	ldr	r3, [r3, #16]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d113      	bne.n	80109be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010996:	2300      	movs	r3, #0
 8010998:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109ac:	b29a      	uxth	r2, r3
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109b6:	1c9a      	adds	r2, r3, #2
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	629a      	str	r2, [r3, #40]	; 0x28
 80109bc:	e026      	b.n	8010a0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80109c4:	2300      	movs	r3, #0
 80109c6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109d0:	d007      	beq.n	80109e2 <UART_Receive_IT+0x74>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d10a      	bne.n	80109f0 <UART_Receive_IT+0x82>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	691b      	ldr	r3, [r3, #16]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d106      	bne.n	80109f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	b2da      	uxtb	r2, r3
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	701a      	strb	r2, [r3, #0]
 80109ee:	e008      	b.n	8010a02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a06:	1c5a      	adds	r2, r3, #1
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	3b01      	subs	r3, #1
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	4619      	mov	r1, r3
 8010a1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d136      	bne.n	8010a8e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	68da      	ldr	r2, [r3, #12]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f022 0220 	bic.w	r2, r2, #32
 8010a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	68da      	ldr	r2, [r3, #12]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	695a      	ldr	r2, [r3, #20]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f022 0201 	bic.w	r2, r2, #1
 8010a4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2220      	movs	r2, #32
 8010a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d10e      	bne.n	8010a7e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68da      	ldr	r2, [r3, #12]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f022 0210 	bic.w	r2, r2, #16
 8010a6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff fe40 	bl	80106fc <HAL_UARTEx_RxEventCallback>
 8010a7c:	e002      	b.n	8010a84 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7fb fba0 	bl	800c1c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2200      	movs	r2, #0
 8010a88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e002      	b.n	8010a94 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	e000      	b.n	8010a94 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8010a92:	2302      	movs	r3, #2
  }
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa0:	b09f      	sub	sp, #124	; 0x7c
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	691b      	ldr	r3, [r3, #16]
 8010aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab2:	68d9      	ldr	r1, [r3, #12]
 8010ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	ea40 0301 	orr.w	r3, r0, r1
 8010abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ac0:	689a      	ldr	r2, [r3, #8]
 8010ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ac4:	691b      	ldr	r3, [r3, #16]
 8010ac6:	431a      	orrs	r2, r3
 8010ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010aca:	695b      	ldr	r3, [r3, #20]
 8010acc:	431a      	orrs	r2, r3
 8010ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ad0:	69db      	ldr	r3, [r3, #28]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010ae0:	f021 010c 	bic.w	r1, r1, #12
 8010ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010aea:	430b      	orrs	r3, r1
 8010aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	695b      	ldr	r3, [r3, #20]
 8010af4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010afa:	6999      	ldr	r1, [r3, #24]
 8010afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	ea40 0301 	orr.w	r3, r0, r1
 8010b04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	4bc5      	ldr	r3, [pc, #788]	; (8010e20 <UART_SetConfig+0x384>)
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d004      	beq.n	8010b1a <UART_SetConfig+0x7e>
 8010b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	4bc3      	ldr	r3, [pc, #780]	; (8010e24 <UART_SetConfig+0x388>)
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d103      	bne.n	8010b22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010b1a:	f7fd fb35 	bl	800e188 <HAL_RCC_GetPCLK2Freq>
 8010b1e:	6778      	str	r0, [r7, #116]	; 0x74
 8010b20:	e002      	b.n	8010b28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010b22:	f7fd fb1d 	bl	800e160 <HAL_RCC_GetPCLK1Freq>
 8010b26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b2a:	69db      	ldr	r3, [r3, #28]
 8010b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b30:	f040 80b6 	bne.w	8010ca0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b36:	461c      	mov	r4, r3
 8010b38:	f04f 0500 	mov.w	r5, #0
 8010b3c:	4622      	mov	r2, r4
 8010b3e:	462b      	mov	r3, r5
 8010b40:	1891      	adds	r1, r2, r2
 8010b42:	6439      	str	r1, [r7, #64]	; 0x40
 8010b44:	415b      	adcs	r3, r3
 8010b46:	647b      	str	r3, [r7, #68]	; 0x44
 8010b48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010b4c:	1912      	adds	r2, r2, r4
 8010b4e:	eb45 0303 	adc.w	r3, r5, r3
 8010b52:	f04f 0000 	mov.w	r0, #0
 8010b56:	f04f 0100 	mov.w	r1, #0
 8010b5a:	00d9      	lsls	r1, r3, #3
 8010b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010b60:	00d0      	lsls	r0, r2, #3
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	1911      	adds	r1, r2, r4
 8010b68:	6639      	str	r1, [r7, #96]	; 0x60
 8010b6a:	416b      	adcs	r3, r5
 8010b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8010b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	461a      	mov	r2, r3
 8010b74:	f04f 0300 	mov.w	r3, #0
 8010b78:	1891      	adds	r1, r2, r2
 8010b7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8010b7c:	415b      	adcs	r3, r3
 8010b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010b84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010b88:	f7f6 f91c 	bl	8006dc4 <__aeabi_uldivmod>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	460b      	mov	r3, r1
 8010b90:	4ba5      	ldr	r3, [pc, #660]	; (8010e28 <UART_SetConfig+0x38c>)
 8010b92:	fba3 2302 	umull	r2, r3, r3, r2
 8010b96:	095b      	lsrs	r3, r3, #5
 8010b98:	011e      	lsls	r6, r3, #4
 8010b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b9c:	461c      	mov	r4, r3
 8010b9e:	f04f 0500 	mov.w	r5, #0
 8010ba2:	4622      	mov	r2, r4
 8010ba4:	462b      	mov	r3, r5
 8010ba6:	1891      	adds	r1, r2, r2
 8010ba8:	6339      	str	r1, [r7, #48]	; 0x30
 8010baa:	415b      	adcs	r3, r3
 8010bac:	637b      	str	r3, [r7, #52]	; 0x34
 8010bae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010bb2:	1912      	adds	r2, r2, r4
 8010bb4:	eb45 0303 	adc.w	r3, r5, r3
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	f04f 0100 	mov.w	r1, #0
 8010bc0:	00d9      	lsls	r1, r3, #3
 8010bc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010bc6:	00d0      	lsls	r0, r2, #3
 8010bc8:	4602      	mov	r2, r0
 8010bca:	460b      	mov	r3, r1
 8010bcc:	1911      	adds	r1, r2, r4
 8010bce:	65b9      	str	r1, [r7, #88]	; 0x58
 8010bd0:	416b      	adcs	r3, r5
 8010bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	461a      	mov	r2, r3
 8010bda:	f04f 0300 	mov.w	r3, #0
 8010bde:	1891      	adds	r1, r2, r2
 8010be0:	62b9      	str	r1, [r7, #40]	; 0x28
 8010be2:	415b      	adcs	r3, r3
 8010be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010bea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010bee:	f7f6 f8e9 	bl	8006dc4 <__aeabi_uldivmod>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	4b8c      	ldr	r3, [pc, #560]	; (8010e28 <UART_SetConfig+0x38c>)
 8010bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8010bfc:	095b      	lsrs	r3, r3, #5
 8010bfe:	2164      	movs	r1, #100	; 0x64
 8010c00:	fb01 f303 	mul.w	r3, r1, r3
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	00db      	lsls	r3, r3, #3
 8010c08:	3332      	adds	r3, #50	; 0x32
 8010c0a:	4a87      	ldr	r2, [pc, #540]	; (8010e28 <UART_SetConfig+0x38c>)
 8010c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8010c10:	095b      	lsrs	r3, r3, #5
 8010c12:	005b      	lsls	r3, r3, #1
 8010c14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010c18:	441e      	add	r6, r3
 8010c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f04f 0100 	mov.w	r1, #0
 8010c22:	4602      	mov	r2, r0
 8010c24:	460b      	mov	r3, r1
 8010c26:	1894      	adds	r4, r2, r2
 8010c28:	623c      	str	r4, [r7, #32]
 8010c2a:	415b      	adcs	r3, r3
 8010c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8010c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010c32:	1812      	adds	r2, r2, r0
 8010c34:	eb41 0303 	adc.w	r3, r1, r3
 8010c38:	f04f 0400 	mov.w	r4, #0
 8010c3c:	f04f 0500 	mov.w	r5, #0
 8010c40:	00dd      	lsls	r5, r3, #3
 8010c42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010c46:	00d4      	lsls	r4, r2, #3
 8010c48:	4622      	mov	r2, r4
 8010c4a:	462b      	mov	r3, r5
 8010c4c:	1814      	adds	r4, r2, r0
 8010c4e:	653c      	str	r4, [r7, #80]	; 0x50
 8010c50:	414b      	adcs	r3, r1
 8010c52:	657b      	str	r3, [r7, #84]	; 0x54
 8010c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	461a      	mov	r2, r3
 8010c5a:	f04f 0300 	mov.w	r3, #0
 8010c5e:	1891      	adds	r1, r2, r2
 8010c60:	61b9      	str	r1, [r7, #24]
 8010c62:	415b      	adcs	r3, r3
 8010c64:	61fb      	str	r3, [r7, #28]
 8010c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010c6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010c6e:	f7f6 f8a9 	bl	8006dc4 <__aeabi_uldivmod>
 8010c72:	4602      	mov	r2, r0
 8010c74:	460b      	mov	r3, r1
 8010c76:	4b6c      	ldr	r3, [pc, #432]	; (8010e28 <UART_SetConfig+0x38c>)
 8010c78:	fba3 1302 	umull	r1, r3, r3, r2
 8010c7c:	095b      	lsrs	r3, r3, #5
 8010c7e:	2164      	movs	r1, #100	; 0x64
 8010c80:	fb01 f303 	mul.w	r3, r1, r3
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	00db      	lsls	r3, r3, #3
 8010c88:	3332      	adds	r3, #50	; 0x32
 8010c8a:	4a67      	ldr	r2, [pc, #412]	; (8010e28 <UART_SetConfig+0x38c>)
 8010c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8010c90:	095b      	lsrs	r3, r3, #5
 8010c92:	f003 0207 	and.w	r2, r3, #7
 8010c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4432      	add	r2, r6
 8010c9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010c9e:	e0b9      	b.n	8010e14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ca2:	461c      	mov	r4, r3
 8010ca4:	f04f 0500 	mov.w	r5, #0
 8010ca8:	4622      	mov	r2, r4
 8010caa:	462b      	mov	r3, r5
 8010cac:	1891      	adds	r1, r2, r2
 8010cae:	6139      	str	r1, [r7, #16]
 8010cb0:	415b      	adcs	r3, r3
 8010cb2:	617b      	str	r3, [r7, #20]
 8010cb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010cb8:	1912      	adds	r2, r2, r4
 8010cba:	eb45 0303 	adc.w	r3, r5, r3
 8010cbe:	f04f 0000 	mov.w	r0, #0
 8010cc2:	f04f 0100 	mov.w	r1, #0
 8010cc6:	00d9      	lsls	r1, r3, #3
 8010cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010ccc:	00d0      	lsls	r0, r2, #3
 8010cce:	4602      	mov	r2, r0
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	eb12 0804 	adds.w	r8, r2, r4
 8010cd6:	eb43 0905 	adc.w	r9, r3, r5
 8010cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f04f 0100 	mov.w	r1, #0
 8010ce4:	f04f 0200 	mov.w	r2, #0
 8010ce8:	f04f 0300 	mov.w	r3, #0
 8010cec:	008b      	lsls	r3, r1, #2
 8010cee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010cf2:	0082      	lsls	r2, r0, #2
 8010cf4:	4640      	mov	r0, r8
 8010cf6:	4649      	mov	r1, r9
 8010cf8:	f7f6 f864 	bl	8006dc4 <__aeabi_uldivmod>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	460b      	mov	r3, r1
 8010d00:	4b49      	ldr	r3, [pc, #292]	; (8010e28 <UART_SetConfig+0x38c>)
 8010d02:	fba3 2302 	umull	r2, r3, r3, r2
 8010d06:	095b      	lsrs	r3, r3, #5
 8010d08:	011e      	lsls	r6, r3, #4
 8010d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f04f 0100 	mov.w	r1, #0
 8010d12:	4602      	mov	r2, r0
 8010d14:	460b      	mov	r3, r1
 8010d16:	1894      	adds	r4, r2, r2
 8010d18:	60bc      	str	r4, [r7, #8]
 8010d1a:	415b      	adcs	r3, r3
 8010d1c:	60fb      	str	r3, [r7, #12]
 8010d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010d22:	1812      	adds	r2, r2, r0
 8010d24:	eb41 0303 	adc.w	r3, r1, r3
 8010d28:	f04f 0400 	mov.w	r4, #0
 8010d2c:	f04f 0500 	mov.w	r5, #0
 8010d30:	00dd      	lsls	r5, r3, #3
 8010d32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010d36:	00d4      	lsls	r4, r2, #3
 8010d38:	4622      	mov	r2, r4
 8010d3a:	462b      	mov	r3, r5
 8010d3c:	1814      	adds	r4, r2, r0
 8010d3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8010d40:	414b      	adcs	r3, r1
 8010d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f04f 0100 	mov.w	r1, #0
 8010d4e:	f04f 0200 	mov.w	r2, #0
 8010d52:	f04f 0300 	mov.w	r3, #0
 8010d56:	008b      	lsls	r3, r1, #2
 8010d58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010d5c:	0082      	lsls	r2, r0, #2
 8010d5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010d62:	f7f6 f82f 	bl	8006dc4 <__aeabi_uldivmod>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
 8010d6a:	4b2f      	ldr	r3, [pc, #188]	; (8010e28 <UART_SetConfig+0x38c>)
 8010d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8010d70:	095b      	lsrs	r3, r3, #5
 8010d72:	2164      	movs	r1, #100	; 0x64
 8010d74:	fb01 f303 	mul.w	r3, r1, r3
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	011b      	lsls	r3, r3, #4
 8010d7c:	3332      	adds	r3, #50	; 0x32
 8010d7e:	4a2a      	ldr	r2, [pc, #168]	; (8010e28 <UART_SetConfig+0x38c>)
 8010d80:	fba2 2303 	umull	r2, r3, r2, r3
 8010d84:	095b      	lsrs	r3, r3, #5
 8010d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d8a:	441e      	add	r6, r3
 8010d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f04f 0100 	mov.w	r1, #0
 8010d94:	4602      	mov	r2, r0
 8010d96:	460b      	mov	r3, r1
 8010d98:	1894      	adds	r4, r2, r2
 8010d9a:	603c      	str	r4, [r7, #0]
 8010d9c:	415b      	adcs	r3, r3
 8010d9e:	607b      	str	r3, [r7, #4]
 8010da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010da4:	1812      	adds	r2, r2, r0
 8010da6:	eb41 0303 	adc.w	r3, r1, r3
 8010daa:	f04f 0400 	mov.w	r4, #0
 8010dae:	f04f 0500 	mov.w	r5, #0
 8010db2:	00dd      	lsls	r5, r3, #3
 8010db4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010db8:	00d4      	lsls	r4, r2, #3
 8010dba:	4622      	mov	r2, r4
 8010dbc:	462b      	mov	r3, r5
 8010dbe:	eb12 0a00 	adds.w	sl, r2, r0
 8010dc2:	eb43 0b01 	adc.w	fp, r3, r1
 8010dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f04f 0100 	mov.w	r1, #0
 8010dd0:	f04f 0200 	mov.w	r2, #0
 8010dd4:	f04f 0300 	mov.w	r3, #0
 8010dd8:	008b      	lsls	r3, r1, #2
 8010dda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010dde:	0082      	lsls	r2, r0, #2
 8010de0:	4650      	mov	r0, sl
 8010de2:	4659      	mov	r1, fp
 8010de4:	f7f5 ffee 	bl	8006dc4 <__aeabi_uldivmod>
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	4b0e      	ldr	r3, [pc, #56]	; (8010e28 <UART_SetConfig+0x38c>)
 8010dee:	fba3 1302 	umull	r1, r3, r3, r2
 8010df2:	095b      	lsrs	r3, r3, #5
 8010df4:	2164      	movs	r1, #100	; 0x64
 8010df6:	fb01 f303 	mul.w	r3, r1, r3
 8010dfa:	1ad3      	subs	r3, r2, r3
 8010dfc:	011b      	lsls	r3, r3, #4
 8010dfe:	3332      	adds	r3, #50	; 0x32
 8010e00:	4a09      	ldr	r2, [pc, #36]	; (8010e28 <UART_SetConfig+0x38c>)
 8010e02:	fba2 2303 	umull	r2, r3, r2, r3
 8010e06:	095b      	lsrs	r3, r3, #5
 8010e08:	f003 020f 	and.w	r2, r3, #15
 8010e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4432      	add	r2, r6
 8010e12:	609a      	str	r2, [r3, #8]
}
 8010e14:	bf00      	nop
 8010e16:	377c      	adds	r7, #124	; 0x7c
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1e:	bf00      	nop
 8010e20:	40011000 	.word	0x40011000
 8010e24:	40011400 	.word	0x40011400
 8010e28:	51eb851f 	.word	0x51eb851f

08010e2c <_init>:
 8010e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e2e:	bf00      	nop
 8010e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e32:	bc08      	pop	{r3}
 8010e34:	469e      	mov	lr, r3
 8010e36:	4770      	bx	lr

08010e38 <_fini>:
 8010e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3a:	bf00      	nop
 8010e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e3e:	bc08      	pop	{r3}
 8010e40:	469e      	mov	lr, r3
 8010e42:	4770      	bx	lr
